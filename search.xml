<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019vivo校招笔试题]]></title>
    <url>%2F2019%2F09%2F12%2Fvivo%2F</url>
    <content type="text"><![CDATA[第二题题目描述小v是公司的运维工程师，现有一个有关应用程序部署的任务如下：1、一台服务器的磁盘空间、内存是固定的，现在有N个应用程序要部署；2、每个应用程序所需要的磁盘、内存不同，每个应用程序允许访问的用户数也不同，且同一个应用程序不能在一台服务器上部署多个。 对于一台服务器而言，如何组合部署应用程序能够使得单台服务器允许访问的用户数最多？ 输入描述输入包括三个参数，空格分隔，分别表示服务器的磁盘大小、内存大小，以及应用程序列表；其中第三个参数即应用程序列表，表述方式为：多个应用程序信息之间用‘#’分隔，每个应用程序的信息包括‘,’分隔的部署所需磁盘空间、内存、允许访问的用户量三个数字；比如50,20,2000 表示部署该应用程序需要50G磁盘空间，20G内存，允许访问的用户数为2000 输出描述单台服务器能承载的最大用户数。 分析 二维的0-1背包问题 dp[N][D][M]表示在有N个APP，磁盘大小为D、内存大小为M的条件下，最多能有多少访问量。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253int helper(const int disk, const int memory, vector&lt;int&gt;&amp; disks, vector&lt;int&gt;&amp; memories, vector&lt;int&gt;&amp;visitors) &#123; const int N = disks.size(); vector&lt;vector&lt;vector&lt;int&gt; &gt; &gt; dp(N + 1, vector&lt;vector&lt;int&gt; &gt;(disk + 1, vector&lt;int&gt;(memory + 1, 0))); for (int i = 1; i &lt;= N; ++i) &#123; for (int d = 1; d &lt;= disk; ++d) &#123; for (int m = 1; m &lt;= memory; ++m) &#123; // 将第i-1个app装入需满足条件 if (m &gt;= memories[i - 1] &amp;&amp; d &gt;= disks[i - 1]) &#123; int t1 = dp[i - 1][d - disks[i - 1]][m - memories[i - 1]] + visitors[i - 1]; int t2 = dp[i - 1][d][m]; dp[i][d][m] = t1 &gt; t2 ? t1 : t2; &#125; else dp[i][d][m] = dp[i - 1][d][m]; &#125; &#125; &#125; return dp[N][disk][memory];&#125;int main() &#123; int disk, memory; cin &gt;&gt; disk &gt;&gt; memory; string s; cin &gt;&gt; s; vector&lt;int&gt; disks, memories, visitors; for (int i = 0; i &lt; s.size(); ++i) &#123; string t = ""; while (i &lt; s.size() &amp;&amp; s[i] != '#') t += s[i++]; vector&lt;string&gt; vec; for (int j = 0; j &lt; t.size(); ++j) &#123; string t2 = ""; while (j &lt; t.size() &amp;&amp; t[i] != ',') t2 += t[j++]; vec.push_back(t2); &#125; int n; stringstream ss; for (int i = 0; i &lt; 3; ++i) &#123; ss &lt;&lt; vec[0]; ss &gt;&gt; n; if (i == 0) disks.push_back(n); else if (i == 1) memories.push_back(n); else visitors.push_back(n); &#125; &#125; cout &lt;&lt; helper(disk, memory, disks, memories, visitors) &lt;&lt; endl; return 0;&#125; 第三题题目描述一维开心消消乐，每次消除得分为消除个数k的平方，k&gt;=1。 输入描述输入一行n个正整数，代表这一行中豆子的颜色及排列。 输出描述最终能拿到的最大积分 例子 输入：1 4 2 2 3 3 2 4 1 输出：21 分析 三维动态规划问题，也是leetcode原题，可参考解析：[LeetCode] Remove Boxes 移除盒子 12345678910111213141516171819202122232425262728293031int main() &#123; int t; vector&lt;int&gt; boxes; while (cin.get() != '\n') &#123; cin &gt;&gt; t; boxes.push_back(t); &#125; const int n = boxes.size(); int dp[n][n][n] = &#123;0&#125;; for (int i = 0; i &lt; n; ++i) &#123; for (int k = 0; k &lt;= i; ++k) &#123; dp[i][i][k] = (1 + k) * (1 + k); &#125; &#125; for (int t = 1; t &lt; n; ++t) &#123; for (int j = t; j &lt; n; ++j) &#123; int i = j - t; for (int k = 0; k &lt;= i; ++k) &#123; int res = (1 + k) * (1 + k) + dp[i + 1][j][0]; for (int m = i + 1; m &lt;= j; ++m) &#123; if (boxes[m] == boxes[i]) res = max(res, dp[i + 1][m - 1][0] + dp[m][j][k + 1]); &#125; dp[i][j][k] = res; &#125; &#125; &#125; cout &lt;&lt; n == 0 ? 0 : dp[0][n - 1][0] &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019作业帮校招笔试题]]></title>
    <url>%2F2019%2F09%2F05%2Fzuoyebang%2F</url>
    <content type="text"><![CDATA[第二题（Leetcode原题）题目描述给定不同面额的硬币(coins)和一个总金额(amount) 。写一个函数来计算可以凑成总金额所需的最少的硬币个数，如果没有任何一种硬币组合能满足，返回-1。 输入描述第一行为总金额n，第二行为所有硬币的面额。 输出描述若存在可以凑成总金额所需的最少的硬币个数，则输出该数；否则输出为-1。 分析 一开始想的是用贪心算法，但后来发现不可以，比如输入总金额为20、硬币面额为1、5、6时，若采用贪心算法：20=6*3+1*2，一共需要5枚硬币，而实际只需4枚硬币即可，即20=5*4。 标准解法是动态规划算法： 定义dp[i]为总金额为i时所需要的最少硬币数，dp[0]=0； 状态转移方程：dp[i] = min(dp[i], dp[i-coin[j]] + 1)。+1是代表使用coin[j]一次。 1234567891011121314151617181920212223int getMinCoins(int n, const vector&lt;int&gt;&amp; coin) &#123; vector&lt;int&gt; dp(n + 1, n + 1); dp[0] = 0; for (int i = 0; i &lt;= n; ++i) &#123; for (int j = 0; j &lt; coin.size(); ++j) &#123; if (coin[j] &lt;= i) dp[i] = dp[i] &lt; dp[i-coin[j]] + 1 ? dp[i] : dp[i-coin[j]] + 1; &#125; &#125; return dp[n] &gt; n ? -1 : dp[n];&#125;int main() &#123; int n; // 总金额 cin &gt;&gt; n; vector&lt;int&gt; coin; // 存储硬币面额 while (cin.get() != '\n') &#123; int value; cin &gt;&gt; value; coin.push_back(value); &#125; cout &lt;&lt; getMinCoins(n, coin) &lt;&lt; endl;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019小红书校招笔试题]]></title>
    <url>%2F2019%2F09%2F03%2Fxiaohongshu%2F</url>
    <content type="text"><![CDATA[额外的一道题题目描述长宽分别为m、n的一个棋盘，里面有k个位置设有障碍物，有障碍物的点不能通过，求问从左上顶点(0,0)到右下顶点(m-1, n-1)是否有最短路径，并求出最短路径。 输入描述第一行为n,m,k，分别代表棋盘的行数和列数，以及障碍物的数量。剩下k行，每一行有两个数，代表障碍物的x和y坐标。 输出描述若存在最短路径，输出为最短路径的大小；否则输出为0。 分析 采用回溯法，利用递归，列出各种可能情况进行求解。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253int m, n;bool isFound = false;int minCnt = INT_MAX;void findShortestPath(const vector&lt;vector&lt;bool&gt; &gt;&amp; map, vector&lt;vector&lt;bool&gt; &gt;&amp; visited, int curX, int curY, int cnt) &#123; if (curX == n - 1 || curY == m - 1) &#123; isFound = true; if (cnt &lt; minCnt) minCnt = cnt; return; &#125; // down if (curX &lt; n - 1 &amp;&amp; !barrier[curX + 1][curY] &amp;&amp; !visited[curX + 1][curY]) &#123; visited[curX + 1][curY] = true; shortestPath(barrier, visited, curX + 1, curY, cnt + 1); visited[curX + 1][curY] = false; &#125; // right if (curY &lt; m - 1 &amp;&amp; !barrier[curX][curY + 1] &amp;&amp; !visited[curX][curY + 1]) &#123; visited[curX][curY + 1] = true; shortestPath(barrier, visited, curX, curY + 1, cnt + 1); visited[curX][curY + 1] = false; &#125; // up if (curX &gt; 0 &amp;&amp; !barrier[curX - 1][curY] &amp;&amp; !visited[curX - 1][curY]) &#123; visited[curX - 1][curY] = true; shortestPath(barrier, visited, curX - 1, curY, cnt + 1); visited[curX - 1][curY] = false; &#125; // left if (curY &gt; 0 &amp;&amp; !barrier[curX][curY - 1] &amp;&amp; !visited[curX][curY - 1]) &#123; visited[curX][curY - 1] = true; shortestPath(barrier, visited, curX, curY - 1, cnt + 1); visited[curX][curY - 1] = false; &#125;&#125;int main() &#123; int k; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; vector&lt;vector&lt;bool&gt; &gt; barrier(n, vector&lt;bool&gt;(n, false)); vector&lt;vector&lt;bool&gt; &gt; visited(n, vector&lt;bool&gt;(n, false)); for (int i = 0; i &lt; k; ++i) &#123; int x, y; cin &gt;&gt; x &gt;&gt; y; barrier[x][y] = true; &#125; shortestPath(barrier, visited, 0, 0, 0); if (isFound) cout &lt;&lt; minCnt &lt;&lt; endl; else cout &lt;&lt; 0 &lt;&lt; endl;&#125; 第一题题目描述薯队长写了一篇笔记草稿，请你帮忙输出最后内容。 输入字符包括英文字符、“(”、“)”和“&lt;”； 英文字符表示笔记内容；3. 括号之间表示注释内容，任何字符都无效。括号保证成对出现； “&lt;”表示退格，删去前面一个笔记内容字符，括号不受“&lt;”影响。 输入描述输入一行字符串。长度小于等于10000。 输出描述输出一行字符串，表示最终的笔记内容。 分析 题目不是很难，直接按照题意即可求出。 123456789101112131415161718192021222324int main() &#123; string src; cin &gt;&gt; src; string dst = ""; int cnt = 0; for (int i = 0; i &lt; src.size(); ++i) &#123; if (src[i] == '(') ++cnt; else if (src[i] = ')') &#123; --cnt; continue; &#125; if (cnt == 0) &#123; if (src[i] == '&lt;') &#123; if (!dst.empty()) dst.pop_back(src[i]); &#125; else dst.push_back(src[i]); &#125; &#125; cout &lt;&lt; dst &lt;&lt; endl; return 0;&#125; 第二题输入描述薯队长最近在玩一个迷宫探索类游戏，迷宫是一个N*N的矩阵形状，其中会有一些障碍物禁止通过，这个迷宫还有一些特殊的设计，它的左右边界以及上下边界是连通的，比如在(2,n)的位置继续往右走一格可以到(2,1)，在(1,2)的位置继续往上走一格可以到(n,2)。请问薯队长从起点位置S，最少走多少格才能到达迷宫的出口位置E。 输入描述第一行正整数N，接下来N行字符串。‘.’表示可以通过，‘#’表示障碍物，‘S’表示起点（有且仅有一个），‘E’表示出口（有且仅有一个）。对于50%的数据，0&lt;N&lt;10；对于100%的数据，0&lt;N&lt;1000。 输出描述输出一个整数，表示从S到E最短路径的长度，无法到达则输出-1。 分析 用一个二维数组保存从S到当前节点的路径长度，最后直接返回E坐标位置的值即可。（回溯法只能通过50%） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263int startX = 0, startY = 0;int endX = 0, endY = 0;int findShortestPath(const vector&lt;vector&lt;int&gt; &gt;&amp; map, int n) &#123; const vector&lt;vector&lt;int&gt; &gt; dir = &#123;&#123;0, 1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;, &#123;0, -1&#125;&#125;; // 上下左右四个方向 vector&lt;vector&lt;bool&gt; &gt; visited(n, vector&lt;bool&gt;(n, false)); // 记录已访问结点 vector&lt;vector&lt;int&gt; &gt; times(n, vector&lt;int&gt;(n, -1)); // 记录从S到当前位置的路径长度 times[startX][startY] = 0; queue&lt;vector&lt;int&gt; &gt; q; q.push(&#123;startX, startY&#125;); while (!q.empty()) &#123; vector&lt;int&gt; cur = q.front(); q.pop(); for (int i = 0; i &lt; dir.size(); ++i) &#123; // 下一步点的坐标 int x = cur[0] + dir[i][0]; int y = cur[1] + dir[i][1]; // 处理边界点 if (x == -1) x = n - 1; else if (x == n) x = 0; if (y == -1) y = n - 1; else if (y == n) y = 0; if (x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n &amp;&amp; !visited[x][y] &amp;&amp; (map[x][y] == '.' || map[x][y] == 'S') ) &#123; times[x][y] = times[cur[0]][cur[1]] + 1; if (x == endX &amp;&amp; y == endY) return times[x][y]; visited[x][y] = true; q.push(&#123;x, y&#125;); &#125; &#125; &#125; return times[endX][endY];&#125;int main() &#123; int n; cin &gt;&gt; n; vector&lt;string&gt; map; for (int i = 0; i &lt; n; ++i) &#123; string s; cin &gt;&gt; s; for (int j = 0; j &lt; s.size(); ++j) &#123; if (s[j] == 'S') &#123; startX = i; startY = j; &#125; if (s[j] == 'E') &#123; endX = i; endY = j; &#125; &#125; map.push_back(s); &#125; int res = findShortestPath(map, n); cout &lt;&lt; res &lt;&lt; endl;&#125; 第三题输入描述在游戏中，薯队长获得了N件宝物，接下来得把这些宝物卖给宝物回收员来赚点小钱，这个回收员有个坏毛病，每次卖给他一件宝物后，之后他就看不上比这件宝物差的宝物了。在这个世界中，衡量宝物的好坏有两个维度，稀有度X和实用度H，回收员在回收一个宝物A后，下一个宝物的稀有度和实用度都不能低于宝物A。那么薯队长如何制定售卖顺序，才能卖给回收员宝物总个数最多？ 输入描述第一行一个正整数N，接下来N行每行两个整数分别表示X和H。对于70%的数据：0&lt;N&lt;10000，0&lt;Xi&lt;10^6，0&lt;Hi&lt;10^6；对于100%的数据：0&lt;N&lt;10^6，0&lt;Xi&lt;10^6，0&lt;Hi&lt;10^6 输出描述一个整数，表示最多可以卖出的宝物数。 分析 先按X进行从小到大的排序，保证维度X是单调非递减的，然后将问题转化为求H维度的最长递增子序列； 最长递增子序列需要利用二分查找，控制时间复杂度为O(N logN)。 123456789101112131415161718192021222324252627282930313233int getLargestSales(vector&lt;pair&lt;int, int&gt; &gt;&amp; values) &#123; vector&lt;int&gt; res; sort(values.begin(), values.end(), [](pair&lt;int, int&gt;l, pair&lt;int, int&gt;r) &#123;return l.first == r.first ? l.second &lt; r.second : l.first &lt; r.first;&#125;); for (int i = 0; i &lt; values.size(); ++i) &#123; if (res.empty() || res.back() &lt;= values[i].second) &#123; res.push_back(values[i].second); &#125; else &#123; int low = 0; int high = res.size() - 1; while (low &lt; high) &#123; int mid = (high + low) / 2; if (res[mid] &lt;= values[i].second) low = mid + 1; else high = mid; &#125; res[low] = values[i].second; &#125; &#125; return res.size();&#125;int main() &#123; int n; cin &gt;&gt; n; vector&lt;pair&lt;int, int&gt; &gt; values(n); for (int i = 0; i &lt; n; ++i) cin &gt;&gt; values[i].first &gt;&gt; values[i].second; cout &lt;&lt; getLargestSales(values) &lt;&lt; endl;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019顺丰科技校招笔试题]]></title>
    <url>%2F2019%2F08%2F30%2Fshunfeng%2F</url>
    <content type="text"><![CDATA[题目一题目描述求最大非递减子序列。 分析直接用动态规划求解会超时，所以得用到贪心+二分查找。 1234567891011121314151617181920212223242526272829303132333435363738394041424344int biSearch(const vector&lt;int&gt;&amp; a, int w) &#123; int l = 0; int r = a.size() - 1; while (l &lt;= r) &#123; mid = (left + right) / 2; if (a[mid] &gt; w) right = mid - 1; else if (a[mid] &lt; w) left = mid + 1; else return mid; &#125; return left;&#125;int getRes(const vector&lt;int&gt;&amp; num) &#123; vector&lt;int&gt; dp(num.size()); int res = 1; dp[0] = num[0]; int pos = 0; for (int i = 1; i &lt; num.size(); ++i) &#123; // 如果大于等于dp中最大元素，则直接插入到dp末尾 if (num[i] &gt;= dp[res - 1]) &#123; dp[res++] = num[i]; &#125; else &#123; pos = biSearch(dp, num[i]); // 否则进行二分查找，插入到dp数组中，覆盖掉之前的值。 dp[pos] = num[i]; &#125; &#125; return res;&#125;int main() &#123; int n; while (cin &gt;&gt; n) &#123; vector&lt;int&gt; num(n); for (int i = 0; i &lt; n; ++i) &#123; cin &gt;&gt; num[i]; &#125; cout &lt;&lt; getRes(num) &lt;&lt; endl; &#125; return 0;&#125; 题目二题目描述某学术会议上，一共有n个人参加，现在已知每个人会的语言（一个人可能不会任何语言）。现在有一种学习机，每一个学习机可以在会议期间使一个人暂时掌握一种自己不会的语言，问要使得任意两人都能直接或间接的交流，至少准备多少个学习机？间接交流的意思是：可以通过其他参加会议的人翻译（可能会出现很多人一起帮忙翻译的情况）进行交流。如第一个人和第二个人会第一种语言，第二个人和第三个人会第二种语言，那么第一个人可以和第三个人进行交流。 输入描述第一行3个数n、m、k，代表人数、语言数、已知的信息数。接下来k行，每行两个数u，v，代表第u个人会第v种语言。 输出描述输出需要准备的学习机的个数 分析 考察并查集知识。即求图中连通团数减1。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849void dfs(int idx, int res, vector&lt;bool&gt;&amp; visited, vector&lt;set&lt;int&gt; &gt;&amp; group, const vector&lt;vector&lt;int&gt; &gt;&amp; vp, const vector&lt;vector&lt;int&gt; &gt;&amp; vl) &#123; visited[idx] = true; int len = vp[idx].size(); for (int i = 0; i &lt; len; ++i) &#123; int lan = vp[idx][i]; // 第idx个人会的第i门语言lan group[res].insert(lan); // 在第res组中插入lan语言 // 遍历所有会lan语言的所有人 for (int j = 0; j &lt; vl[lan].size(); ++j) &#123; int p = vl[lan][j]; if (visited[p] == 0) dfs(p, res, visited, group, vp, vl); &#125; &#125;&#125;int main() &#123; int n, m, k; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; vector&lt;vector&lt;int&gt; &gt; vp(n+1); // 人-&gt;语言 vector&lt;vector&lt;int&gt; &gt; vl(m+1); // 语言-&gt;人 vector&lt;bool&gt; visited(n+1, false); // 记录访问过的人 vector&lt;set&lt;int&gt; &gt; group(n+1); // 记录连通域内的语言 int res = 0; for (int i = 0; i &lt; k; ++i) &#123; int t1, t2; cin &gt;&gt; t1 &gt;&gt; t2; vp[t1].push_back(t2); vl[t2].push_back(t1); &#125; for (int i = 1; i &lt;= n; ++i) &#123; if (!visited[i]) &#123; dfs(i, res, visited, group, vp, vl); ++res; &#125; &#125; for (int i = 0; i &lt; res; ++i) &#123; if (group[i].size() == 0) ++cnt; &#125; if (cnt == res) ++res; cout &lt;&lt; res - 1 &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019京东校招笔试题]]></title>
    <url>%2F2019%2F08%2F24%2Fjingdong%2F</url>
    <content type="text"><![CDATA[第一题题目描述合唱队的N名学生站成一排，且从左到右编号为1到N，其中编号为i的学生身高为Hi。现在将这些学生分成若干组（同一组的学生编号连续），并让每组学生从左到右按身高从低到高进行排列，使得最后所有学生同样满足从左到右身高从低到高（中间位置可以等高），那么最多能将这些学生分成多少组？ 输入描述第一行包含一个整数N，1&lt;=N&lt;=105。第二行包含N个空格隔开的整数H1到HN，1&lt;=Hi&lt;=109。 输出描述输出能分组的最多组数 分析 思路：先整体排序，然后再用滑动窗口对遍历排好序的序列和原始序列，对二者窗口内的集合进行比较，若两集合数据一样，则计数加1；否则窗口继续扩大。 123456789101112131415161718192021222324252627282930313233343536373839404142int getMaxTeams(const vector&lt;int&gt;&amp; H) &#123; vector&lt;int&gt; sortedH; sortedH.assign(H.begin(), H.end()); sort(sortedH.begin(), sortedH.end()); int cnt = 0; unoreder_map&lt;int, int&gt; map; for (int i = 0; i &lt; H.size(); ++i) &#123; int a = H[i]; int b = sortedH[i]; if (map.find(a) != map.end()) ++map[a]; else map[a] = 1; if (map.find(b) != map.end()) --map[b]; else map[b] = -1; if (map.find(a) != map.end() &amp;&amp; map[a] == 0) map.erase(a); if (map.find(b) != map.end() &amp;&amp; map[b] == 0) map.erase(b); if (map.size() == 0) ++cnt; &#125; return cnt;&#125;int main() &#123; int N; while (cin &gt;&gt; N) &#123; vector&lt;int&gt; H(N); for (int i = 0; i &lt; N; ++i) cin &gt;&gt; H[i]; cout &lt;&lt; getMaxTeams(H) &lt;&lt; endl; &#125;&#125; 第二题题目描述某校在积极推行无人监考制度，但是总有学生是不自觉的，如果将两个很熟的异性朋友放在同一个考场里，他们就会交流甚至作弊。因此一个考场中不能允许两个很熟的异性朋友存在，学校希望通过搬出一部分学生的方法来改善这一问题。但是又因为教室数量有限，因此希望一个教室中容下的学生尽可能多，即需要搬出教室的学生数量尽可能少。请你输出搬出教室人数最少、且字典序最小的方案。 输入描述输出第一行有两个整数n和m，分别表示有n个男生和n个女生，有m个朋友关系。（1&lt;=n&lt;=500，1&lt;=m&lt;=100000）接下来m行，每行有两个整数，x和y，表示第x号男生和第y号女生是朋友。男生的编号均为[1,n]，女生的编号为[n+1,2n]。 输出描述输出第一行包含一个整数a，表示最少需要搬出教室的人数。输出第二行有a个整数，即a个需要搬出教室的人的编号，要求人数最少，且字典序最小。 分析 思路：本质是二分图最小顶点覆盖问题（即最大匹配问题，Konig定理）。详见【补充知识点】 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107// 判断二分图中x和y是否有连接bool isConnected(const multimap&lt;int, int&gt;&amp; edge, int x, int y) &#123; auto beg = edge.lower_bound(x); auto end = edge.upper_bound(x); for (auto it = beg; it != end; ++it) &#123; if (it-&gt;second == y) return true; &#125; return false;&#125;int augmentPath(const int&amp; n, const multimap&lt;int, int&gt;&amp; edge, unordered_map&lt;int, int&gt;&amp; Mx, unordered_map&lt;int, int&gt;&amp; My, int IDx, set&lt;int&gt;&amp; visited) &#123; // 考虑Y中所有顶点 for (int IDy = n + 1; IDy &lt;= 2 * n; ++IDy) &#123; // 如果Y中顶点IDy与X中顶点IDx有连接，且没有访问过 if (isConnected(edge, IDx, IDy) &amp;&amp; visited.find(IDy) == visited.end()) &#123; // 记录下该点已经被访问过了 visited.emplace(IDy); // 条件1：如果IDy没有匹配，则直接将IDy匹配给IDx； // 条件2：如果IDy匹配过了，则从IDy之前匹配过的IDx出发，找到一条增广路，但是这里已经记录IDy被访问过了。 // 如果第一个条件成立，则不会发生递归调用 if (My.find(IDy) == My.end() || augmentPath(n, edge, Mx, My, My[IDy], visited)) &#123; Mx[IDx] = IDy; My[IDy] = IDx; return 1; &#125; &#125; &#125; return 0;&#125;int maxMatching(const int&amp; n, const multimap&lt;int, int&gt;&amp; edge, unordered_map&lt;int, int&gt;&amp; Mx, unordered_map&lt;int, int&gt;&amp; My) &#123; set&lt;int&gt; visited; int res = 0; // 考虑X中所有顶点 for (int IDx = 1; IDx &lt;= n; ++IDx) &#123; // 从X中没有匹配的点出发寻找增广路 if (Mx.find(IDx) == Mx.end()) &#123; // visited记录DFS算法中顶点是否访问过 res += augmentPath(n, edge, Mx, My, IDx, visited); &#125; &#125; return res;&#125;// 由最大匹配问题转化成最小顶点覆盖问题，利用konig定理set&lt;int&gt; getMinVertexCover(const int&amp; n, const multimap&lt;int, int&gt;&amp; edge, unordered_map&lt;int, int&gt;&amp; Mx, unordered_map&lt;int, int&gt;&amp; My) &#123; stack&lt;int&gt; nonMatchedX; // 保存X中未匹配的点 set&lt;int&gt; visited; set&lt;int&gt; ret; for (int IDx = 1; IDx &lt;= n; ++IDx) &#123; ret.emplace(IDx); if (Mx.find(IDx) == Mx.end()) nonMatchedX.push(IDx); &#125; while (!nonMatchedX.empty()) &#123; int x = nonMatchedX.top(); nonMatchedX.pop(); visited.emplace(x); ret.erase(x); // 遍历Y中的顶点IDy for (int IDy = n + 1; IDy &lt;= 2 * n; ++IDy) &#123; // 如果x和IDy有连接，且IDy没有被访问过，则导入 if (isConnected(edge, x, IDy) &amp;&amp; visited.find(IDy) == visited.end()) &#123; visited.emplace(IDy); ret.emplace(IDy); if (visited.find(My[IDy]) == visited.end()) nonMatchedX.push(My[IDy]); &#125; &#125; &#125; return ret;&#125;int main() &#123; int n, m; while (cin &gt;&gt; n &gt;&gt; m) &#123; //vector&lt;pair&lt;int, int&gt; &gt; edge; multimap&lt;int, int&gt; edge; int p1, p2; for (int i = 0; i &lt; m; ++i) &#123; cin &gt;&gt; p1 &gt;&gt; p2; edge.emplace(p1, p2); &#125; unordered_map&lt;int, int&gt; Mx; // 保存X中已经匹配的节点以及匹配到的Y中的节点 unordered_map&lt;int, int&gt; My; // 保存Y中已经匹配的节点以及匹配到的X中的节点 cout &lt;&lt; maxMatching(n, edge, Mx, My) &lt;&lt; endl; set&lt;int&gt; res; // 保存需要搬出教室的人的编号 res = getMinVertexCover(n, edge, Mx, My); for (auto it = res.begin(); it != res.end(); ++it) cout &lt;&lt; *it &lt;&lt; ' '; &#125;&#125; 补充知识点参考：二分图的最大匹配、完美匹配和匈牙利算法 二分图定义：简单来说，图中的点可以分为两组，并且使得所有边都跨越组的边界，这样的图就是一个二分图。 等价定义：不含有奇数条边的环的图。 匹配匹配(Matching)：在图论中，一个匹配是是一个边的集合。其中任意两条边都没有公共顶点。 最大匹配(Maximum Matching)：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。 完美匹配(Perfect Matching)：如果一个图的某个匹配中，所有顶点都是匹配点，那么它就是一个完美匹配。 匈牙利算法（Hungarian Algorithm）求解最大匹配问题的一个算法。 交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。 增广路：从一个未匹配点出发，走交替路，如果途经另一个未匹配点（出发的点不算），则这条交替路称为增广路（Augmenting Path）。 增广路的特点：非匹配边比匹配边多一条。因此，只要把增广路中的匹配边和非匹配边的身份交换即可使图中匹配边数目比原来多了1条。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。 匈牙利树：一般由BFS构造。从一个未匹配点出发运行BFS（唯一的限制是必须走交替路），直至不能再扩展为止。 匈牙利算法要点： 从左边第1个顶点开始，挑选未匹配点进行搜索，寻找增广路。 如果经过一个未匹配点，说明寻找成功，更新路径信息，匹配边数+1，停止搜索； 如果一直没有增广路，则不再从这个顶点开始搜索。 由于找到增广路后需要沿着路径更新匹配，所以我们需要一个结构来记录路径上的点。DFS版本通过函数调用隐式地使用一个栈，而BFS版本使用prev数组。 几个定理： 定理1：最大匹配数 = 最小点覆盖数（Konig定理） 定理2：最大匹配数 = 最大独立数 定理3：最小路径覆盖数 = 顶点数 - 最大匹配数 Konig定理参考：【learning】二分图最大匹配的König定理 已知一个二分图的最大匹配数为m。 定理阐释： 按照如下方式给这堆点打上标记： 以右边部分所没有匹配到的点为起点，按交替路的方式遍历下去，直至不能继续走下去了； 给沿途的点全部打上标记。 将右边没有标记的点和左边有标记的点组成一个点集，这个点集便是最小点覆盖点集。 标记时交替路性质：对于一条在交替路上的边(u, v)，必定满足： u,v均为标号点； 若该边为匹配边，则遍历时先走到u，再走到v，即方向为从左至右； 若该边为非匹配边，则遍历时先走到v再走到u，即方向从右至左。 为何这是一个点覆盖？首先可以把边分成两类，一类是在某条交替路上的边，一类不在。 对于在交替路上的边，显然可以通过选取左边部分打上标记的点来覆盖掉。 而对于不在交替路上且没有被覆盖到的边，它在右边部分的端点一定是没有标记的。 点覆盖的大小为何等于m？ 由于是交替路，并且起点在右边，所以左边的被标记的点的个数必定和交替路中匹配边的个数相等。 非交替路上的且没有覆盖到的边的右端点肯定连到的是未标记的右边的点，而右边每个未被标记的点必定会连且只会连出一条匹配边。 两者相加为得到m。 m为何是最小点覆盖？覆盖m条匹配边最少都要m个点，所以覆盖点显然无法小于这个值。]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019shopee校招笔试题]]></title>
    <url>%2F2019%2F08%2F24%2Fshopee%2F</url>
    <content type="text"><![CDATA[第三题题目描述输入一个字符串计算表达式，用递归计算其正确输出结果，结果只截取整数部分。要求：字符串中每个数字只能在0-9之间，其余只能包含英文‘+’、‘-’、‘*’、‘/’四个运算符和小括号()，如有其它字符输入，统一输出“ERROR”提示。注意输入不包括空格，以Enter键作为输入结束符。 输入描述每次输入为一个表达式：如1+2*3-(5-4)+6/3。 输出描述输出该表达式的值：如8 分析 用逆波兰法可解决。参考：波兰式、逆波兰式与表达式求值 逆波兰法：先将中缀表达式转换成后缀表达式，然后再利用后缀表达式求解。 中缀表达式转换成后缀表达式步骤： 从左至右依次遍历表达式中元素； 如果当前元素是数字，直接输出； 如果当前元素是左括号，压入栈中； 如果当前元素是操作符，执行while循环： 如果满足栈为空或栈顶元素为左括号或当前操作符优先级高于栈顶操作符优先级，将当前元素压入栈中，并退出while循环； 否则，栈顶元素出栈并输出，并继续while循环。 如果当前元素是右括号，则栈顶元素出栈并输出，直至遇到左括号，将左括号丢弃； 遍历结束后，输出栈中所有元素。 后缀表达式求解步骤： 从左至右遍历后缀表达式中元素； 如果是数字，压入栈内； 如果是操作符，从栈中取出两个数进行操作，并将结果压入栈中（出二进一） 遍历结束年，栈顶元素即为结果。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107// 判断是否是表达式bool isExpr(string s) &#123; bool ret = true; for (int i = 0; i &lt; s.size(); ++i) &#123; if (!((s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9') || s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/' || s[i] == '(' || s[i] == ')')) &#123; ret = false; break; &#125; &#125; return ret;&#125;// 判断是否是操作符bool isOperator(const char&amp; op) &#123; return (op == '+' || op == '-' || op == '*' || op == '/');&#125;// 返回运行符的优先级int priority(const char&amp; op) &#123; if (op == '*' || op == '/') return 2; else if (op == '+' || op == '-') return 1; else return 0;&#125;// 中缀表达式转换成后缀表达式void infix2Suffix(const string&amp; src, string&amp; dst) &#123; stack&lt;char&gt; s; for (int i = 0; i &lt; src.size(); ++i) &#123; // 如果是数字，直接输出 if (src[i] &lt;= '9' &amp;&amp; src[i] &gt;= '0') dst += src[i]; // 如果是左括号，压入栈中 if (src[i] == '(') s.push(src[i]); // 如果是操作符 while (isOperator(src[i])) &#123; // 当栈为空或栈顶为左括号或当前操作符优先级高于栈顶操作符优先级时，压入栈中，并退出while循环 if (s.empty() || s.top() == '(' || priority(src[i]) &gt; priority(s.top())) &#123; s.push(src[i]); break; &#125; // 否则，将栈顶元素出栈，并继续while循环 else &#123; dst += s.top(); s.pop(); &#125; &#125; // 如果是右括号，则不停地执行出栈操作直至栈顶元素为左括号，最后丢弃掉左括号 if (src[i] == ')') &#123; while (src[i] != '(') &#123; dst += s.top(); s.pop(); &#125; s.pop(); &#125; &#125; // 遍历结束后将栈中剩下元素输出 while (!s.empty()) &#123; dst += s.top(); s.pop(); &#125;&#125;// 求解int getResult(const string&amp; src) &#123; string dst; stack&lt;int&gt; s; infix2Suffix(src, dst); for (int i = 0; i &lt; dst.size(); ++i) &#123; if (dst[i] &lt;= '9' &amp;&amp; dst[i] &gt;= '0') s.push(dst[i] - '0'); else &#123; int a = s.top(); s.pop(); int b = s.top(); s.pop(); int c = 0; if (dst[i] == '+') c = b + a; else if (dst[i] == '-') c = b - a; else if (dst[i] == '*') c = b * a; else if (dst[i] == '/') c = b / a; s.push(c); &#125; &#125; return s.top();&#125;int main() &#123; string expr; while(cin &gt;&gt; expr) &#123; if (!isExpr(expr)) cout &lt;&lt; "ERROR" &lt;&lt; endl; else cout &lt;&lt; getResult(expr) &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019依图内推第二批笔试题]]></title>
    <url>%2F2019%2F08%2F23%2Fyitu%2F</url>
    <content type="text"><![CDATA[第一题题目描述在狸星数字里，数字1到9被表示为：’I’、’II’、’III’、’IV’、’V’、’VI’、’VII’、’VIII’、’IX’，数字10、20、30、40、50、60、70、80、90被表示为’X’、’XX’、’XXX’、’XL’、’L’、’LX’、’LXX’、’LXXX’、’XC’。 任何小于100的正整数都可以通过这样的方式转成狸星数字：将个位数和十位数拆开，分别转成狸星数字再合起来，十位在左个位在右。 你的任务：给出一个小于100的狸星数字，将其中的字母重新排列，使得重排后的结果仍然是一个合法的狸星数字，且使其尽可能小。 输入描述一行，一个大写字母表示的合法狸星数字，且为小于100的正整数。 输出描述一行，最小的重新排列后的狸星数字。 分析 思路：直接用暴力dfs将所有的情况罗列出来，然后再进行比较。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667unordered_map&lt;string, int&gt; numMap&#123; &#123; "I", 1 &#125;, &#123; "II", 2 &#125;, &#123; "III", 3 &#125;, &#123; "IV", 4 &#125;, &#123; "V", 5 &#125;, &#123; "VI", 6 &#125;, &#123; "VII", 7 &#125;, &#123; "VIII", 8 &#125;, &#123; "IX", 9 &#125;, &#123; "X", 10 &#125;, &#123; "XX", 20 &#125;,&#123; "XXX", 30 &#125;,&#123; "XL", 40 &#125;,&#123; "L", 50 &#125;, &#123; "LX", 60 &#125;,&#123; "LXX", 70 &#125;,&#123; "LXXX", 80 &#125;,&#123; "XC", 90 &#125; &#125;;// 根据给定猩星数字，返回阿拉伯数字int getNum(const string&amp; num) &#123; string digit = ""; int curNum = 100; // 如果不满足狸星数字的条件，则返回100 int i = 0; for (; i &lt; num.size(); ++i) &#123; if (num[i] != 'I' &amp;&amp; num[i] != 'V') //十位与个位的分界线一定是'V'或'I' digit += num[i]; else break; &#125; if (i == 0) &#123; if (numMap.find(num) != numMap.end()) curNum = numMap[num]; &#125; else &#123; string unit = num.substr(i, num.size()); if (numMap.find(digit) != numMap.end() &amp;&amp; numMap.find(unit) != numMap.end()) curNum = numMap[unit] + numMap[digit]; &#125; return curNum;&#125;void swap(string&amp; s, int i, int j) &#123; char c = s[i]; s[i] = s[j]; s[j] = c;&#125;// 全排列void fullArray(string&amp; num, int idx, string&amp; minStr, int&amp; minNum) &#123; if (idx &gt;= num.size()) &#123; int tmp = getNum(num); if (tmp &lt; minNum) &#123; minNum = tmp; minStr = num; &#125; return; &#125; for (int i = idx; i &lt; num.size(); ++i) &#123; swap(num, i, idx); fullArray(num, idx + 1, minStr, minNum); swap(num, i, idx); &#125;&#125;int main() &#123; string num; while (cin &gt;&gt; num) &#123; int cur = getNum(num); int minNum = cur; string minStr = num; fullArray(num, 0, minStr, minNum); cout &lt;&lt; minStr &lt;&lt; endl; &#125; return 0;&#125; 题目二题目描述小依每天下班后都会玩骰子来放松心情，小依一共有n个骰子，每个骰子有6面，每一个面上都有一个数字，一个骰子的6个面上的数字互不相同。现在小依想知道，小依可以任意让每个骰子的某一面朝上，n个骰子有多少种组合方式使得所有骰子向上的面上的数字加起来的和等于k。 注意：如果有两个骰子，（第一个骰子数字2向上，第二个骰子数字3向上）和（第一个骰子数字3向上，第二个骰子数字2向上）算两种不同的组合方式。 输入描述第一行输入为n和k，n表示小依的骰子数（1&lt;=n&lt;=14），k如题目描述所示，接下来的n行每行有6个正整数，每个数字的大小不超过100。 输出描述输出一个正整数表示答案 分析 思路一：暴力dfs，时间复杂度较高，牛客上通过率仅为70%。 1234567891011121314151617181920212223242526272829303132void recursive(const int&amp; n, const int&amp; k, const vector&lt;vector&lt;int&gt; &gt;&amp; vec, int&amp; cnt , int curCnt, int curIdx) &#123; if (curIdx == n) &#123; if (curCnt == k) ++cnt; return; &#125; if (curCnt &gt;= k) return; for (int i = 0; i &lt; 6; ++i) &#123; int curVal = vec[curIdx][i]; curCnt += curVal; recursive(n, k, vec, cnt, curCnt, curIdx + 1); &#125;&#125;int main() &#123; int n, k; while (cin &gt;&gt; n &gt;&gt; k) &#123; vector&lt;vector&lt;int&gt; &gt; data(n, vector&lt;int&gt;(6, 0)); for (int i = 0; i &lt; n; ++i) &#123; for (int j = 0; j &lt; 6; ++j) cin &gt;&gt; data[i][j]; &#125; int cnt = 0; recursive(n, k, data, cnt, 0, 0); cout &lt;&lt; cnt &lt;&lt; endl; &#125; return 0;&#125; 思路二：动态规划 dp[i][j]表示前i个骰子向上那面数字之和为j的组合数 状态转换方程： 123456for(int p=0; p&lt;6; p++)&#123; int curVal = data[i-1][p]; if(j&gt;=curVal) dp[i][j] += dp[i-1][j-curVal];&#125; 思路二代码实现： 1234567891011121314151617181920212223242526272829int main()&#123; int n, k; while (cin &gt;&gt; n &gt;&gt; k) &#123; vector&lt;vector&lt;int&gt; &gt; data(n, vector&lt;int&gt;(6, 0)); for (int i = 0; i &lt; n; ++i) &#123; for (int j = 0; j &lt; 6; ++j) cin &gt;&gt; data[i][j]; &#125; vector&lt;vector&lt;int&gt;&gt; dp(n+1, vector&lt;int&gt;(k+1, 0)); dp[0][0] = 1; for(int i=1; i&lt;dp.size(); i++) &#123; for(int j=0; j&lt;dp[i].size(); j++) &#123; for(int p=0; p&lt;6; p++) &#123; int curVal = data[i-1][p]; if(j&gt;=curVal) dp[i][j] += dp[i-1][j-curVal]; &#125; &#125; &#125; cout &lt;&lt; dp[n][k]; &#125; return 0;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019拼多多学霸批第二批笔试题]]></title>
    <url>%2F2019%2F08%2F16%2Fpinduoduo%2F</url>
    <content type="text"><![CDATA[2019拼多多学霸批第二批笔试题第三题C++解法及解析。 参考：2019 拼多多校招第三题sum 服务端研发工程师 题目描述给定两个正整数N和S，你需要找出所有的长度为N的正整数数列中，满足单调递增以及总和为S的数列有多少个。 输入描述共一行，两个整数N和S（1 &lt; N, S &lt; 1000）。 输出描述一个整数，为满足条件的数列个数对100000007取模的结果。 分析 最佳解法：动态规划，这里用vec[n][s]表示和为s长度为n的序列个数。 状态转换方程：vec[n][s] = vec[n][s-n] + vec[n-1][s-n] 解释： vec[n][s-n]：表示和为s-n的长度为n的序列个数（把它们都加上1，便成了开头数字为非1且和为s的长度为n的序列个数）； vec[n-1][s-n]：表示开头数字为非1，和为s-n的长度为n-1的序列个数（把它们都加上1，然后在序列开头加入1，便成了开头数字为1且和为s的长度为b的序列个数）。 1234567891011121314151617181920212223void getCnt(const int&amp; N, const int&amp; S, vector&lt;vector&lt;int&gt; &gt;&amp; vec) &#123; if (vec[N][S] != 0) return; for (int i = 2; i &lt;= N; ++i) &#123; for (int j = i + 1; j &lt;= S; ++j) vec[i][j] = (vec[i][j-i] + vec[i-1][j-i]) % 1000000007; &#125;&#125;int main() &#123; int N, S; while(cin &gt;&gt; N &gt;&gt; S) &#123; vector&lt;vector&lt;int&gt; &gt; vec(N + 1, vector&lt;int&gt;(S + 1, 0)); for (int i = 1; i &lt;= S; ++i) vec[1][i] = 1; getCnt(N, S, vec); cout &lt;&lt; vec[N][S] % 1000000007 &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：手撕代码]]></title>
    <url>%2F2019%2F08%2F15%2FhandCode%2F</url>
    <content type="text"><![CDATA[手撕代码 给定一个数字数组，建立哈夫曼树，返回哈夫曼树的头指针 最长公共连续子序列 手写一个排序算法吧，要不就快排吧 去掉字符串中的空格空格 最长回文字符串 链表合并 [0, n), n个数，范围[0, n-1], 求是否有重复方法 求第k大的数的方法以及各自的复杂度 当有相同元素时，求第k大的元素的方法（类似快排，手撕） 给你一个数组，再给你几对数，这几对数只能够同时出现或者不同时出现，求拿出k个数的可能性（true or false）（手撕，dfs标号+dp） 实现一个买票系统：实现买票，退票，检票。给一个小时，手撕，文件流+map搞一下就行了，API之类的可以百度。 数据流，如何获取中位数，复杂度 一到一百万的素数，怎么快速求 有一堆数，再给你很多对数，每对数都在同一个组，求一共有多少组数 有很多蜡烛，每根蜡烛1个小时，求15分钟怎么计时 十六进制转十进制 1/x + 1/y = 1/n求最小的n，使得对数超过1000 如何求前100大的数 栈实现队列，队列实现栈 手撕：求一个集合的所有子集，递归实现，非递归实现 去除包含4的数字，求一个数字是第几个数，比如5是第四个数（数位dp） 有一个楼梯，一共有n层，可以走a步，也可以走b步，问最高能走到哪里？（dp,O(n)）。增加一个条件，有一次条件可以回退一半，比如本来在第8层，可以有一次机会直接到第4层。(两次dp，O(n)) 一个数组，里面大多数都是成对的，只有两个数没有成对，求这两个数（异或搞一下，把数组分成两组） 求一个栈的pop序是否合法。 int to string，string to int。 反转链表 大数相乘 char *s1, const char *s2，删除s1中s2出现过的字符 删除单项链表中重复的节点 (1 2 2 3 3 9) -&gt; (1 2 3 9) 求二叉树的深度 单链表判环 判断一个数是不是回文数 求一个数组的最长连续子序列 有两个链表，怎么求交点？ 一万个数，求前100大的数 假设有一个排好序的数组，数字都是两个两个出现的，只有一个是单独出现的，求这个数 链表翻转（递归，非递归） 判断一颗树是不是二叉搜索树 给出1000000条数据，每次请求查询时怎么最快，要想好多种方法红黑树，hash然后一直问有没有其他的 之字形打印二叉树 两个有序数组求交集 无序数组求交集 hash 二分查找中位数 复杂度分析 memcpy 函数 怎么实现的，有没有比memcpy更快的 判断一个点是不是在三角形内 求每一个元素右边第一个最大元素 单调栈解法，分析O(N) 出一个连续数组，找出一个连续子集中所有元素中最小元乘以加和最大值 求一个非递减数组中，绝对值不同的个数 O(N ) O(1)空间 字符串翻转 叙述一下洗牌算法 怎么判断一个数是二的倍数，怎么求一个数中有几个1 手写strcpy函数 已知最大数为M的递增子序列求所有和为s的子集合 两个大的数据集装入的数据是无重复的，求交集 kmp 多重背包，0/1背包 字符串转double的代码 写点代码写了构造函数、复制构造、复制操作、移动构造、移动操作。 二叉排序树的插入、删除，删除没写完 给定前序遍历ABC后序遍历CBA，求中序遍历是什么，画出来两种情况 前序、中序和后续遍历，递归和非递归 50 亿个整数中， 找一个确定的数？ 有内存限制， 并且无序 给你一个字符串，找出第一个不重复的字符，如“abbbabcd”，则第一个不重复就是c 给你两个球，100层楼，每个球在一定高度扔下去会碎，怎么用最少的次数给判断是几层楼能把求摔碎？ n个整数的无序数组，找到每个元素后面比它大的第一个数，要求时间复杂度为O(N)，在面试官提醒下写出来了，用栈+栈底指针 讲述一下堆排序 归并排序 给定一个链表，输入n，删除从结尾开始的第 n 个节点 给定一个数组，删除数组连续重复的元素，生成一个新数组 给定一个无序数列，输出该序列中出现频率前 k 多的数 八数码问题 求两个链表的交点；(tips：①判环，②求环的入口，③如果两个链表都有环，判断入口是否相同，共5种拓扑结构) 二维平面有n个点，求一条直线，使最多的点落在该直线上，三维呢？ 不同排序各有优势让我实现一个通用排序库， 快排与归并的优劣势 给两个字符串A,B，判断B是否是A的子序列 .给两个字符串A,B,找到在B中所有字母在A中出现的下标 给一个字符串A，N次询问，每次问字符串B是否是A的子序列 一个有环的单链表，如何找到环结点 给一个字符串，将字符串中的单词从后向前翻转，手写代码 A[50]50个数,B[49]49个数，数字取值范围[0,49]，找出A中多出来的一个数字 一个平面，100个点，求一条直线，经过的点最多，给个思路就行 给你一个50亿的整数让你找出中位数. 最大连续子数组的和 1、给1亿个数，求字典序第K（k&lt;1亿）大的数（字典树） 2、链表拆分，翻转，合并 如 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 变为1-&gt;6-&gt;2-&gt;5-&gt;4-&gt;3 树转单链表（前序） 旋转数组查找 求后面第一个比当前数大的数 数组两两元素求异或，求最大的异或值（01字典树） n个有序链表，合并成一个 字符串A,B，在A中删除B中出现过的字符 二叉树知道后序中序求前序遍历 100万数据找top k，判断一个数是不是2的幂，两个单链表有公共节点，找出第一个。 一颗二叉搜索树，找出树中的第k大节点 将字符串转化为整型 给你两个有序数组，找中位数 m个有序数组合并后输出前K个数 二叉树的最小公共结点 m个有序数组合并后输出第k个数（二分） 手写代码，计算一个整数二进制中0的个数。 有一支股票，知道每天的价格，本金一定，只准买卖一次，问如何做到收益最大。 给定几个互不相同的数字组成的一个字符串，输出同样由这几个数字组成的，字典序恰好比它大1的字符串。 (s,n)表示字符串s反复出现n次；s-&gt;t表示s去掉若干字符之后能成为t；给定S1与S2，求最大的m使得S1-&gt;(S2,m) 给定一些正整数(1,3,4,5,7)，输入一个n，输出最少用多少个给定的数能加出n来。 一个整数序列，A和B两个人轮流取数，每次只能取最左的数或最右的数，两个人都想使自己的和尽可能大，问给定序列以后A和B能取到的和各是多少。 给定字符串s，输出第一个满足：在s中恰好出现3次的字母。保证存在这样的字母且字符串都是小写字母组成。 手撕代码，二叉树两个节点最长路径 两个有序数组合并，n个有序数组合并 int数组求最大子串和、二维、三维、四维呢 其他算法题 有一户家庭，生了两个娃，其中一个是女孩，另外一个是女孩的概率 一副扑克牌，怎么实现随机打乱？ 假设有两个数组，各有十万数量级的整数，如何求交集？ 个人项目的benchmark性能测试结果如何 有100个弹珠，双方轮流拿，每个人只能拿1~5个，无法拿的人输，必胜解法。 求char a数组中有的元素和char b数组中没有的元素，放到char c数组。这里我忘记把char字符转成unsigned char类型。 windows消息机制知道吗？系统怎么知道 。。MFC消息机制 1000瓶水有1瓶水有毒，老鼠喝一滴就会死，但是需要一周毒发，请问最少需要多少老鼠多少时间才能找到那瓶有毒的水。答案是10只老鼠1周，解法是十进制转二进制 桶中取球排列组合问题 40亿个QQ号，4GB的空间，O(1)的时间，这个时候新来了一个QQ号，判断这个QQ号是否存在 个非常拥堵的路口，让你分析拥挤原因，并且提供解决方案 高德地图是怎么知道高速路哪里堵车了，并且还能标记出来准确的路段？ 提出你的设想. 如果让你统计出这个城市当中的交通信息，比如说那几个路口每天多少车左转，多少车右转，你怎么做？ MFC消息怎么定义 x 太久没写忘记了，就记得个声明和绑定函数 做个数学题吧，一副扑克牌取5张，出现顺子的概率，大小王能任意当成什么牌 8个球找重量不一样的一个怎么称 36匹马6个跑道无秒表选前三，最少跑几轮]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：操作系统]]></title>
    <url>%2F2019%2F08%2F15%2FoperationSystems%2F</url>
    <content type="text"><![CDATA[题目操作系统 系统中断是什么，用户态和内核态的区别 PCB内存布局 虚拟内存和物理内存怎么对应 操作系统中内存块以何种数据结构构成 进程与线程 用过多线程吗，以前的多线程代码还能怎么优化，线程池的实现。答案 单核机器上写多线程程序，是否需要考虑加锁，为什么？答案 线程需要保存哪些上下文，SP、PC、EAX这些寄存器是干嘛用的。答案 线程间的同步方式，最好说出具体的系统调用。答案 进程与线程什么意思，为什么要有进程线程，其中有什么区别，他们各自怎么同步的。答案 多进程和多线程的使用场景。答案 死锁，如何解决死锁？答案 进程间通讯方式。答案 怎么保证一个CPU只有一个线程运行？ 线程的基本组成是什么？答案 线程有什么状态？运行挂起结束状态，有新生状态吗？答案 守护进程、僵尸进程、孤儿进程，守护进程的作用是什么？答案 协程是什么？答案 进程的状态？答案 参考答案操作系统进程与线程 为何需要线程池：频繁的创建和销毁线程会大大地浪费时间和效率，更浪费内存。线程池便是针对这一问题而设计的。可以很好地解决线程的重复利用，避免重复开销。 线程池的优点： 线程是稀缺资源，使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以重复使用； 可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存导致服务器崩溃。 线程池的风险： 死锁 资源不足：除了线程对象所需的内存之外，每个线程都需要两个可能很大的执行调用堆栈。如果线程池太大，那么被那些线程消耗的资源可能严重地影响系统性能。 并发错误：线程保存空闲状态，尽管队列中有工作要处理； 线程泄漏：当从池中除去一个线程以执行一项任务，而在任务完成后该线程却没有返回池时，会发生线程泄漏。 请求过载：仅仅是请求就压垮了服务器。解决：在某些情况下，可以简单地抛弃请求，依靠更高级别的协议稍后重试请求；也可以用一个指出服务器暂时很忙的响应来拒绝请求。返回原题 单核CPU跑多线程程序，也需要加线程锁。理由如下： 时间片的大小不定：比如单个时间片只能完成给定任务的一半，剩下的那一半就是只有等下一个时间片了。而在等待的过程中，如果不加锁，就没法保证其他线程不使用我们的资源，数据就有可能出错； 给线程分配时间片的时机不确定：比如有a、b、c三个进程，a、c使用了共享的资源。如果前十个时间片都集中在a、b上，那么很有可能时间片分给c的时候，a已经完成了工作，因此它也不需要和c争夺资源了。如果a、c的优先级比b高，那么时间片可能大部分分配在a、c上，这个时候a、c就要疯狂争夺资源了。返回原题 线程切换时需要保存当前线程ID、线程状态、堆栈、寄存器状态等信息。其中寄存器主要包括SP、PC、EAX等寄存器。 SP（Stack Pointer）：堆栈指针，指向当前栈的栈顶地址； PC（Program Counter）：程序计数器，存储下一条将要执行的指令； EAX（Extended Accumulator Register）：累加寄存器，用于加法乘法的缺省寄存器。返回原题 互斥锁（mutex）：用来保证同一时间内只有一个线程在执行某段代码（临界区）。在同一时刻只能有一个线程掌握某个互斥锁，拥有上锁状态的线程能够对共享资源进行操作。若其他线程希望上锁一个已经被上锁的互斥锁，则该线程就会挂起，直到上锁的线程释放掉互斥锁为止。主要包含以下基本函数： 互斥锁初始化：pthread_mutex_init()； 互斥锁上锁：pthread_mutex_lock()； 互斥锁判断上锁：pthread_mutex_trylock()； 互斥锁解锁：pthread_mutex_unlock()； 消除互斥锁：pthread_mutex_destroy()。 信号量（semaphore）：和mutex类似，表示可用资源数量，不同的是这个数量可以大于1。步骤为 信号量初始化-&gt;等待信号量-&gt;释放信号量-&gt;销毁信号量； 条件变量（cond）：与互斥锁结合使用，是用来等待而非上锁的。它用于阻塞线程等待某个事件的发生，并且当等待的事件发生时，阻塞线程会被通知。步骤为：初始化条件变量-&gt;等待条件成立-&gt;激活条件变量-&gt;清除条件变量。 读写锁（reader-writer lock）：也称共享互斥锁。有三种状态：读模式下加锁状态、写模式下加锁状态、不加锁状态。一次只能有一个线程可以占有写模式的读写锁，但可以有多个线程同时占有读模式的读写锁。因此与互斥量相比，读写锁允许有更高的并行性。 临界区（critical section）：主要用于同步控制； 临界区和互斥体的区别： 临界区只能用于本进程内的线程，而不可用来同步多个进程中的线程；互斥量、信号量、事件都可以跨越进程使用来进行同步数据操作； 临界区是非内核对象，只在用户态进行锁操作，速度快；互斥体是内核对象，在核心态进行锁操作，速度慢。返回原题 进程和线程的区别： 进程是资源分配的最小单位，线程是CPU调度的最小单位。 进程有独立的地址空间，在保护模式下，一个进程崩溃后不会影响其他进程。而线程只是一个进程中的不同执行路径，线程有自己的堆栈和局部变量，但没有独立的地址空间，一个线程崩溃就等于整个进程崩溃。所以多进程的程序要比多线程的程序更加健壮。 进程切换时，耗费资源大，效率要比线程低； 一个程序至少要有一个进程，一个进程至少要有一个线程； 线程的划分尺度小于进程，因此多线程程序的并发性更高； 由于多个线程共享内存单元，从而极大地提高了程序的运行效率； 在执行过程中，每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制； 多进程同步（以下是Linux系统的，Windows系统相比少了一个信号）： 管道（pipe）：用于父子进程间的通信； 信号（signal）：进程间传递信号，捕获到信号后执行对应绑定的代码，和QT的信号槽类似。 信号量（semaphore）：本身无法传递数据，配合共享内存使用，类似于线程中的锁，用于保护临界资源； 共享内存（shared memory）：进程间最常见的数据同步方式，与信号量配合使用； 消息队列（message）：把数据放入队列，内核逐一处理发送至目的线程； 套接口（socket）：可用于不同机器之间的进程间通信 多线程同步：参考上题 返回原题 多进程的优点： 编程相对容易，无需考虑锁和同步资源的问题； 更强的容错性：一个进程崩溃了不会影响其他进程； 有内核保证的隔离：数据和错误隔离； 多进程案例： Chrome浏览器、redis、nginx； 多线程的优点： 创建速度快； 数据共享更加高效：多线程共享同一虚拟地址空间； 轻松的上下文切换开销：不用切换地址空间、不用更改寄存器、不用刷新TLB； 提供非均质的服务：如果全都是计算任务，但每个任务的耗时不都为1s，而是1ms-1s之间波动；这样，多线程相比多进程的优势就体现出来，它能有效降低“简单任务被复杂任务压住”的概率。 多线程案例： 桌面软件：响应用户输入的是一个线程，后台程序处理是另外的线程返回原题 死锁：进程死锁的简称。是指两个或两个以上的进程在执行过程中，以至于竞争资源或由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。 造成死锁的必要条件： 互斥条件：一个资源每次只能被一个线程使用； 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放； 不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺； 循环等待条件：若干线程之间形成一种首尾相接的循环等待资源关系。 避免死锁：破坏产生死锁的4个必要条件之一便可以避免死锁。返回原题 Linux系统进程间的通信方式：管道（pipe）、信号（signal）、消息队列（Message）、共享内存（shared memory）、信号量（semaphore）、套接字（socket）。 Windows系统进程间的通信方式：管道（pipe）、信号（signal）、互斥量（mutex）、共享内存（shared memory）、套接字（socket）。返回原题 线程ID：ID在本进程中是唯一的，用于标识线程； 当前指令指针（PC） 寄存器集合：由于线程是并发执行的，每个线程有自己不同的运行线索，当从一个线程切换到另一个线程上时，必须将原有线程的寄存器集合的状态进行保存，以便将来该线程在被重新切换时能得以恢复； 堆栈：堆栈是保证线程独立运行所必须的。线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影响。一个进程的线程共享堆区。返回原题 状态： 新建（New）：创建后尚未启动的线程状态； 运行（Runable）：包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间； 无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其他线程显式地唤醒； 限期等待（Time Waiting）：处于这种状态的线程不会被分配CPU执行时间，不会必须被其他线程显式地唤醒，在一定时间后它们会由操作系统自动唤醒； 阻塞（Blocked）：线程被阻塞了，等待着获取一个排它锁，这个事件将在另一个线程放弃这个锁的时候发生；而等待状态则是在等待一段时间，或者唤醒的发生，在程序等待进入同步区域时，线程将进入这种状态； 线束（Terminated）：已终止的线程状态，线程已经结束执行。返回原题 孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。所以孤儿进程不会对系统造成危害； 僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称为僵尸进程。 危害：如果大量地产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。 解决：将父进程杀死，所有僵尸进程变为孤儿进程，被init收养，然后被释放资源；父进程对子进程进行wait()或waitpid()调用来释放其所占有资源。 守护进程：是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务。 常见的守护进程：日志进程syslogd、web服务器httpd、邮件服务器sendmail和数据库服务器mysqld等。 特点：一个守护进程的父进程是init进程，命名通常以d结尾；一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行；守护进程通常以root权限运行。返回原题 协程（Coroutines）：是一种比线程更加轻量级的存在。一个线程可以拥有多个协程。协程不是被操作系统内核所管理，而完全是由程序所控制，即在用户态执行。 使用协程的好处：性能得到了很大提升，不会像线程切换那样消耗资源。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。 Python：可以通过yield/send的方式实现协程。python3.5后，async/await成为了更好的替代方案。返回原题 参考：进程状态（含状态变迁图） 三态模型： 就绪：当一个进程获得了除处理器以外的一切所需资源，一旦得到处理器即可运行，则称此进程处理就绪状态。 运行：当一个进程正在处理器上运行时，则称该进程处于运行状态。 阻塞：也称等待或睡眠状态，一个进程正在等待某一事件发生，而暂时停止运行。这时即使把处理器分配给进程也无法运行，故称该进程处于阻塞状态。 五态模型：新增新建态和终止态 新建态：对于进程刚刚被创建时没有被提交的状态，并等待系统完成创建进程的所有必要信息。进程正在创建过程中，还不能运行。 终止态：进程已结束运行，回收除进程控制块之外的其他资源，并让其他进程从进程控制块中收集有关信息。返回原题]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：计算机网络]]></title>
    <url>%2F2019%2F08%2F15%2Fnetworks%2F</url>
    <content type="text"><![CDATA[题目 TCP的模型，状态转移 HTTP和HTTPS的区别，HTTPS有什么特点，带来的好处和坏处，怎么实现的？答案 TCP 讲了一遍，讲 Segment 中的每个字段是如何为 TCP 面向连接、可靠的流式服务提供支持的 TCP怎么保证可靠性，以及画一下建立连接和断开连接的过程，发了什么？答案 讲讲TCP为什么是三次握手，四次挥手？答案 讲讲浏览器输入地址后发生的全过程．（每一个细节都讲）答案 http请求报文和应答报文的格式（三块） http返回码。答案 ip地址有什么用，ip地址和mac地址。答案 OSI七层模型和TCP/IP四层模型，每层列举2个协议。答案 DNS 拥塞控制。答案 UDP模拟TCP 客户端向服务器发3个包，基于TCP和UDP的服务器会收到几个？ 介绍time_wait状态 TCP/IP 数据链路层的交互过程，传递到IP层怎么知道报文该给哪个应用程序，再问：它怎么区分UDP报文还是TCP报文？答案 滑动窗口 TCP传输对包的大小有限制吗？ 现在我要传输一个1M的数据包，tcp如何传输？ HTTP1.0与HTTP2.0 TCP和UDP各自的优势，知道哪些使用UDP协议的成功案例。答案 TCP和UDP各用了底层什么协议 单个UDP报文最大容量 TCP粘包怎么处理 如果网络延迟很高，但是又没有发生丢包，利用tcp会使吞吐量下降，该如何解决呢 socket编程中服务端和客户端分别用到哪些函数？答案 参考答案 HTTP和HTTPS的区别： HTTP是以明文的方式在网络中进行传输数据，而HTTPS协议传输的数据则是经过TLS加密过的，因而具有更高的安全性； HTTPS在经过TCP的三次握手后，还要进行SSL的handshake，协商加密使用的对称加密密钥； HTTPS需要服务器端申请证书，且浏览器端安装对应的根证书； HTTP的端口是80，而HTTPS的端口是443。 HTTPS的优点： 在数据传输过程中使用密钥进行加密，所以安全性更高； 通过认证用户和服务器，因而可以确保数据发送到正确的用户和服务器。 HTTPS的缺点： 握手阶段延时较高：由于在进行HTTPS会话之前，还需要进行SSL握手，因此HTTPS握手阶段延时增加； 部署成本高：一方面需要使用证书来验证自身的安全性，需要购买CA证书；另一方面，由于采用HTTPS协议需要加解密计算，占用CPU资源较多，需要的服务器配置或数目较高。返回原题 序列号、确认应答、超时重传： 数据到达接收方，接收方需要发回一个确认应答，表示已经收到该数据段。并且确认序号会说明它下次要接收的数据序列号。如果发送方迟迟未收到确认应答，那么可能是发送的数据丢失，也可能是确认应答丢失，这时发送方会在等待大约2倍RTT（报文往返时间）后进行重传。 窗口控制与快重传： TCP会利用窗口控制来提高传输速度，即在一个窗口大小内，不用一定得等到确认应答后才能发送下一个数据，窗口大小就是无需等待确认而可以继续发送数据段的最大值。 使用窗口控制，如果某数据段丢失，则接收方会持续发送该数据段的序列号的应答，如果发送方连续收到三次该应答，则立刻进行重发。 拥塞控制： 为了防止发送数据过多，造成网络拥塞。 慢开始、拥塞避免、快重传等返回原题 三次握手： 过程：C–&gt;SYN–&gt;S；S–&gt;SYN/ACK–&gt;C；C–&gt;ACK–&gt;S。 原因：可以防止已经失效的连接请求报文突然又传递到服务器端造成服务器资源浪费的情况发生。以及确保连接的可靠性。 例子：客户端发出了一个连接请求的SYN，但由于网络阻塞，该报文滞留在某节点了。然后超过一定时长后，客户端又重新发出了一个SYN，并与服务器建立连接、传输数据，最后再关闭连接。这时，滞留在某节点的SYN突然又传递到了服务器端，如果只有二次握手，服务器端会误以为这是客户端新建立的连接请求，于是发送一个SYN给客户端，并在服务器创建socket套接字，一直等待客户端传送数据。但由于客户端没有连接服务器的需求，会直接丢弃SYN，此时服务器会一直等待客户端发送数据，而造成资源浪费。 四次挥手： 过程：C–&gt;FIN–&gt;S；S–&gt;ACK–&gt;C；S–&gt;FIN–&gt;C；C–&gt;ACK–&gt;S。 原因：关闭连接时，仅代表关闭方没有数据要发送给另一方了，并不代表另一方没有数据要发送给关闭方，所以此时不能关闭socket套接字，需要等所有数据发送完之后才能发送FIN给关闭方。返回原题 将URL解析为IP地址，解析域名需要用到DNS协议； 主机依次通过查询本地hosts文件、DNS解析器缓存、本地的DNS服务器、根域名服务器。 根域名服务器查询分为两种，一种是递归查询，一种是迭代查询。 如果是递归查询，此根域名服务器不断向上转发请求，直至得到最终结果，并将解析结果返回给本地DNS服务器，本地DNS服务器再将其返回给浏览器，查询完成； 如果是迭代查询，本地服务器向根域名服务器发送查询请求。根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求。然后以此类推，直至查询到该域名的IP地址。 是基于UDP的，因此会用到UDP协议； 得到IP地址后，浏览器打开TCP连接（默认端口为80），并向Web服务器发送http请求，因此要用到HTTP协议； 应用层：浏览器发送HTTP请求报文； 传输层：切分长数据，并确保可靠性； 网络层：进行路由 数据链路层：传输数据 物理层：物理传输比特 若页面发生跳转，服务器以一个重定向响应，然后转到第iv步，否则转到第v步； 浏览器跟随重定向，再次发送HTTP请求； 服务器处理请求，并发回HTML源码； 服务器经过物理层、数据链路层、网络层、传输层、应用层解析请求报文，并返回HTML源码 浏览器接受请求的页面源码，并开始渲染HTML； 浏览器发送嵌入到HTML中的对象请求； 浏览器进一步发送异步（Ajax）请求； 浏览器关闭TCP连接。返回原题 HTTP的状态码由三位数字组成，第一个十进制数定义了状态码的类型： 分类 分类描述 1** 信息，服务器收到请求，需要请求者继续执行操作 2** 成功，操作被成功接收并处理 3** 重定向，需要进一步的操作以完成请求 4** 客户端错误，请求包含语法错误或无法完成请求 5** 服务端错误，服务器在处理请求的过程中发生了错误 常见的HTTP状态码： 200：请求成功 301：资源（网页等）被永久地转移到其它URL 404：请求的资源（网页等）不存在 500：内部服务器错误返回原题 IP地址：IP协议提供的一种统一的地址格式，为互联网的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异； MAC地址：硬件地址，用于定义网络设备的位置，由数据链路层负责。返回原题 OSI七层模型： 物理层：通过媒介传输比特，确定机械和电气规范。主要设备有网卡、中继器等；主要协议有IEE802.3、CLOCK、RJ45等。 数据链路层：将比特组装成帧和点到点的传输。主要设备有网桥、交换机等；主要协议有MAC、VLAN、PPP协议等。 网络层：负责数据包从源到宿的传递以及网际互联。主要设备有路由器等；主要协议有IP、ARP、TCMP。 传输层：提供端到端的可靠报文传递和错误恢复。主要协议有TCP、UDP等。 会话层：建立、管理和终止会话，传输单位是SPDU(Session Protocol Data Unit)。主要协议有RPC、NFS等。 表示层：对数据进行翻译、加密和压缩，传输单位是PPDU(Presentation ~)。主要协议有JPEG、ASCII等。 应用层：允许访问OSI环境的手段，传输单位为APDU(Application ~)。主要协议有HTTP、FTP、DNS等。 TCP/IP四层模型： 网络接口层：MAC、VLAN 网络层：IP、ICMP 传输层：TCP、IP 应用层：HTTP、DNS、FTP返回原题 拥塞控制是为了防止过多的数据注入网络，使得网络中的路由器或链路过载。流量控制是点对点的通信量控制，而拥塞控制是全局的网络流量整体性的控制。发送双方都有一个拥塞窗口——cwnd（Congestion Window）； cwnd的大小取决于网络的拥塞程度，并且动态地在变化。 发送方让自己发送窗口大小等于拥塞窗口，但考虑到接收方的接收能力，一般而言发送窗口小于拥塞窗口； 几种算法： 慢开始：最开始发送方的拥塞窗口为1，逐渐增大拥塞窗口和发送窗口。每经过一个传输轮次，拥塞窗口加倍，如果其超过慢开始的门限，则使用拥塞避免算法，防止拥塞窗口过大； 拥塞避免：每经过一次往返时间RTT，拥塞窗口增长1。在慢开始和拥塞避免中，如果发现网络拥塞，就把慢开始中的门限值减小到之前的一半，并设置cwnd为1，重新慢开始； 快重传：接收方接收到一个失序的报文段后就立即发出重复确认，发送方只要连续收到三个重复确认就立即重传； 快恢复：当发送方连续收到了三个重复确认后（说明当前网络没有拥塞），就将慢开始门限减半，并将当前的cwnd设置为慢开始门限，并且采用拥塞避免算法。 什么时候开始减慢增长速度： 采用慢开始和拥塞避免算法的时候： 一旦cwnd超过慢开始门限，就采用拥塞避免算法，减慢增长速度； 一旦发生丢包，就重新进行慢开始，减慢增长速度。 采用快恢复和快重传的时候： 一旦cwnd超过慢开始门限，就采用拥塞避免算法，减慢增长速度； 一旦发送方连续收到了三个重复确认，就采用拥塞避免算法，减慢增长速度。返回原题 TCP/IP数据链路层的交互过程： 网络层等到数据链路层用MAC地址作为通信目标，数据包到达网络等准备往数据链路层发的时候，首先会去自己的ARP缓存表（存储着IP-MAC关系）中查找目标IP的MAC地址，如果查到了，就将该MAC地址组装到链路层数据包的包头；如果没找到，会发起一个广播：who is IP XXX tell IP XXX，所有收到的广播的机器看看这个IP是否是自己的，如果是自己的，则以单拨的形式将自己的MAC地址回复给请求的机器。 传递到IP层如何知道该给哪个应用程序： 根据端口号区分。 如何区分是UDP报文还是TCP报文： 看IP数据段的协议标识字段，6是TCP，17是UDP。返回原题 二者区别： 连接：TCP是面向连接的传输层协议，而UDP无连接； 服务对象：TCP是端到端的两端间服务，即一条TCP连接只能有两个端点；而UDP支持一对一、一对多、多对一、多对多的通信； 可靠性：TCP是可靠交付，无差错、不丢失、不重复、按序到达；而UDP尽最大努力交付，不保证可靠交付； 拥塞控制、流量控制：TCP有拥塞控制和流量控制，保证传输数据的安全性；而UDP没有这些，网络拥塞不会影响源主机的发送效率； 报文长度：TCP是动态报文长度，即根据接收方的窗口大小以及网络拥塞状态来决定的；而EDP面向报文，不合并、不拆分，保留上面传下来报文的边界； 首部开销：TCP首部开销大，占20个字节；而UDP首部开销小，只有8个字节（源端口、目的端口、数据长度、检验和） 各自适用场景： UDP：视频传输、实时通信等； TCP：文件传输、发送邮件、重要状态的更新等。返回原题 基于TCP的socket： 服务器端程序： 创建一个套接字，用函数socket(); 绑定IP地址、端口号到套接字，用函数bind(); 设置允许最大的连接数，用函数listen(); 接收客户端的连接，用函数accept(); 收发数据，用函数send()和recv()，或read()或write(); 关闭网络连接，用close()。 客户端程序： 创建一个套接字，用函数socket(); 设置要连接的对方的IP和端口属性； 连接服务器，用函数connect(); 收发数据，用函数send()和recv()，或read()和write(); 关闭网络连接，用close()。 基于UDP的socket： 服务器端程序： 建立套接字文件描述符，使用函数socket()，创建一个套接字文件描述符； 设置服务器地址和监听端口，初始化要绑定的网络地址结构； 绑定监听端口，使用bind()函数，将套接字文件描述符和一个地址类型变量进行绑定； 接收客户端的数据，使用recvfrom(); 向客户端发送数据，使用sendto(); 关闭套接字，使用close释放资源； 客户端程序： 建立套接字文件描述符，socket(); 设置服务器端口和地址，struct sockaddr; 向服务器发送数据，sendto(); 接收服务器的数据，recvfrom(); 关闭套接字，close()。返回原题]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：数据结构]]></title>
    <url>%2F2019%2F08%2F15%2FdataStructure%2F</url>
    <content type="text"><![CDATA[题目 hash表的实现，包括STL中的哈希桶长度常数。答案 hash表如何rehash，怎么处理其中保存的资源。答案 哈希表的桶个数为什么是质数，合数有何不妥？答案 map和set有什么区别，怎么实现的。答案 如何判断一个图是否连通。答案 如何用一个1立方米的方块占满这个小教室。 大区间求和。答案 大文本如何排序 最优二叉树、排序二叉树、哈夫曼树。答案 map用的是红黑树，和AVL树的区别？答案 map插入和删除需要注意什么？答案 B+树，存储方式。答案 set底层为什么用红黑树实现？答案 map底层为什么用红黑树实现？ 各种排序空间复杂度和时间复杂度，稳定程度。答案 hashtable是什么，重复元素怎么办，字符串当作hash值如何处理 hash用在什么地方？ vector，手写扩容代码。答案 map和unordered_map怎么实现的以及优缺点。答案 vector和deque的底层实现有什么区别。答案 emplace_back的实现。答案 迭代器什么时候会失效。答案 介绍迭代器失效。push_back会导致迭代器失效吗。答案 快排算法最差情况推导公式。答案 小根堆特点。答案 增量为5的希尔排序 一致性哈希是如何实现的（单调性、平衡性）。答案 单链表和双向链表了解吗，说一下性能的比较？答案 描述怎么初始化堆。答案 描述怎么合并两个堆。答案 map和hashmap的区别，查找的时间复杂度分别是多少？答案 参考答案 哈希表又称散列表，是根据关键码值直接访问的数据结构。即通过把关键码值映射表中一个位置来访问记录，以加快查找的速度。哈希表的实现主要解决两个问题，构造哈希函数和处理哈希冲突。 构造哈希函数： 哈希函数对不同的输出值得到一个固定长度的消息摘要。理想的哈希函数对于不同的输入应该产生不同的结构，同时散列结果应当具有同一性（输出值尽量均匀）和雪崩效应（微小的输入值变化使得输出值发生巨大的变化）； 构造哈希函数主要包括直接地址法、平方取中法、除留余数法等。 冲突解决： 现实中的哈希函数不是完美的，当两个不同的输入值对应一个输出值时，就会产生碰撞，这个时候需要解决冲突。 常见解决冲突的办法有：开放定址法、链地址法、建立公共溢出区等。 STL中使用的链地址法：为每个Hash值建立一个单链表，当发生冲突时，将记录插入到链表中。 虽然链地址法并不要求哈希桶长度必须为质数，但STL仍然以质数来设计哈希桶长度，并且将28个质数（逐渐呈现大约两倍的关系）计算好，以备随时访问，同时提供一个函数，用于查询在这28个质数中，“最接近某数并大于某数”的质数。返回原题 负载因子：哈希表的size/初始化时桶的数量； rehash：当hash表中的负载因子达到负载极限的时候，hash表会自动成倍的增加容量（桶的数量），并将原有的对象重新分配并加入新的桶内。返回原题 可以最大程度地减少冲突概率，使得哈希后的分布更加均匀。如果使用合数，可能会造成很多数据分布集中在某些点上，从而影响哈希表效率。 质数在一般情况下可以抵抗比较差的hash函数，但对于较好的hash函数，不必苛求桶的个数一定是质数。返回原题 共同点： map和set的数据结构相同，底层都是使用红黑树实现的； 内部的元素都不可以重复； 都会对其中的键值进行排序； 不能通过迭代器来改变其键值，因为要保证键值的唯一性和元素的顺序。 不同点： 二者其中的iterator格式不一样，map使用的是pair这种键值/实值配对的数据，使用第一个元素来排序，而set直接使用键值作为元素，以键值来排序；返回原题 使用Warshall算法，时间复杂度为O(v^3)； 拓扑排序 使用DFS（Deep First Search），用visit[]来标志数组，观察从一个点出发能否遍历图中所有的点。返回原题 使用线段树：叶子节点存储输入的数组元素，每一个内部节点表示两个叶子节点的合并（即两个子节点的和） 时间复杂度：构建O(n)，查询O(n)，更新O(log n)。返回原题 最优二叉树（哈夫曼树）：带权路径长度最小的树。 结点的带权路径长度：结点到树根之间的路径长度与该结点上权的乘积； 树的带权路径长度（WPL）：树中所有叶结点的带权路径长度之和。 特点：叶子上的权值均相同时，完全二叉树一定是最优二叉树；最优二叉树中，权越大的叶子结点离根越近；最优二叉树的形态不唯一，WPL最小；是严格的二叉树，没有度数为1的分支结点。 哈夫曼算法基本思想： 根据给定的n个权值w1，w2…wn构成n棵二叉树的森林F={T1, T2,…,Tn}，其中每棵二叉树Ti中都只有一个权值为wi的根结点，其左右子树均空； 在森林F中选出两棵根结点权值最小的树，将这两棵树合并成一棵新树（增加一个新结点作为新树的根，并将所选的两棵树的根分别作为新根的左右孩子），将这两个孩子的权值之和作为新树根的权值； 对新的森林F重复(2)，直到森林F中只剩下一棵树为止。 排序二叉树：又称二叉搜索树，性质如下： 若它的左子树不为空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不为空，则右子树上所有结点的值均大于它的根结点的值； 它的左右子树也分别为二叉排序树。返回原题 红黑树：红黑树是一种二叉查找树，每个节点增加一个存储位表示节点的颜色，非红即黑。通过对任何一条从根节点到叶子节点着色的方式的限制，红黑树确保没有一条路径的长度会大于其它任一路径长度的两倍。因此，红黑树是一种弱平衡二叉树，相对于AVL树来说，它的旋转次数少，所以对于查找、插入、删除操作较多的情况下，通常使用红黑树。 性质： 每个节点非黑即红； 根节点是黑色的； 每个叶子节点（NIL节点）都是黑色的； 每个红节点的两个子节点都是黑色的； 任一节点到所有叶子节点的路径上的黑色节点数目都相同。 AVL树：红黑树是在AVL树的基础上提出来的。平衡二叉树又称为AVL树，是一种特殊的二叉排序树。其左右子树都是二叉平衡树，左右子树的高度差绝对值不超过1。 红黑树相对AVL树的优点： AVL树是高度平衡的，其频繁的插入、删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多二次旋转，删除最多三次旋转； 红黑树的查找、删除、插入操作都是O(logn)，且性能稳定，所以STL中很多结构包括map、set的底层实现都是红黑树。返回原题 map的插入： insert方法不能覆盖，如果键已经存在，则插入失败。数组方法插入不存在也会直接更新键对应的值； map的删除： map中删除元素时，只是当前迭代器失效。返回原题 参考：平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了 B树：B树属于多叉树，又名平衡多路查找树，常用于数据库索引技术中。 排序方式：所有节点的关键字是按递增次序排列，并遵循左小右大原则； 子节点数：非叶子节点的子节点数&gt;1，且&lt;=M，且M&gt;=3，空树除外。（M阶代表一个节点最多有多少个查找路径） 关键字数：枝节点的关键字数量大于等于ceil(M/2)-1个且小于等于M-1个； 所有叶子节点均在同一层，叶子结点除了包含关键字和关键字记录的指针外也有指向其子节点的指针，只不过其指针地址都为null。 B+树：是B树的一个升级版，更充分地利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分查找法。看图轻松理解数据结构与算法系列(B+树) B+树非叶子结点不保存关键字记录的指针，只进行数据索引，这样使得B+树每个非叶子结点所能保存的关键字大大增加； B+树叶子结点保存了父结点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样； B+树叶子结点的关键字从小到大排列，左边结尾数据都会保存右边结点开始数据的指针； 非叶子结点的子结点数=关键字数，也有非叶子结点的关键字数=子节点数-1。返回原题 红黑树能以O(log n)的时间复杂度进行搜索、插入、删除捉住，旋转复杂度仅为O(1)，时间复杂度和AVL一样，但统计性能比AVL树更高；返回原题 各种排序算法的时间、空间复杂度以及稳定性。 排序算法 最差时间复杂度 平均时间复杂度 空间复杂度 稳定性 冒泡法 O(n^2) O(n^2) O(1) 稳定 选择排序法 O(n^2) O(n^2) O(1) 不稳定 插入排序法 O(n^2) O(n^2) O(1) 稳定 归并排序法 O(nlog n) O(nlog n) O(n) 稳定 希尔排序法 O(n^2) O(n^1.3) O(1) 不稳定 快速排序法 O(n^2) O(nlog n) O(nlog n) 不稳定 堆排序法 O(nlog n) O(nlog n) O(1) 不稳定 计数排序法 O(n+k) O(n+k) O(n+k) 稳定 桶排序法 O(n^2) O(n+k) O(n+k) 稳定 基数排序法 O(n*k) O(n*k) O(n+k) 稳定 返回原题 123456789101112131415161718192021else if (max_size() - size() &lt; _Count) //可以申请的最大容量也不够用，抛出异常_THROW(length_error, "vector&lt;T&gt; too long"); _Xlen();else if (_Capacity &lt; size() + _Count)&#123;//空间不足，需要扩容 _Capacity = max_size() - _Capacity / 2 &lt; _Capacity ? 0 : _Capacity + _Capacity / 2; // 尝试扩容1.5倍 if (_Capacity &lt; size() + _Count)//扩容1.5倍后依然不够用，则容量等于当前数据个数加上新增数据个数 _Capacity = size() + _Count; pointer _Newvec = this-&gt;_Alval.allocate(_Capacity);//申请新空间 pointer _Ptr = _Newvec; _TRY_BEGIN _Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where), _Newvec); //move原先的数据 _Ptr = _Ucopy(_First, _Last, _Ptr); //copy新增的数据到新内存之后 _Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr); _CATCH_ALL _Destroy(_Newvec, _Ptr); this-&gt;_Alval.deallocate(_Newvec, _Capacity);//释放原来申请的内存 _RERAISE; _CATCH_END... 返回原题 map：底层是用红黑树实现的，对map的查找、插入、删除等操作都是相当于对红黑树进行的操作。 优点：有序性；红黑树的数据结构使得很多操作在O(log n)时间复杂度就能实现，效率很高； 缺点：空间占用率很高。红黑树的每个节点都需要保存父结点、左右子结点以及红黑性质，使得每个节点都占用大量内存。 unordered_map：的底层是哈希表，其元素的排列顺序是无序的。 优点：由于底层是哈希表，因此查找速度非常快； 缺点：哈希表的建立比较耗费时间。返回原题 vector的底层实现是数组，是单向开口的连续空间，支持随机访问和尾部快速增删； deque的底层实现是一个中央控制器和多个缓冲区，是双向开口的连续空间。支持随机访问和首尾快速增删。返回原题 emplace_back：采用就地构造策略，直接将参数传给对象的构造函数，在容器中构造一个对象，从而实现0拷贝。与push_back相比，当传入左值时，省去了复制操作；当传入右值时，省去了移动操作。返回原题 vector： push_back：一定会使end返回迭代器失效；当capacity前后有变化时，first返回的迭代器也会失效； erase/pop_back：会使删除元素及之后的所有迭代器均失效；erase会返回一个新的有效的迭代器。 deque： 首尾插入元素不会使任何迭代器失效； 在首尾删除元素只会使指向被删除元素的迭代器失效； 在其他任何位置进行插入和删除将会使该容器元素的所有迭代器失效。 list/set/map： 删除元素时，指向该删除节点的迭代器失效；返回原题 迭代器失效：向容器内添加或删除元素的操作可能会使指向容器元素的迭代器失效，失效的迭代器将不指向任何元素。 push_back：对于vector的push_back操作，end返回的迭代器会失效，first返回的迭代器只有当当前容器size小于容器的capacity时才不会失效，否则会失效。返回原题 快排最差情况：已排好序；所有值相等（排好序的特殊情况）。 在最差情况下，需要执行n-1次递归调用，且第i次划分需要经过n-i次比较才能找到第i个记录。所以比较次数为(n-1) + (n-2) + ... + 1 = n(n-1)/2，即最终时间复杂度为O(n^2)。返回原题 小根堆特点：所有父结点的值比其左右子结点的值都要小；根结点的值最小；返回原题 参考：理解 Consistent Hashing 一致性哈希是一种特殊的哈希算法，哈希表槽位数（大小）的改变平均只需要对K/n个关键字重新映射，其中K是关键字的数量，n是槽位数量。而在传统哈希表中，删除或添加一个槽位几乎要对所有关键字进行重新映射； 原理： 将每个节点映射到数值空间[0, (2^32)-1]，映射的规则可为IP、hostname； 将每个object映射到数值空间[0, (2^32)-1]； 对于某个object，对于所有满足hash(node)&lt;=hash(object)的节点，选择hash(node)最大的节点存放object；如果没有满足上述条件的节点，选择hash(node)最小的节点存放该object。 特点：当插入或删除时，仅有一个节点的部分object需要重哈希。 平衡性：引入虚节点，虚节点实际上是物理节点的复制品，一个物理节点包含多个虚拟节点，我们将这些虚拟节点映射到数值空间[0, (2^32)-1]，对于某个object，计算出存放的虚拟节点，进而得出物理节点。虚节点越多及其位置分布越均匀，相应地，映射到物理节点的object数目也越均匀，从而提高了平衡性。返回原题 与单链表相比，双向链表有如下特点： 从任一节点出发，可以查找链表中的其他任意节点； 既可以前向遍历，也可以后向遍历； 每个指针域中都增加了一个存储指针的空间，降低了存储密度； 可以在当前结点前或后插入、删除；返回原题 参考：堆排序算法之初始堆建立总结 首先根据序列构建一个完全二叉树； 在完全二叉树的基础上，从最后一个非叶子结点开始调整：比较三个元素的大小（自己、左孩子、右孩子），分为三种情况： 自己最大，不用调整； 左孩子最大，交换该非叶子结点与其左孩子的值，并考察以左孩子为根的子树是否满足大顶堆的要求，不满足递归向下处理； 右孩子最大，交换该非叶子结点与其右孩子的值，并考察以右孩子为根的子树是否满足大顶堆的要求，不满足递归向下处理；返回原题 当两个堆元素数量相差较大时，选用启发时合并，即将较小的堆一个个插入较大的堆中，时间复杂度为O(nlog n)； 当两个堆元素数量相关较小时，选用重新建堆法，全部拆散重排，时间复杂度为O(n1+n2)。返回原题 区别： 构造函数：hashmap需要hash函数，而map只需比较函数； 存储结构：hashmap采用hash表存储，map一般采用红黑树实现。 查找时间复杂度： hashmap：常数级别，为O(1)； map：log(n)。返回原题]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：设计模式]]></title>
    <url>%2F2019%2F08%2F15%2FDesignPatterns%2F</url>
    <content type="text"><![CDATA[题目 单例模式。答案 装饰器模式。答案 观察者模式的多线程安全问题，写个医生，病人的观察者模式啊。答案 说一下OOP的设计模式五项原则。答案 生产者消费者的同步操作。 工厂模式？优点？答案 参考答案 单例模式：一个类只能有一个对象被创建，如果有多个对象的话，可能会导致状态的混乱和不一致。通过单例模式，可以做到： 确保一个类只有一个实例被建立； 提供了一个对对象的全局访问指针； 在不影响单例类的客户端的情况下允许将来有多个实例。 三种单例模式的实现：懒汉式、饿汉式和多线程式； 懒汉式：特点是延迟加载，比如配置文件的实例直到用到的时候才会被加载； 饿汉式：特点是一开始就加载了，用“空间换时间”； 多线程式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/********* 第一种：懒汉式 **********/// GetInstance使用懒惰初始化，即它的返回值是当这个函数首次被访问时才创建的。// 这是一种防弹设计，所有GetInstance()之后的调用都返回相同实例的指针。// 缺陷：假设单例还未初始化，若有两个线程同时调用GetInstance方法，然后两个线程都初始化一个单例，最后得到的指针并不是指向同一个地方，不满足单例类的定义了。class Singleton &#123;private: Singleton() &#123;&#125;; static Singleton* m_pInstance; // 静态成员对象指针变量只会分配指针空间，而不是对象空间，所以不会调用构造函数public: static Singleton* GetInstance() &#123; if (m_pInstance == NULL) m_pInstance = new Singleton(); return m_pInstance; &#125;&#125;;/********* 第二种：饿汉式 **********/// 有两个状态：单例未初始化和单例已经初始化class Singleton &#123;private: Singleton() &#123;&#125;; public: static Singleton* GetInstance() &#123; static Singleton instance; // 静态成员对象在运行之初就已经分配了空间，调用构造函数了 return &amp;instance; &#125;&#125;;/********* 第三种：多线程式 **********/class Singleton &#123;private: static Singleton* m_instance; Singleton() &#123;&#125;;public: static Singleton* GetInstance() &#123; if (NULL == m_instance) &#123; Lock(); // 借助其他类来实现，如boost if (NULL == m_instance) &#123; m_instance = new Singleton; &#125; UnLock(); &#125; return m_instance; &#125;&#125; 返回原题 装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构。属于结构型模式，是作为现有的类的一个包装。比生成子类更加灵活 优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，可以动态扩展一个实现类的功能。 缺点：多层装饰比较复杂。返回原题 观察者模式：当对象间存在一对多关系时，则使用观察者模式。当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。观察者模式属于行为型模式。 优点： 观察者和被观察者是抽象耦合的； 建立一套触发机制。 缺点： 如果一个被观察者有很多直接或间接的观察者，将所有的观察者都通知到位会花费很多时间； 如果观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃； 没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅是知道观察目标发生了变化。 Observer.hcpp1234567class Observer {public: Observer() {}; virtual ~Observer() {}; // 定义纯虚函数，规范接口 virtual void update() = 0;}; Subject.hcpp1234567891011121314151617#include &lt;vector&gt;#include "Observer.h"using namespace std;class Subject {public: Subject() {}; virtual ~Subject() {}; void addObserver(Observer *observer); void delObserver(Observer *observer); void notifyObservers(); virtual int getStatus() = 0; virtual void setStatus(int status) = 0;private: vector&lt;Observer*&gt; m_observers;}; Subject.cppcpp123456789101112131415161718#inlcude Subject.hvoid Subject::addObserver(Observer *observer) { m_observers.push_back(observer);}void Subject::delObserver(Observer *observer) { for (auto iter = m_observers.begin(); iter != m_observers.end(); ++iter) { if (*iter == observer) { m_observer.erase(iter); return; } }}void Subject::notifyObservers() { for (auto iter = m_observers.begin(); iter != m_observers.end(); ++iter) { (*iter)-&gt;update(); }} ConcreteObserver.hcpp12345678910111213141516#include &lt;string&gt;#include "Observer.h"#include "Subject.h"using namespace std;class ConcreteObserver: public Observer {private: string m_observerName; Subject *m_subject;public: ConcreteObserver(string name, Subject* subject): m_observerName(name), m_subject(subject) {}; ~ConcreteObserver() {}; void update();}; ConcreteObserver.cppcpp12345678#include &lt;iostream&gt;#include "ConcreteObserver.h"using namespace std;void ConcreteObserver::update() { cout &lt;&lt; "update observer[" &lt;&lt; m_observerName &lt;&lt; "] status: " &lt;&lt; m_subject-&gt;getStatus() &lt;&lt; endl;} ConcreteSubject.hcpp123456789101112131415161718#include &lt;string&gt;#include "Observer.h"#include "Subject.h"using namespace std;class ConcreteSubject: public Subject {private: string m_subjectName; int m_status;public: ConcreteSubject(string name): m_subjectName(name), m_status(0) {}; ~ConcreteSubjec() {}; void setStatus(int status); int getStatus();}; ConcreteSubject.cppcpp123456789101112#include &lt;iostream&gt;#include "ConcreteSubject.h"using namespace std;void ConcreteSubject::setStatus(int status) { m_status = status; cout &lt;&lt; "setStatus subject[" &lt;&lt; m_subjectName &lt;&lt; "] status: " &lt;&lt; status &lt;&lt; endl;}int ConcreteSubject::getStatus() { return m_status;} main.cppcpp123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include "Subject.h"#include "Observer.h"#include "ConcreteObserver.h"#include "ConcreteSubject.h"int main(int argc, char *argv[]) { Subject* subjectA = new ConcreteSubject("subjectA"); Subject* subjectB = new ConcreteSubject("subjectB"); Observer* observerA = new ConcreteObserver("observerA", subjectA); Observer* observerB = new ConcreteObserver("observerB", subjectB); subjectA-&gt;addObserver(observerA); subjectB-&gt;addObserver(observerB); subjectA-&gt;setStatus(1); subjectA-&gt;notifyObservers(); subjectB-&gt;setStatus(2); subjectB-&gt;notifyObservers(); subjectA-&gt;addObserver(observerB); subjectA-&gt;setStatus(2); subjectA-&gt;notifyObservers(); delete subjectA; delete subjectB; delete observerA; delete observerB; return 0;} 返回原题 单一职责原则：类的职责单一，对外只提供一种功能，而引起类变化的原因都应该只有一个； 开闭原则：类的改动是通过增加代码进行的，而不是修改源代码； 里氏替换原则：任何抽象类出现的地方都可以用它的实现类进行替换，实际就是虚拟机制，语言级别实现面向对象功能； 依赖倒转原则：依赖于抽象（接口），不要依赖具体实现（类），也就是针对接口编程； 接口隔离原则：不应该强迫用户的程序依赖他们不需要的接口方法，一个接口应该只提供一种对外功能，不应该把所有操作都封装到一个接口中去； 合成复用原则：如果使用继承，会导致父类的任何变换都可能影响到子类的行为。如果使用对象组合，就降低了这种依赖关系。对于继承和组合，优先使用组合； 迪米特原则：一个对象应当对其他对象尽可能少的了解，从而降低各个对象之间的耦合，提高系统的可维护性。返回原题 工厂模式：属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 优点： 一个调用者想创建一个对象，只需知道其名称就可以了； 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以； 屏蔽产品的具体实现，调用者只关心产品的接口。 缺点： 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使用系统中类的个数成倍增加，在一定程序上增加了系统的复杂度，同时也增加了系统具体类的依赖。返回原题]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发岗面试问题总结：C/C++语言]]></title>
    <url>%2F2019%2F08%2F15%2FDevelopingInterview%2F</url>
    <content type="text"><![CDATA[题目 一个C++源文件从文本到可执行文件经历的过程。答案 #include 的顺序以及尖叫括号和双引号的区别。答案 进程和线程的区别，为什么要有线程？答案 C++11有哪些新特性？答案 为什么可变参数模板至关重要以及右值引用，完美转发，lambda答案 malloc的原理，brk系统调用干什么的，mmap呢？答案 C++的内存管理方式，STL的allocaotr，最新版本默认使用的分配器。答案 C++/C的内存分配，栈和堆的区别，为什么栈要快？答案 C++和C的区别。答案 如何判断内存泄露，野指针是什么，内存泄漏怎么办？答案 内存分布答案 讲讲虚函数（内存布局，虚函数的局限，C++11提供的类似虚函数的新函数，两种动态多态的实现及优缺点）答案 类什么时候会析构？答案 虚函数底层机制。答案 C++解决内存泄漏方法。答案 查内存泄露 （valgrind）答案 C++处理异常可以有两种方式，一种是throw异常，一种是在函数中return错误码。你怎么理解这两个方法的优劣.答案 C++11 future和promise，poll，libev优点。答案 如何查看函数所占用的内存。答案 C++多态是怎么实现的，哪些函数不能是虚函数？答案 malloc(0)返回什么？答案 静态变量什么时候初始化？答案 为什么析构函数要是虚函数，为什么C++没有默认析构函数为虚函数。答案 模板成员函数不可以是虚函数。答案 auto，shared_ptr, weak_ptr, unique_ptr，forward, move完美转发，RAII机制，lock_guard。答案 修改指向const对象的指针。答案 C++中类成员的访问权限和继承权限问题。答案 C++中static关键字的作用。答案 vector 跟 list 的iterator有什么区别？答案 cout和printf有什么区别？答案 为什么模板类一般都是放在一个h文件中？答案 STL的基本组成。答案 必须使用初始化列表初始化的成员变量。答案 struct和class的区别 、 union和struct的区别。答案 c++获得内存的各种方式 malloc和new的区别。答案 delete加[]与不加[]有什么区别？数组对象的时候怎么析构函数怎么释放？答案 智能指针有没有内存泄露的情况？答案 struct中为什么要字节对齐，怎么修改默认对齐方式。答案 java中有没有指针，所有的都是智能指针 memcpy和memmove的区别，剖析性能差异。答案 volatile的作用。答案 画一下类的对象的内存布局。答案 函数重载是怎么实现的（编译器在汇编层结合函数名和参数类型给重载等函数不同的汇编实现、C/C++ 时混编要使用extern告诉编译器这是不支持重载的C的代码）。答案 printf可变参数怎么实现的？答案 解释一下函数调用是怎么样的过程（怎么传参）。答案 C++引用和指针的区别。答案 内联函数与宏函数的区别以及各自优缺点。答案 代码可扩展性 函数栈帧。答案 面向对象特性。答案 C实现C++特性。答案 泛型编程。答案 模板底层实现原理，如何把int和T绑定？答案 STL库常用的接口 C语言怎么生成随机数； A* a = new A; a-&gt;i = 10;在内核中的内存分配上发生了什么？ 给你一个类，里面有static，virtual，之类的，问你这个类的内存分布。 如何给指定物理地址赋值，如何跳转到制定物理地址执行。 析构函数的作用 lambda的实质（编译器层面） 以下代码中这两个指针的区别，以及第一个指针离开作用域要delete，那第二个指针是否必须要delete？答案 123456class A;void func() &#123; char buff[1024]; A* ptr1 = new ptr(); A* ptr2 = new (buff) A;&#125; 什么时候需要重载，重载有什么坏处 怎么实现类A可以支持以下工作？重载运算符应该是全局的还是类内成员函数，两者有什么区别？ 123class A;A a;a= a + 1; 如果不想一个类被继承应该怎么办？答案 宏定义和枚举的区别。 答案 函数指针和指针函数的区别。写个例子出来。答案 系统调用是什么。你用过哪些系统调用。什么系统调用会耗时长。 STL中迭代器的作用，有指针为何还要迭代器。答案 C++ STL 内存优化 vector和list的区别的，应用，越详细越好。 给你1MB的内存，你们怎么设计， 才能使其利用率最高，产生的碎片最少 C++ 类成员初始化，为什么按顺序顺序， 构造函数的调用和 代码扩展，还有初始化列表？ 类成员初始化的方式。 const成员函数的理解和应用。 这四者的区别： const char* arr = “123”; char* brr = “123”; const char crr[] = “123”; char drr[] = “123”; i++和++i的区别以及实现； 能写个函数在main函数执行前先运行的吗？ 手写 share_ptr C++运行池 当多个文件包含头文件时，会不会存在多份vector的实现 STL里resize和reserve的区别 撸一个std::lower_bound，不断优化，直到最坏复杂度也为O(logN) Q：C++里是怎么定义常量的？常量存放在内存的哪个位置？ C++ 类内可以定义引用数据成员吗？ 隐式类型转换，如何避免 explicit关键字 C++类型转换有四种 说说你了解的RTTI.答案 C++函数栈空间的最大值 extern “C” ？ 那么C++的锁你知道几种。 C语言如何处理返回值？ STL中vector的实现机制 STL标准库中的数据结构占用的哪一部分的内存 C++ 的类中那些成员会被算入sizeof中 为什么要内存对齐 为什么会有大端小端，htol这一类函数的作用 手写一个智能指针类，怎么处理并发的情况，加锁的话怎么提高效率 说说右值引用。说说右值移动构造。一定会有控制权移交吗？为什么会有性能提升？你觉得这个新特性用的多吗？ 那如果析构抛出异常怎么办？ inline和virtual能够同时修饰吗？答案 一个32位的机子，最多有多少的内存，实际内存有这么多吗 模板的作用，给定一个数组和两个指针，手写一个队列模板 全局变量和static变量的区别.如果在两个.h文件中声明两个同名变量会怎么样？ 如果使用extern 如果没有使用· 浅拷贝和深拷贝的区别？ 如果一个函数传入一个对象，那么这是浅拷贝还是深拷贝？ 形参实参的区别 c++各种new的原理和应用——operator new,placement new，new operator string的length和size一样吗 string是怎么增长的 虚函数，虚函数表，虚函数表是公用的吗 从汇编层去解释一下引用 STL allocator iterator 与 container 之间的耦合关系 Type traits的作用 传入一个char *变量,怎样求这个字符数组的长度 用strlen还是sizeof啊? 识别手机号的正则表达式 C++中，::有什么意义 能否显示的调用构造函数和析构函数，举例说明 知道前向声明吗，有什么作用，什么情况下可以使用，举例 内联函数与宏函数的区别以及各自优缺点 C++隐式函数举例 静态链接 动态链接 Vector内存泄漏怎么办 父类指针查找虚表的过程。 函数只声明不定义会在什么时候报错？（如果不调用的话没问题，调用的话会在链接时出错）。 模板底层实现原理，如何把int和T绑定？ 那vs出现链接错误，符号未定义什么情况？ 手动实现STL的equal_range() 参考答案 包括四个步骤： 预处理（生成.ii文件）： 对#define进行宏展开 处理所有条件编译指令，如#if、#ifdef、#elif、#ifndef、#endif等 处理#include语句，此过程是递归的 删除所有的注释 添加行号和文件标识 保留所有的#pragma编译器指令 编译（生成.s汇编文件）： 进行一系列词法、语法、语义分析，以及优化后生成相应的汇编代码文件。 汇编（生成.o或.obj目标文件）： 将汇编代码转化为机器可以执行的代码，每一个汇编语句几乎都对应一个机器指令。 链接（生成.out或.exe可执行文件）： 主要包括地址和空间分配、符号决议和重定位。返回原题 尖括号：包含系统标准库头文件时使用，从系统文件目录下查找； 双引号：包含自定义头文件时使用，从当前源文件目录下查找。返回原题 区别： 进程和线程是操作系统不同的资源管理方式。 进程拥有独立的地址空间，在保护模式下，进程崩溃不会影响其它进程，而线程之间共享内存，线程崩溃，会导致同一进程下的其它线程崩溃。 一个程序至少有一个进程，一个进程至少有一个线程。 进程是资源分配的最小单位，线程是CPU调度的最小单位。 不同进程间资源很难共享，但同一进程下的线程间则很容易。 为什么要有线程？ 线程相比进程而言，更加轻量、更易创建和销毁。 同一进程中的线程之间共享内存，使得它们之间互相通信非常容易，互相切换也更加容易，极大地提高了运行效率； 线程的划分尺度小于进程，使得多线程的程序并发性高；返回原题 对象结构改进： 继承基类的构造函数（using 基类名：基类名）； 默认成员值，在声明数据的时候赋一个默认值； 委托构造函数，用其它构造函数来做它的一部分或全部工作； override关键字，防止因拼写错误而没有正确重载成员函数； 可以使用花括号初始化一个类的实例； final关键字，防止成员函数被派生类重载 ； 其他核心语言新增功能： 新增基于范围的for循环（for (auto i: array)）； 自动类型推断auto； 匿名函数lambda：[捕获列表](参数列表)-&gt;返回类型{函数体}； long long int类型，通常是64位； 移动语义：如果两个类对象较大时，交换起来非常耗时，这时便可以只转换所有权。例如： 12345void swap(type&amp; a, type&amp; b) &#123; type t = std::move(a); a = std::move(b); b = std::move(t); &#125; 右值引用：可以绑定即将销毁的右值。 1type&amp;&amp; rr = rvalue; 智能指针：shared_ptr和unique_ptr，取代了auto_ptr，防止内存泄漏； 原始字符串字面量，可以使用R前缀，将不会识别转义序列。如 1string s = R"C:\user\temp" 静态断言：使用static_assert使在编译时如果未满足条件则对错误信息打标记，这在模板中使用非常方便； 可变参数模板：可使用任意数量参数。如 12345template&lt;typename T, typename... TArgs&gt; printv(T v, TArgs... args) &#123; cout &lt;&lt; v &lt;&lt; endl; printv(args...);&#125; 后置返回类型： 1234template auto adding_func(const Lhs &amp;lhs, const Rhs &amp;rhs) -&gt; decltype(lhs+rhs) &#123; return lhs + rhs; &#125; 空指针常量nullptr； static_cast将左值转化为右值引用； constexpr将变量或函数声明为字面值类型； 标准库扩展： 标准库元组模板tuple； 随机数库random： 123uniform_int_distribution&lt;unsigned&gt; u(0,9);default_random_engine e; cout &lt;&lt; u(3) &lt;&lt; endl; 正则表达式库regex返回原题 可变参数模板：当我们既不知道想要处理的实参的数目，也不知道它们的类型时，可变参数模板是很有用的。格式： 1234template&lt;typename T, typename ...Ts&gt; void func(T v, Ts... args) &#123; func(args...); &#125; 完美转发：使用forward转发参数时会保留参数的左右值类型（格式：std::forward&lt;T&gt;(t)） 右值引用：必须绑定到右值的引用（typename&amp;&amp; val） lambda函数：匿名函数，可以使代码变得简洁，不用费力去定义一个小函数。格式：[捕获列表](参数列表)-&gt;返回类型{函数体}，参数列表和返回类型可省略。返回原题 malloc原理：根据用户要求，从堆里分配内存空间。为减少内存碎片和降低内存开销，采用内存池的方式。malloc利用隐式链表，在分配时遍历整个链表，选择合适的内存块分配。 brk和mmap系统：内存分配会调用brk或mmap系统，小于128k时调用brk在堆区分配，大于128k时调用mmap在映射区分配。返回原题 C++内存管理方式：new和delete； STL中的Allocator：负责配置内存，但不负责构造对象（只相当于new的第一步）。为减少内存碎片，STL配置内存时采用两级配置器。当所需空间大于128B时采用第一级空间配置器，即使用malloc()等，小于128B时，采用第二级空间配置器，即内存池技术，通过空闲链表管理内存； 默认分配器：std::alloc。返回原题 栈和堆的区别：。 分配方式：栈有动态分配和静态分配两种方式，而堆只有动态分配； 分配大小：栈是由低地址扩展的数据结构，是一块连续的内存区域；而堆是由高地址扩展的数据结构，是不连续的内存区域； 管理方式：栈由编译器自动分配和释放，而堆一般由程序员主动申请分配和释放，如果未能及时释放，可能会造成内存泄漏。 栈更快的原因： 栈是放在一块连续的内存区域上，所以数据定位的速度更快；而堆放在不连续的内存区域上，通过链表访问，访问效率更低； 栈是CPU提供指令支持的，在指令的处理速度上，对栈数据的处理速度自然比操作系统支持的堆数据要快； 栈放在一级缓存中，而堆放在二级缓存中，二者硬件性能差异巨大。返回原题 C是面向过程的，C++是面向对象的，有封装、继承、多态三大特性； C++是C的超集，有虚函数、内联函数、友元函数、引用、命名空间等； 动态分配内存时，C是malloc/free，而C++是new/delete； 输入和输出，C是scanf/printf，而C++是cin/cout；返回原题 内存泄漏：申请的一块内存没能及时释放，且没有指向它的指针了； 野指针：指向不明区域的指针。原因：没有初始化的指针；指向堆区域的指针在释放内存后，没有置为nullptr； 检查内存泄漏： 使用Linux环境下的内存泄漏检测工具Valgrind进行检测； 写代码时添加内存分配和释放的统计功能，统计当前申请和释放的次数是否一致； 使用BoundsChecker，BoundsChecker是一个运行时错误检测工具，它主要用于定位程序运行时所发生的错误； 调试运行DEBUG版程序，运用以下技术：CRT（C run-time libraries）、运行时函数调用堆栈、内存泄漏时提示的内存分配序号（集成开发环境OUTPUT窗口），综合分析内存泄漏的原因，排除内存泄漏。 如何解决内存泄漏：养成良好的写代码习惯，自己动态分配的内存空间，一定要记得及时释放；使用智能指针。返回原题 栈区：由编译器自动分配和释放，存放局部变量、函数参数值等，类似于数据结构中的堆； 堆区：由程序员主动申请分配和释放； 代码区：存放函数体的二进制代码； 全局（静态）区：用于存放全局变量、静态全局变量、静态局部变量； 文字常量区：用于存放常量字符串。返回原题 虚函数内存布局：如果一个类定义了虚函数，则会生成一个虚函数指针，一般放在对象内存布局的第一个位置上（即对象地址为虚函数地址），虚函数指针指针虚函数表，虚函数表中存放的是一系列虚函数的地址，虚函数地址的顺序与类中虚函数声明的顺序一致。 虚函数的局限：子类虚函数表与父类虚函数表的关系要么是继承、要么是重写、要么是新增，而对于继承的虚方法需要重复存储，浪费空间。 两种多态： 静态多态：泛型编程（模板函数）和函数重载，编译时关联。 优点：类型安全性较高、耦合性低，集合的元素类型不再局限于指针，具体类可以只实现需要的接口，生成代码性能高； 缺点：不能处理异类集合，可执行代码较大，模板库源码需要发布，对模板实参类型有约束。 动态多态：虚函数，运行时关联。 优点：能处理异类集合，可执行代码较小，可以完全编译而无需发布源码； 缺点：耦合性高（继承 的耦合性高于组合），类型安全性差（编译期无类型检查），性能低（层层继承）。返回原题 撤销类对象时； 超出作用域时； 动态分配的对象只有在指向该对象的指针被删除时才调用析构函数。返回原题 对于含有虚函数的类或继承自有虚函数的类，每个类使用一个虚函数表，每个类对象使用一个虚表指针，虚表指针指向虚函数表； 基类对象有一个虚表指针，指向基类的虚函数表，派生类对象也有一个虚表指针，指向派生类的虚函数表； 若派生类重写了基类中的虚函数，则该派生类的虚函数表将保存重写的虚函数地址，而非基类的虚函数地址； 若派生类没有重写基类中的虚函数，则继承下来，派生类的虚函数表将保存基类中未被重写的虚函数地址； 若派生类新定义了新的虚函数，则该派生类的虚函数表将添加保存新虚函数的地址。返回原题 使用智能指针，无需手动释放内存。 养成良好的写代码习惯。返回原题 使用Valgrind软件检测； 写代码时统计内存分配和释放的次数，统计当前二者次数是否一致； 使用BoundsChecker软件检测； 调试运行DEBUG版程序，使用以下技术：CRT（C Run-Time Libraries）、运行时函数调用堆栈、内存泄漏时提示的内存分配序号，综合分析内存泄漏的原因，排除内存泄漏。返回原题 使用throw：代码更加简洁，可以不用通过判断返回值就可以确定是否发生异常。不能被忽略，必须停下来处理。 使用错误码返回值：更加轻量级。但需要通过查找错误码才能知道具体发生的错误。错误信息可以被忽略。返回原题 future（只读）：提供了一种访问异步操作结果的机制。有三种状态：deferred（异步操作还没开始）、ready（异步操作已经完成）、timeout（异步操作完成）。 promise（只写）：每个promise关联一个future，对promise的写入会令future的值可用。 libev：高性能事件循环。 poll：未知。。。返回原题 没搞懂？返回原题 多态分为动态多态和静态多态： 动态多态：通过虚函数实现。运行时通过指针指向的对象进行动态绑定。 静态多态：通过泛型编程（模板函数）和重载函数实现。编译时关联。 以下函数不能为虚函数： 普通函数：只能被重载，不能被覆盖，声明为虚函数没啥意义； 构造函数：虚函数是在不同对象产生不同的操作，构造函数之前对象还没产生，就无法使用虚函数；假设B类继承自A类，且A类的构造函数为虚函数，则构造B类对象时，只会执行B类的构造函数，这样A就不能构造了。 友元函数：C++不支持友元函数的继承； 静态成员函数：静态成员函数对每个类而言，只有一份代码，所有对象共享，而不归某个类共享，所以没有动态绑定的必要性。 以下函数没有声明为虚函数的必要： 内联函数：即使内联函数被声明为虚函数，编译器遇到这种情况不会把函数内联展开，而是当作普通函数处理； 赋值运算符：赋值运算符要求形参和类本身类型相同，帮基类中的赋值操作符形参为基类类型，即使声明为虚函数，也不能作为子类的赋值操作符。返回原题 返回一个nullptr或一个不能用于访问对象的非null的合法指针，可以调用free()函数释放。 malloc(-1)返回一个NULL，因为-1转化为无符号整型后是一个很大的值，无法分配这么大的内存空间，所以只能返回NULL。返回原题 静态变量的初始化是在编译时进行，只初始化一次，赋值则发生在运行时。返回原题 在删除指向派生类的基类类型指针时，如果析构函数不是虚函数，则只会调用基类的析构函数，而不会调用派生类的析构函数，会发生内存泄漏。 为何默认析构函数不是虚函数：如果无需用到继承，虚析构函数便没有任何作用，但虚表指针和虚函数表的存在会导致资源浪费。返回原题 原因：模板成员函数可以实例化出很多类型，不同的参数实例化出不同的类型，因此虚函数表中需要在编译时装入所有实例类型，无法实现，而且内存消耗代价过高，因此不能将模板成员函数定义为虚函数。返回原题 auto：由编译器去分析表达式所属的类型； shared_ptr：智能指针，允许多个shared_ptr指针指向同一个对象，采用引用计数，当计数为0时，自动释放自己所管理的对象； unique_ptr：一个unique_ptr拥有它所指向的对象，某个时刻只能有一个unique_ptr指向一个给定对象，当unique_ptr被销毁时，它所指向的对象也被销毁。不支持普通的拷贝和赋值操作。 weak_ptr：是一个不控制所指向对象生存期的智能指针，它指向一个由shared_ptr管理的对象。将一个weak_ptr绑定到一个shared_ptr不会改变其引用计数。一旦最后一个指向对象的shared_ptr被销毁时，即使有weak_ptr指向对象，对象也会被释放。 move：将一个左值转为对应的右值引用类型。 forward：使用forward转发参数时会保留参数的左右值类型。格式：std::forward&lt;T&gt;(t) 完美转发：使用模板函数转发参数时，会保留参数的左右值类型。 RAII机制（Resourse Acquisition Is Initialization，资源获取即初始化）：用于管理资源、避免泄漏。通过把资源用类封装起来，对资源操作都在类的内部，在析构函数内释放资源，从而当定义的局部变量生命期结束时，它的析构函数就会自动地被调用，便无需程序员显示地去调用释放资源的操作了。 lock_guard：做互斥量mutex的RAII。在构造lock_guard对象时，传入的mutex对象会被当前线程锁住，析构时，它所管理的mutex对象会自动解锁。lock_guard并不负责管理mutex对象的生命周期，只是简化了其上锁和解锁操作，而且不必担心异常安全问题。返回原题 使用const_cast：例如： 123const char c = 'C'; const char* pc = &amp;c; char* p = const_cast&lt;char*&gt;(pc); 返回原题 访问权限：private成员仅供类内部成员和友元函数访问；protected成员在没有继承时和private访问权限相同；public成员可供类内部成员、友元函数、类对象实例访问。 继承时的访问权限： public派生：基类private在派生中不可见，基类protected和private在派生类中保留原有访问权限；派生类实例对象仅可访问基类的public成员； protected派生：基类private在派生类中不可见，基类protected和private在派生类中均变成protected成员；派生类对象不可访问基类的任何成员； private派生：基类private在派生类中不可见，基类protected和private在派生类中均变成private成员；派生类对象不可访问基类中的任何成员；返回原题 改变生命期：将其存储在全局（静态）区，程序运行结束后，才释放内存； 改变作用域：将全局变量和函数声明为static后，会将其对其他源文件隐藏； 默认初始化为0：全局静态区中所有字节默认都是0x00。返回原题 vector的iterator在删除或增加一个元素后，后面的就可能失效了；而list的iterator在删除或添加元素后还可以继续使用。 vector的iterator支持“+”、“+=”、“&gt;”等操作符，而由于list在内存空间上不是连续的，所以list的iterator不支持以上操作，只支持“++”。返回原题 printf需要指定格式，而cout无需指定格式； printf是函数，而cout是ostream对象，和&lt;&lt;搭配使用； printf是实参函数，没有类型检查，不安全；cout是通过运算符重载实现的，安全； printf会将输出立刻显示在屏幕上，而cout会先存入缓冲区，在进行刷新缓冲操作后才会显示在屏幕上（常见缓冲刷新操作：flush，endl，调用cerr、clog、cin，退出程序）； printf遇到不认识的类型的就没办法了，而cout对于不认识的类型可以通过重载来解决。返回原题 当不使用模板类时，编译器不会去实例化它；当使用它时，编译器才会去实例化它。 编译器一次只能处理一个单元，即处理一个cpp文件，所以实例化时需要看到模板的完整定义，因此需要放到.h文件中。 cpp在编译期间不能决定模板参数的类型，所以不能生成模板函数的实例，因此会把模板类型带到链接期间，如果这个期间有函数调用了该实例，而由于没有把模板实例到特定类型，就会导致编译错误。返回原题 容器：可容纳一些数据的模板类。 迭代器：用于遍历容器中的数据对象。 算法：处理容器中数据的方法或操作。 分配器：给容器分配存储空间。 仿函数：用于协助算法完成各种操作。 配接器：用于套接适配仿函数。返回原题 const修饰的类成员或引用成员：在声明后马上要初始化，在构造函数中的操作为赋值，是不被允许的。 子类初始化父类的私有成员：需要在参数初始化列表中显示调用父类构造函数； 对象成员：数据成员是对象，并且对象只有含参数的构造函数。返回原题 struct和class的区别： 都可以定义类，都可以用于继承。但struct的默认访问权限和继承方式是public，而class默认是private； class可定义模板形参； struct可以在定义的时候直接以{}对其成员赋初值，而class不可以。 struct和union的区别： 两者都是用不同的数据类型成员组成，但在任何特定时刻，共用体只存放一个被选中的成员，而结构体则存放所有的成员变量； 对共用体的不同成员赋值，会将原有值覆盖，而对结构体的不同成员赋值是互不影响的； struct各成员有自己独立的内存空间，同时存在；而struct的所有成员不能同时占用它的内存空间，不能同时存在； sizeof(struct)会返回对齐之后所有成员大小相加之和，而sizeof(union)返回最大成员变量的大小。返回原题 malloc是c语言函数，而new是C++的运算符； 都用于申请动态内存，但new比malloc更加智能，new在对象创建的时候自动执行构造函数； new返回指定类型的指针，并自动计算出所需要的大小，而malloc必须用户指定大小，并且返回类型为void*，必须强行转换为实际类型的指针。返回原题 delete释放new分配的单个对象指针指向的内存，delete[]释放new分配的对象数组指针指向的内存； 对于简单的类型，使用new分配的不管是数组不是非数组形式内存空间，用两种方式均可。 123int *a = new int[10];delete a;delete[] a; // 与上式等价 对于类类型，如果使用new分配的是数组形式的内存空间a[10]，用delete只会调用a[0]的析构函数，从而造成内存泄漏，因此此种情况下只能用delete[]。返回原题 循环引用时可引起内存泄漏，即两个shared_ptr相互引用，引用计数都是1，不能自动释放。 解决办法：使用弱引用weak_ptr来打破循环引用。返回原题 对齐的原因： 各个硬件平台对存储空间的处理上有很大的不同，一些平台对某些特定类型的数据只能从某些特定地址开始存取。 效率上的考虑。比如一个int型数据存放在偶地址开始的地方，那么一个读周期就可以32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对再次读出的结果的高低字节进行拼凑才能得到32bit数据。 修改对齐： 使用伪指令#pragma pack(n)，编译器将按照n个字节对齐； 使用伪指令#pragma pack()，取消自定义字节对齐方式。返回原题 memcpy： 形式：void *memcpy(void *dest, const void *src, size_t n); 描述：memcpy()函数从src内存中白拷贝n个字节到dest内存区域，但是源和目的内存区域不能重叠。返回指向dest的指针。 memmove： 形式：void *memmove(void *dest, const void *src, size_t n); 描述：memmove()函数从src内存中拷贝n个字节到dest内存区域，但是源和目的的内存可以重叠。返回一个指向dest的指针。 唯一区别：memmove()允许源和目的区域重叠，而memcpy()不允许。返回原题 描述：一个定义为volatile的变量是说这变量可能会被意想不到地改变，于是编译器就不会去优化这个变量的值了。即优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。 用处： 硬件寄存器（如：状态寄存器） 一个中断服务子程序中会访问到的非自动变量 多线程应用中被几个任务共享的变量返回原题 详见CSDN。返回原题 函数重载：在同一作用域内，可以有一组具有相同函数名、不同参数列表的函数，这组函数被称为重载函数。 底层实现：C++利用name mangling（倾轧）技术，即在编译过程中，将函数、变量的名称重新改编的机制，来改变函数名，区分参数不同的同名函数。对于函数void foo(int x, int y);，在被C编译器编译后在库中的名字为_foo，而C++编译器则会产生像_foo_int_int的名字，所以编译之后C仍然无法辨别函数名相同、参数不同的函数。返回原题 printf是从右向左进行入栈的，后面的变量入栈后，前面的字符串再入栈。 printf的实现中有va_arg、va_start等函数，用于解析字符串，检查有多少个%d、%x等之类的符号，通过这个确认后面跟了多少参数。 详见：C可变参数实现原理。返回原题 参数入栈：将参数按照调用约定（C是从右向左）依次压入系统栈中； 返回地址入栈：将函数调用语句的下一条语句的地址保存在栈中，以便函数调用完成后返回； 跳转到函数体处； 如果函数体内定义了变量，将变量压栈； 将每一个形参以栈中对应的实参值取代，执行函数体的功能体； 将函数体中的变量、保存到栈中的实参值，依次从栈中取出，释放栈空间（出栈）； 执行return语句返回。从栈中取出刚开始调用函数时压入的地址，跳转到函数的下一条语句。当return语句不带有表达式时，按照保存的地址返回；否则将计算出的return表达式的值保存起来，然后再返回。返回原题 指针是一个变量，存储一个地址，指向内存中的一个单元，而引用是另一个变量的别名； 指针和引用的自增运算意义不一样； 对指针进行sizeof()操作，得到的是指针本身的大小，而对引用进行sizeof()操作，得到的是对象的大小； 有指向指针的指针，即多级指针，但没有多级引用； 引用定义时必须赋初值，而指针定义时可以不用赋初值； 有const指针，但没有const引用； 指针的值在初始化之后可以改变，即指向其它的存储单元，而引用在进行初始化后就不能再改变了返回原题 区别： 展开的时间不同：宏函数由预处理器对宏进行替代，而内联函数是通过编译器控制来实现的。 宏函数只是做简单的文本替换，编译内联函数可以嵌入到目标代码； 内联函数会做类型、语法检查，而宏函数不具有这样的功能。 内联函数是函数，而宏函数不是； 宏函数： 优点：宏在调用的地方，仅仅是参数的替换，不会出现函数调用那种压栈、出栈时的时间和空间的开销，执行效率高； 缺点：没有检查参数类型是否匹配，不安全。 内联函数： 优点：函数代码被放入符号表中，在使用时进行替换，效率很高；会有类型检查，因此够安全；可以作为类的成员函数，可以使用所在类的保护成员及私有成员。 缺点：如果函数代码过长，使用内联将消耗过多内存；如果函数体内有循环，那么 执行函数代码时间比调用开销大。返回原题 函数桢栈：本质是一种栈，专门用于保存函数调用过程中的各种信息（参数、返回地址、本地变量）。每调用一个函数，就会生成一个新的栈桢。 桢栈包括：函数的返回地址和参数、临时变量、函数调用的上下文； 函数调用参考：第46题。返回原题 封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏； 继承：可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。继承的过程就是从一般到特殊的过程。 继承的实现方式有三类：实现继承、接口继承和可视继承。 实现继承：使用基类的属性和方法而无需额外编码的能力；（非虚函数） 接口继承：仅使用属性和方法的名称，但是子类必须提供实现的能力；（纯虚函数） 可视继承：子窗体（类）使用基窗体（类）的外观和实现代码的能力。（虚函数） 多态：C++多态意味着调用成员函数时，会根据调用的对象的类型来执行不同的函数。 多态的实现方式有两种：覆盖和重载。 静态多态和动态多态。返回原题 C语言实现封装性：将属性和方法（函数指针）封装到特定结构体中； C语言实现继承性：使用组合，即在新有类中定义已有类的对象，就可以在新类中通过已有类的对象访问已有类自己的成员变量与函数； C语言实现多态：通过函数覆盖实现。返回原题 泛型编程：以独立于任何特定类型的方式编写代码。 在C++中，模板是泛型编程的基础。返回原题 编译器并不是把函数模板处理成能够处理任意类的函数。编译器从函数模板通过具体类型产生不同的函数，编译器会对函数模板进行两次编译：在声明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。返回原题 将类的构造函数和析构函数设为private：缺点是不能定义类的对象，解决办法是写一个静态方法来创建和删除类对象，因而只能在堆上建立对象； 使用虚继承：既可在堆上创建对象，也可在栈上创建对象，代码如下： 1234567891011121314151617181920212223template&lt;typename T&gt;class Base &#123;public: friend T;private: Base() &#123;&#125; ~Base() &#123;&#125;&#125;// 必须是虚继承：// 若非虚继承，则由于每个类只初始化自己的直接基类，因此A初始化FinalClass，FinalClass初始化Base类，不会报错；// 若是虚继承，则由最低层次的派生类构造函数初始化虚基类，而A不是Base的友元，无法调用其私有构造函数，帮编译报错。class FinalClass: virtual public Base&lt;FinalClass&gt; &#123;public: FinalClass() &#123;&#125;&#125;class A: public FinalClass &#123;public: A(); // 继承时报错，无法通过编译 // 解释：由于FinalClass使用了虚继承，所以要创建A对象，A类的构造函数就要先构造Base类的构造函数， // 而Base类的构造函数为私有成员，仅能友元FinalClass访问（友元无法继承），所以无法构造Base类， // 因而编译错误。&#125; 返回原题 宏定义是在预处理阶段进行的文本替换，而枚举是在编译的阶段进行的处理； 宏作为指令存储在代码段，而枚举作为常量，存储在数据区； 枚举常量具有类型，而宏没有类型； 枚举一次可以定义大量相关的常量，而宏只能定义一个。返回原题 函数指针：指向函数的指针，如int(*pf)(char, bool)，为指向返回类型为int、参数为(char, bool)的函数的指针。 指针函数：返回值会指针的函数。如int* fun(char a, bool b)，其本身是个函数，返回值为int*型指针。返回原题 迭代器和指针的区别：迭代器不是指针，是类模板，但表现得像指针（通过重载指针的一些运算符*、-&gt;、++、–等，来模拟指针的功能）。迭代器本质是封装了原生指针，提供了比指针更高级的行为。迭代器返回的是对象的引用而非对象的值。 为何要用迭代器：迭代器就是把不同集合类的访问逻辑抽象出来，使得不用暴露集合内部的结构而达到循环遍历集合的结果。返回原题 inline函数是将该函数的代码展开到调用该函数的地方，所以inline函数是没有地址的。 virtual函数的调用时在程序运行时根据调用函数的对象时父类对象还是子类对象来决定该调用哪一个虚函数，其中的原理就是通过vptr，vtbl等实现的，vptr指向vtbl中的虚函数，vbtl保存了虚函数的地址入口，所以每个虚函数都有个地址，这个地址保存在对应的虚函数表中，这个显然与inline函数没有地址是相违背的，所以inline和virtual是存在冲突的。返回原题 RTTI(Run-Time Type Idetification，运行时类型检查)，提供了运行时确定类对象类型的方法。 RTTI提供了两个有用的操作符： typeid：返回指针或对象的实际类型。 dynamic_cast：将基类指针或引用安全地转化为派生类的指针或引用。返回原题]]></content>
      <categories>
        <category>Job Hunting</category>
      </categories>
      <tags>
        <tag>求职</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome To Liuyee's Blog]]></title>
    <url>%2F2019%2F08%2F12%2FWelcome%2F</url>
    <content type="text"><![CDATA[Welcome to my blog. I will share my life, study, and so on in this blog.]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux文件和目录]]></title>
    <url>%2F2019%2F08%2F11%2Flinux-files%2F</url>
    <content type="text"><![CDATA[文件权限查看文件权限查看文件权限cmd12[liuyee@localhost ~]$ ls -l 文件名-rw-rw-r--. 1 liuyee liuyee 25 6月 16 04:13 文件名 其中， 第一列第一个字符代表文件类型： -：普通文件，d：目录，b：设备文件（块设备），c：设备文件（字符文件），1：软连接（快捷方式） 第一列第2-4、5-7、8-10个字符分别代表所属用户（u）、所属组（g）、其他人（o）的权限： 三个字符位依次代表：读、写、执行的权限； r：可读，w：可写，x：可执行，-：无对应权限位的权限。 第二列：所属用户 第三列：所属组 第四列：文件大小 第…列：… 更改文件权限 在原来权限的基础上改变权限 chmod {u/g/o/ugo}{+/-}{r/w/x/rwx},{u/g/o/ugo}{+/-}{r/w/x/rwx} 文件名 例子1：给文件名的所有者加上可执行权限、所有组加上可写权限、其他人减去可读权限。 例1cmd1[liuyee@localhost ~]$ chmod u+x,g+w,o-r 文件名 例子2：给文件名的所有者和所有组减去可读权限和可写权限。 例2cmd1[liuyee@localhost ~]$ chmod ug-rw 文件名 不管原有权限，直接对所有用户及组赋予、加上、减去新的权限 chmod a{+/-/=}{r/w/x/rwx} 文件名 例子：给文件名的所有者、所有组和其他人都赋予可读权限，无其它权限。 cmd1[liuyee@localhost ~]$ chmod a=r 文件名 用数字代替权限 r=4，w=2，x=1，-=0 例子：若文件的权限为755，则由于7=4+2+1，5=4+1，所以文件的所属用户权限为可读、可写、可执行；所属组和其它用户的用户权限为可读、可执行。 cmd1[liuyee@localhost ~]$ chmod 755 文件名 改变文件夹及里面所有文件和子文件夹的权限 chmod -R 000 文件夹名 -R是使用递归的意思 改变文件所有者和所属组 改变所有者 chown 用户名 文件名 改变所属组 chgrp 组名 文件名 同时改变所有者和所属组 chown 用户名:组名 文件名 chown 用户名.组名 文件名 改变文件夹及里面所有文件和子文件夹的所有者和所属组 加上参数-R 查看和更改缺省权限 umask [-S] （英文愿意：the user file-creation mask） 以rwx的形式显示新建文件缺省权限，可以通过此命令显示、设置文件或目录的缺省权限。 缺省创建的文件不具有可执行权限。 不接选项-S时，以数字形式呈现。例如若显示为0022，第一位0为特殊权限，后三位表征所有者、所属组、其它人的权限，用777相减得到755，即权限为u=rwx,g=r-x,o=r-x。因此默认情况下创建的文件夹权限为rwxr-xr-x，默认创建的文件的权限为rw-r–r–。 文件扩展名除了特定的文件外，Linux下的文件都没有后缀名，那么如何查看文件类型呢？可使用如下命令： file 文件名 例子：xxyy为用gedit创建的一个文本文件，编码方式为ASCII码。 cmd12[liuyee@localhost ~]$ file xxyyxxyy: ASCII text 目录配置系统文件夹 bin：存放二进制文件； boot：存放系统启动文件及内核； dev：存放设备文件； etc：存放配置文件； home：存放用户的家目录； lib：存入链接库文件； media：系统挂载点（比如说插入U盘时，会访问该文件夹下的子文件夹）； mnt：挂载点； opt：源码安装路径； proc：内核参数，不占用内核大小； root：root用户的家目录； sbin：存放系统二进制文件； tmp：临时文件； usr：安装软件时的默认文件； var：缓存、日志、数据库文件。 Linux只有一个根盘符’/‘，其它分区都放在根盘符下的文件夹内。 目录树 tree /boot/ 查看/boot/的目录树。 Linux文件和目录管理目录与路径处理命令 pwd 显示当前工作目录（Print Working Directory） cd 目录 change dir到指定目录。 cd - 切换到前一次进入的目录（可以来回不停地在两个目录间切换） mkdir 目录名 创建目录，可以同时创建多个。 mkdir -p 父目录名/子目录名 若父目录名不存在时，同时创建父目录名和子目录名。 rmdir 目录名 删除目录，只能删除空目录。 rmdir -p 父目录名/子目录名 同时删除子目录名和父目录名。等删除的目录名必须为空。 rm -rf 目录名 强制递归删除目录名及其所有子目录。 echo $PATH 显示系统默认路径。 PATH=’…:目录名’ 将目录名加入系统默认路径。 文件管理命令 删除、拷贝、剪切操作 cp [选项]… /PATH1/xx /PATH2/yy 如果yy是一个文件夹，则将PATH1下的xx拷贝到PATH2下的yy文件夹下； 如果yy不是一个文件夹或不存在，则将PATH1下的xx拷贝到PATH2下，并重命名为yy。 mv [选项]… /PATH1/xx /PATH2/yy 如果yy是一个文件夹，则将PATH1下的xx剪切到PATH2下的yy文件夹下； 如果yy不是一个文件夹或不存在，则将PATH1下的xx剪切到PATH2下，并重命名为yy。 同一个文件夹操作，即可以改名。 rm [选项] 文件 删除文件。可选参数：-f 强制删除、-r 递归删除、-rf 强制递归删除 touch 文件名 创建一个空文件； 创建有文件名有空格的文件： touch “program files” 查看文件 cat 文件名 显示文件内容； -n 指定显示行号。 tac 文件名 显示文件内容，反向列示。 more 文件名 按空格或f：翻页 按Enter：换行 按Q：退出 less 文件名 分布显示文件内容，可按PgUp往上翻页。 ‘/关键词’：查找关键词 tail 文件名 显示文件后面几行，默认最后10行； -n NUM 指定行数； -f 动态显示文件末尾内容。 创建软链接 ln -s 文件名 文件名.soft 生成软链接 软链接权限全部为rwx，但最权限仅由软链接所指向的文件的权限决定； 原文件丢失，软链接无法继续访问。 ln 文件名 文件名.hard 生成硬链接 相比拷贝，硬链接可以和指向的文件同时更新（映射到同一个i节点）； 原文件丢失，硬链接可以继续访问； 不能跨分区； 不能针对目录使用。 文件搜索 find 搜索条件为文件名 find / -name init 在根目录下查找文件名为init的文件 find / -name *init* 在根目录下查找文件名中包含init的文件 find / -name *init 在根目录下查找文件名以init开头的文件 find / -name init??? 在根目录下查找文件名以init开头并且后面接三个字符的文件 find / -iname init 在根目录下查找文件名为init的文件，不区分大小写； 其它用法和name相同 搜索条件为文件大小 find / -size +204800 在根目录下查找文件大小大于200MB的文件； 后面的参数为代表大于、为负代表小于、无符号代表等于。 搜索条件为文件所有者/所属组 find / -user username 在根目录下查找文件所有者为username的文件。 find / -group groupname 在根目录下查找文件所属组为groupname的文件。 搜索条件为时间 find / -cmin -5 在根目录下查找5分钟内被修改过属性的文件和目录 cmin: 文件属性，change amin: 访问时间，access mmin: 文件内容，modify 后面时间前面的符号为’-‘时，代表某个时间段内；为’+’时，代表超过某个时间。 根据文件类型查找 find -type f f为文件，d为目录，l为软链接文件 根据i节点查找 find -inum 31531 查找i节点为31531的文件； i节点可通过ls -i列出得到。 复合搜索条件 find / -size +1024 -a -size -102400 在根目录下查找大于1Mb小于100Mb的文件 中间参数为-a，意思是and；参数为-o时，意思是or 对查找结果执行操作 find / -name inittab -exec ls -l {} \; 对搜索结果显示详细信息。 -exec可以换成-ok，对每个文件执行操作时都会要求确认。 文件搜索 locate在文件资料库中查找文件，查找速度比find快，/tmp中的文件不能被收录入文件资料库 locate 文件名 区分大小写，若想不区分大小写，则需要加上-i选项。 更新文件资料库 updatedb 搜索文件中的内容grep grep -iv [指定字串][文件] 在文件中搜索字串匹配的行并输出 -i 不区分大小写 -v 排除指定字串 压缩与解压 .gz压缩文件，只能压缩文件，压缩完后只剩压缩文件 gzip 文件名：压缩gz文件 gunzip 文件名：解压gz文件 gzip -d 文件名：解压gz文件 .tar.gz打包目录，并压缩文件 tar 选项 [压缩后文件名] [目录] 选项-c：打包 选项-v：显示详细信息 选项-f：指定文件名 选项-z：打包同时压缩 解压tar命令 tar 选项 [压缩后文件名] [目录] 选项-x：解包 选项-v：显示详细信息 选项-f：指定解压文件 选项-z：解压缩 .zip压缩文件，可以压缩文件或目录，压缩后会保留压缩文件和目录 zip 选项 [压缩后文件名] [文件或目录] 选项-r：压缩目录 解压缩.zip文件 unzip [压缩文件] .bz2压缩文件 bzip2 选项 [文件] 选项-k：产生压缩文件后保留原文件 .gz的升级版，一般用于压缩大型文件 tar -cjf [压缩后目录名.tar.bz2] [目录] 压缩目录，生成.tar.bz2压缩文件 解压.bz2压缩文件 bunzip2 选项 [压缩文件] 选项-k：解压缩后保留原文件 范例1：bunzip2 -k 文件名.bz2 范例2：tar -xjf 目录名.tar.bz2]]></content>
      <categories>
        <category>Operation System</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客瞎折腾——tranquilpeak主题]]></title>
    <url>%2F2019%2F08%2F09%2FthemeConfig%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Tensorflow版本不匹配问题及解决]]></title>
    <url>%2F2019%2F02%2F28%2Ftf-version-problem%2F</url>
    <content type="text"><![CDATA[问题描述截止至2019年2月27日，Anaconda3的版本已经更新到3.7了，对应的python版本是3.7.1，而没有对应的Tensorflow版本与之相匹配。而python3.5是可以找到tensorflow的。具体报错内容如下： 解决方法创建python3.5环境，与Anaconda3下的python3.7共存。环境：Windows10、Python3.7、Anaconda3.7、conda4.5.12 使用管理员权限，打开Anaconda Prompt；键入以下命令：1conda create --name python35 python=3.5过程中遇到Proceed([y]/n)时，键入y，按回车键继续。成功后，执行下面的命令进行Python3.5环境：cpp1234// 进入python3.5环境conda activate python35// 退出环境（即回到python3.7环境）conda deactivate 在python3.5环境中，执行下列命令，安装tensorflow：安装tensorflowcmd1pip install tensorflow 测试在Python3.5环境下测试Tensorflow是否可以正常使用： 键入以下代码： 测试Tensorflowpython1234import tensorflow as tsess = tf.Session()hello = tf.constant("hello, world")sess.run(hello) 不出意外，键入第二行代码后会出现如下警告（不会影响程序运行）： Warningcmd12019-02-27 14:59:44.875953: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 解决方法为在上述代码之前加入以下代码： 解决Warning的方法python12import osos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' # 设置提示信息的等级为2级，只显示warning和Error 运行成功，输出： 输出python1b'hello, world' 在Pycharm上配置Tensorflow环境 打开Pycharm，选择或新建一个工程。 File -&gt; Settings -&gt; Projects: [PROJECT_NAME] -&gt; Project Interpreter -&gt; Add Local。 选择 Anaconda3/envs/python35 文件夹下面的python.exe，即配置成功。 写在最后 Every problem you encounter has been met and solved by someone better than you, and you can find the corresponding one in Google.]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS使用技巧]]></title>
    <url>%2F2019%2F01%2F20%2Fvs-skills%2F</url>
    <content type="text"><![CDATA[当解决方案中存在两个及以上项目时，其中有一个需要设置为启动项目（右键-&gt;设为启动项目），启动项目标题文字会变成粗体。 包含目录、库目录、链接器的区别及相关问题： VC++目录： 包含目录：寻找#include&lt;xxxx.h&gt;中的xxxx.h的搜索目录 库目录：寻找.lib文件的搜索目录 C/C++： 常规-&gt;附加包含目录：寻找#include&lt;xxxx.h&gt;中的xxxx.h的搜索目录（每一项对应一个文件夹XXXX，文件夹中包含了编译时所需的头文件，使用时直接#include即可） 链接器： 常规-&gt;附加库目录：寻找.lib文件的搜索目录 输入-&gt;附加依赖项：lib库（C++的库会把函数、类的声明放在*.h中，实现放在*.cpp或*.cc中。编译之后，*.cpp，*.cc，*.c会被打包成一个.lib文件，这样可以保护源代码） 常见问题： 包含目录和附加包含目录（库目录和附加库目录）的区别： 包含目录：修改了系统的include宏的值，是全局的； 附加包含目录：用于当前项目，对其他项目没有影响。 库目录和附加库目录的区别同上 当需要对某工程添加这些目录时，通常情况下，都是在附加包含目录和附加库目录中添加的。 要使用一个库，除了要include其头文件以外（附加包含目录），还要在链接过程中把lib加进去（附加库目录、附加依赖项）。 当需要向项目中添加.dll动态链接库时，直接将需要添加的.dll文件拖拽到项目生成的.exe所在的文件夹下即可（项目-&gt;属性-&gt;配置属性-&gt;常规-&gt;输出目录，可以看到.exe生成在哪个目录下）。 在添加上述几个目录的路径的时候，可以看到$(xxxx)，这就是宏了，可以点开右下角的宏查看这些分别代表什么字符串。 出现0xc000007b——应用程序无法正常启动： 根本原因是缺乏所需要的DLL，提供了错误版本的dll相当于没有DLL，提示完全一样 网上的解决办法： SysWOW64目录下的dll并非确保是64位的，也有可能是32位的。那么到哪里去找真正的64位的dll呢？在这里 vs安装目录\VC\redist\x64，这里有正统的dll 我自己的解决办法： 在C:\Windows\SysWOW64目录下找到mfc100(d).dll、msvcp100(d).dll、msvcr100(d).dll，替换放入项目的Release(Debug)文件夹下即可。 win10上vs2010写的项目如何使其在xp系统上运行： 要领：要把工程发布为静态库才能具有“跨平台”的属性。 【配置属性】-【常规】-【平台工具集】，选择“Visual Studio 2012 (v110 XP)”（不打补丁没有该选项）。 【配置属性】-【常规】-【使用MFC】，选择“Use MFC in a Static Library”（非MFC程序可无视）。 【配置属性】-【C/C++】-【代码生成】-【基本运行时库】，根据你的当前工程属性Debug还是Release来选择“Multi-threaded Debug (/MTd)”或者“Multi-threaded (/MT)”。 将你的工程中依赖的所有外部库，都按照步骤1~3重新编译。 win10上vs2010已经写好的项目如何在xp系统上运行： 问题描述：用vs2010编译好的程序，里面有opencv配置、mfc调用等，最后生成了一个exe文件，在Release文件夹下放了很多dll，win10下面能运行，但在xp和win7下不能运行，一直提示缺乏msvcp140.dll等动态链接文件，但把这些dll文件放入release文件夹或系统路径C:\Windows\System32下都不管用。。。 解决办法： 既然提示msvcp140.dll，那么则说明系统欠缺vs2015组件，于是可以下载并安装微软VC++2015版运行库（英文全称：Microsoft Visual C++ 2015 Redistributable Package），非常方便快捷； 安装完之后，还是运行不了。按照提示又在Release文件夹下加入了msvcp100d.dll、msvcr100d.dll、mfc100d.dll三个文件夹，便大功告成。至于为什么要加入这三个debug模式的dll文件还是不知其所以然。。。 新建的文档无缘无故打不开源文件、包括文件： 在检查完属性-&gt;C/C++-&gt;附加包含目录无任何错误后，运行程序依旧会出现题中的问题，折腾了我半年之久的疑惑终于被我解决了：新建项目时，不能选择默认路径C:\Users\workg\Documents\Visual Studio 2017\Projects\，需要重新给个路径，问题突然就解决了。。。也是非常神奇！]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>vs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序打包（Setup使用技巧）]]></title>
    <url>%2F2019%2F01%2F15%2Fsetup-package%2F</url>
    <content type="text"><![CDATA[参考：使用Setup Factory安装包制作工具制作安装包 补充： 创建和删除文件夹： 创建和删除文件夹cpp123456// 创建文件夹一般放在安装过程中的Actions中，例如On Post InstallFolder.Create(_ProgramFilesFolder.."\\ObjectTracking"); // 创建文件夹C:\\Program Files\\ObjectTracking，注意中间的两点起连接字符串的作用// 删除文件夹一般放在卸载过程中的Actions中，例如On Post UninstallFolder.DeleteTree(_ProgramFilesFolder.."\\ObjectTracking", nil); // 删除C:\\Program Files\\ObjectTracking目录下所有的子文件夹和文件，但不删除文件夹C:\\Program Files\\ObjectTrackingFolder.Delete(_ProgramFilesFolder.."\\ObjectTracking"); // 删除文件夹C:\\Program Files\\ObjectTracking]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Setup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日语中的动词变形]]></title>
    <url>%2F2018%2F04%2F25%2FJapanese-2%2F</url>
    <content type="text"><![CDATA[一类动词（动1）/五段动词 特征：词尾在う段上 变形：词尾的う段相应地变成い段，再加上ます（现在将来式肯定）、ません（现在将来式否定）、ますか（现在将来式疑问）、ました（过去式肯定）、ませんでした(过去式否定)、ましたか（过去式疑问） 例子：始はじまる ＝＞ 始まります //开始終おわる ＝＞ 終わります //结束働はたらく ＝＞ 働きます //工作 二类动词（动2）/一段动词 特征：以い段或え段＋る结尾 变形：把る去掉，再加上ます（现在将来式肯定）、ません（现在将来式否定）、ますか（现在将来式疑问）、ました（过去式肯定）、ませんでした(过去式否定)、ましたか（过去式疑问） 例子：起おきる ＝＞ 起きます //起床寝ねる ＝＞ 寝ます //睡觉 三类动词（动3）/变格动词サ变动词 する：中文是做（事）的意思，直接变为：します、しますか、しません 例子：勉強べんきょうする ＝＞ 勉強します //学习 か变动词来くる：中文是来、到的意思，变形为：来きます、来きますか、来きません 动词为什么要做变形？ 更礼貌：从简体变到礼貌体，说话方式更得体。 表达更丰富：多了否定、疑问等表达方式。]]></content>
      <categories>
        <category>Language Learning</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日语中的数字与时间]]></title>
    <url>%2F2018%2F04%2F22%2FJapanese-1%2F</url>
    <content type="text"><![CDATA[「纯手打，转载请注明出处」 数字数字0~10其中0、4、7、9有两种读法，但在数数中一般用前面加粗的假名来读，表示时间时用后面的假名来读。 写法 参照假名 写法 参照假名 0 ゼロ / れい 5 ご 1 いち 6 ろく 2 に 7 なな / しち 3 さん 8 はち 4 よん / し 9 きゅう / く 数字10~19 写法 参照假名 写法 参照假名 10 じゅう 15 じゅうご 11 じゅういち 16 じゅうろく 12 じゅうに 17 じゅう＋なな / しち 13 じゅうさん 18 じゅうはち 14 じゅう＋よん / し 19 じゅう＋きゅう / く 整数20~90其他数如67读作：ろくじゅうなな。 写法 参照假名 写法 参照假名 20 にじゅう 60 ろくじゅう 30 さんじゅう 70 ななじゅう 40 よんじゅう 80 はちじゅう 50 ごじゅう 90 きゅうじゅう 整数100~900其中300、600、800为不规则读音，100写作“百”，而不是“一百”。 其他数如101读作：ひゃくいち。 写法 参照假名 写法 参照假名 100 ひゃく 600 ろっぴゃく 200 にひゃく 700 ななひゃく 300 さんびゃく 800 はっぴゃく 400 よんひゃく 900 きゅうひゃく 500 ごひゃく 整数1000~9000其中3000、8000为不规则读音，1000写作“千”，而不是“一千”。 其他数如1001读作：せんいち 写法 参照假名 写法 参照假名 1000 せん 6000 ろくせん 2000 にせん 7000 ななせん 3000 さんぜん 8000 はっせん 4000 よんせん 9000 きゅうせん 5000 ごせん 万以上的数字在表达10000及以上的整数时，需在前面加上“一”，比如10000应该写作“一万”，读作：いちまん。 单位 参照假名 单位 参照假名 万 まん 千万 せんまん 十万 じゅうまん 億 おく 百万 ひゃくまん 兆 ちょう 表达年份比如2018年，读作：にせんじゅうはち年ねん，要把2018看作一个整体来读。 小数及百分数% 读作：パーセント，源于外来词汇percent，例：50%ごじゅうパーセント，也有人直接简读为パ，但不建议这样读。 . 读作：てん，例：1.52いちてんごに。 时间星期 写法 参照假名 中文意思 日曜日 にちようび 星期日 月曜日 げつようび 星期一 火曜日 かようび 星期二 水曜日 すいようび 星期三 木曜日 もくようび 星期四 金曜日 きんようび 星期五 土曜日 どようび 星期六 时刻其中，x時表示x点钟，注意0、4、7的读法，４時一般不读作： しじ，因为“し”的发音和“死”的发音相通，于是“４時”相通“死時”，日本人比较忌讳这个。另外４時这里一般不读作：よんじ。 小时 写法 参照假名 写法 参照假名 ０時 れいじ ７時 しちじ １時 いちじ ８時 はちじ ２時 にじ ９時 くじ ３時 さんじ １０時 じゅうじ ４時 よじ １１時 じゅういちじ ５時 ごじ １２時 じゅうにじ ６時 ろくじ 分钟注意1、6、8以及10的倍数的不规则写法，全部都要发促音！ 当“分”遇到以1、3、4、6、8结尾或10、20等整数时，要读作：ぷん，否则读作：ふん。 写法 参照假名 写法 参照假名 １分 いっぷん ８分 はっぷん ２分 にふん ９分 きゅうふん ３分 さんぷん １０分 じゅうぷん ４分 よんぷん １１分 じゅういっぷん ５分 ごふん １５分 じゅうごふん ６分 ろっぷん ２０分 にじゅっぷん ７分 ななふん ３０分 さんじゅっぷん 值得注意的是，“３０分”也可以表达为“半”，比如1点30分可以换为1点半，对应日语为：１時半いちじはん，“半”的发音为“はん”。 另外，不确定时间比如1点30分左右，可以表达为：一時三十分ごろ。 时间指示代词 写法 参照假名 中文意思 今 いま 现在 今日 きょう 今天 今朝 けさ 今早 今晩 こんばん 今晚 今週 こんしゅう 这周 今年 ことし 今年 昨日 きのう 昨天 先週 せんしゅう 上周 去年 きょねん 去年 明日 あした / あす 明天 来週 らいしゅう 下周 来年 らいねん 明年 一昨日 おととい 前天 先先週 せんせんしゅう 上上周 一昨年 おととし 前年 明後日 あさって 后天 再来週 さらいしゅう 下下周 再来年 さらいねん 后年 毎日 まいにち 每天 毎朝 まいあさ 每天早晨 毎晩 まいばん 每晚 毎週 まいしゅう 每周 毎年 まいとし 每年 朝 あさ 早晨 午前 ごぜん 上午 エーエム 〜 上午 午後 ご【浊音】ご【鼻浊音】 下午 夜 よる 晚上（时间） 晩 ばん 晚上（晩御飯） 常见表达 今日は何曜日ですか。 //今天是星期几？ 今何時ですか。 //现在是几点？ ——８時半です。 //8点半了。 主语＋は＋时间＋に＋动作。 //我在某时做某事。例：私は７時に起きます。 //我在7点钟起床。 主语＋时间1＋から＋时间2＋まで＋动作。 //我从时间1到时间2在做某事。例：私は９時から５時まで働はたらきます。 //我从7点到（下午）5点在工作。 主语＋は＋いつ＋动词＋ますか。 //某事在什么时候？ 例：お誕生日たんじょうびはいつですか。 //你生日在什么时候？]]></content>
      <categories>
        <category>Language Learning</category>
      </categories>
      <tags>
        <tag>Japanese</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Random Number Generator]]></title>
    <url>%2F2018%2F04%2F21%2FrandomNumber%2F</url>
    <content type="text"><![CDATA[RNG（OpenCV中的随机数生成器）RNG是OpenCV中的一个类，具体使用方法如下： 均匀随机数： 均匀随机数cpp12345RNG myRNG; //定义RNG类double r1 = myRNG.uniform(0, 1); //只产生0，值得注意！double r2 = myRNG.uniform(0.0, 1.0); //产生[0, 1)的随机double型浮点数double r3 = myRNG.uniform(0.f, 1.f); //产生[0, 1)的随机float型浮点数double r4 = myRNG.uniform(0, 10); //产生[0, 10)的随机整数(r4也可以是int、float型) 高斯（正态）随机数： 高斯（正态）随机数cpp12RNG myRNG;double r5 = myRNG.gaussian(2); //括号内为高斯分布的参数sigma（double型） 当定义RNG类时，系统默认给构造函数赋初值，这样会使得程序每次运行所产生的结果都相同，方便测试工作需要。但有时我们需要使其每次运行的结果都不同，该如何解决呢？通常我们将种子设置为当前时间，如此一来我们每次获取的随机数就不相同了： 设置随机数种子cpp12RNG myRNG((unsigned)time(NULL)); //将当前时间(unsigned)time(NULL)设置为种子double r5 = myRNG.uniform(0.0, 1.0); 定义随机矩阵 定义随机矩阵cpp1234//方法为fill(&lt;#InputOutputArray mat#&gt;, &lt;#int distType#&gt;, &lt;#InputArray a#&gt;, &lt;#InputArray b#&gt;)其中distType可以是RNG::UNIFORM或RNG::GAUSSIAN。当类型选择为RNG::UNIFORM型时，a为下界（闭区间），b为上界（开区间）当类型选择为RNG::GAUSSIAN型时，a为均值，b为标准差RNG myRNG; Mat myMat(3, 3, CV_8U); //定义一个3x3的单通道无符号8位型矩阵myRNG.fill(myMat, RNG::UNIFORM, 0, 10); //填充[0, 10)的随机整数到上述矩阵中 函数系列 函数 使用方法 rand() 返回一个[0, RAND_MAX)的随机数，返回类型与接收返回值的变量类型有关，RAND_MAX在stdlib.h中有定义。 rand() % n + a 返回一个[a, n)的随机整数。 rand() % RAND_MAX 返回一个[0, 1)的随机浮点数。 srand(unsigned int) 设置种子，可以使上述函数在程序每次运行时产生的随机数序列都不一样。一般参数可以设置为(unsigned)time(NULL)或(int)time(0)。 randu(dst, low, high) 返回一个[low, high)的随机数矩阵或数组dst。 randn(dst, mean, stddev) 返回一个均值为mean、标准差为stddev的高斯分布随机数矩阵或数组dst。 randShuffle(dst) 将原矩阵或数组打乱重排。]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>RNG</tag>
        <tag>随机数产生器</tag>
      </tags>
  </entry>
</search>
