<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liuyee&#39;s Blog</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-09-12T08:39:54.399Z</updated>
  <id>/</id>
  
  <author>
    <name>Liu Yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019vivo校招笔试题</title>
    <link href="/2019/09/12/vivo/"/>
    <id>/2019/09/12/vivo/</id>
    <published>2019-09-12T08:33:58.000Z</published>
    <updated>2019-09-12T08:39:54.399Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>小v是公司的运维工程师，现有一个有关应用程序部署的任务如下：<br>1、一台服务器的磁盘空间、内存是固定的，现在有N个应用程序要部署；<br>2、每个应用程序所需要的磁盘、内存不同，每个应用程序允许访问的用户数也不同，且同一个应用程序不能在一台服务器上部署多个。</p><p>对于一台服务器而言，如何组合部署应用程序能够使得单台服务器允许访问的用户数最多？</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>输入包括三个参数，空格分隔，分别表示服务器的磁盘大小、内存大小，以及应用程序列表；<br>其中第三个参数即应用程序列表，表述方式为：多个应用程序信息之间用‘#’分隔，每个应用程序的信息包括‘,’分隔的部署所需磁盘空间、内存、允许访问的用户量三个数字；<br>比如50,20,2000 表示部署该应用程序需要50G磁盘空间，20G内存，允许访问的用户数为2000</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>单台服务器能承载的最大用户数。</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>二维的0-1背包问题</li><li>dp[N][D][M]表示在有N个APP，磁盘大小为D、内存大小为M的条件下，最多能有多少访问量。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> disk, <span class="keyword">const</span> <span class="keyword">int</span> memory, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; disks, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; memories, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;visitors)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = disks.size(); </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &gt; dp(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;(disk + <span class="number">1</span>, </span><br><span class="line">                                                                 <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(memory + <span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= disk; ++d) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= memory; ++m) &#123;</span><br><span class="line">                <span class="comment">// 将第i-1个app装入需满足条件</span></span><br><span class="line">                <span class="keyword">if</span> (m &gt;= memories[i - <span class="number">1</span>] &amp;&amp; d &gt;= disks[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> t1 = dp[i - <span class="number">1</span>][d - disks[i - <span class="number">1</span>]][m - memories[i - <span class="number">1</span>]] + visitors[i - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">int</span> t2 = dp[i - <span class="number">1</span>][d][m];</span><br><span class="line">                    dp[i][d][m] = t1 &gt; t2 ? t1 : t2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    dp[i][d][m] = dp[i - <span class="number">1</span>][d][m];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][disk][memory];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> disk, memory;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; disk &gt;&gt; memory;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; disks, memories, visitors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">        <span class="built_in">string</span> t = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.size() &amp;&amp; s[i] != <span class="string">'#'</span>)</span><br><span class="line">            t += s[i++];</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.size(); ++j) &#123;</span><br><span class="line">            <span class="built_in">string</span> t2 = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; t.size() &amp;&amp; t[i] != <span class="string">','</span>) </span><br><span class="line">                t2 += t[j++];</span><br><span class="line">            vec.push_back(t2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">stringstream</span> ss;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            ss &lt;&lt; vec[<span class="number">0</span>];</span><br><span class="line">            ss &gt;&gt; n;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) disks.push_back(n);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) memories.push_back(n);</span><br><span class="line">            <span class="keyword">else</span> visitors.push_back(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; helper(disk, memory, disks, memories, visitors) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>一维开心消消乐，每次消除得分为消除个数k的平方，k&gt;=1。</p></div><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>输入一行n个正整数，代表这一行中豆子的颜色及排列。</p></div><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>最终能拿到的最大积分</p></div><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>输入：1 4 2 2 3 3 2 4 1</li><li>输出：21</li></ul><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>三维动态规划问题，也是leetcode原题，可参考解析：<a href="https://www.cnblogs.com/grandyang/p/6850657.html" target="_blank" rel="noopener">[LeetCode] Remove Boxes 移除盒子</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; boxes;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        boxes.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = boxes.size();</span><br><span class="line">    <span class="keyword">int</span> dp[n][n][n] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">            dp[i][i][k] = (<span class="number">1</span> + k) * (<span class="number">1</span> + k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt; n; ++t) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = t; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = j - t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> res = (<span class="number">1</span> + k) * (<span class="number">1</span> + k) + dp[i + <span class="number">1</span>][j][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = i + <span class="number">1</span>; m &lt;= j; ++m) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (boxes[m] == boxes[i])</span><br><span class="line">                        res = max(res, dp[i + <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">0</span>] + dp[m][j][k + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j][k] = res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;  n == <span class="number">0</span> ? <span class="number">0</span> : dp[<span class="number">0</span>][n - <span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019vivo校招笔试题编程题第二题及第三题C++解法及解析&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019作业帮校招笔试题</title>
    <link href="/2019/09/05/zuoyebang/"/>
    <id>/2019/09/05/zuoyebang/</id>
    <published>2019-09-05T14:34:08.000Z</published>
    <updated>2019-09-05T14:43:43.545Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="第二题（Leetcode原题）"><a href="#第二题（Leetcode原题）" class="headerlink" title="第二题（Leetcode原题）"></a>第二题（Leetcode原题）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>给定不同面额的硬币(coins)和一个总金额(amount) 。写一个函数来计算可以凑成总金额所需的最少的硬币个数，如果没有任何一种硬币组合能满足，返回-1。</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行为总金额n，第二行为所有硬币的面额。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>若存在可以凑成总金额所需的最少的硬币个数，则输出该数；否则输出为-1。</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>一开始想的是用贪心算法，但后来发现不可以，比如输入总金额为20、硬币面额为1、5、6时，若采用贪心算法：20=6*3+1*2，一共需要5枚硬币，而实际只需4枚硬币即可，即20=5*4。</li><li>标准解法是动态规划算法：<ul><li>定义dp[i]为总金额为i时所需要的最少硬币数，dp[0]=0；</li><li>状态转移方程：dp[i] = min(dp[i], dp[i-coin[j]] + 1)。+1是代表使用coin[j]一次。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinCoins</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coin)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n + <span class="number">1</span>, n + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coin.size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (coin[j] &lt;= i)</span><br><span class="line">                dp[i] = dp[i] &lt; dp[i-coin[j]] + <span class="number">1</span> ? dp[i] : dp[i-coin[j]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n] &gt; n ? <span class="number">-1</span> : dp[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">// 总金额</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coin; <span class="comment">// 存储硬币面额</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; value;</span><br><span class="line">        coin.push_back(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getMinCoins(n, coin) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019小红书校招笔试题编程题第二题C++解法及解析&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019小红书校招笔试题</title>
    <link href="/2019/09/03/xiaohongshu/"/>
    <id>/2019/09/03/xiaohongshu/</id>
    <published>2019-09-03T14:51:58.000Z</published>
    <updated>2019-09-04T12:55:20.816Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="额外的一道题"><a href="#额外的一道题" class="headerlink" title="额外的一道题"></a>额外的一道题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>长宽分别为m、n的一个棋盘，里面有k个位置设有障碍物，有障碍物的点不能通过，求问从左上顶点(0,0)到右下顶点(m-1, n-1)是否有最短路径，并求出最短路径。</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行为n,m,k，分别代表棋盘的行数和列数，以及障碍物的数量。<br>剩下k行，每一行有两个数，代表障碍物的x和y坐标。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>若存在最短路径，输出为最短路径的大小；否则输出为0。</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>采用回溯法，利用递归，列出各种可能情况进行求解。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">bool</span> isFound = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> minCnt = INT_MAX;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findShortestPath</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt;&amp; <span class="built_in">map</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt;&amp; visited, <span class="keyword">int</span> curX, <span class="keyword">int</span> curY, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (curX == n - <span class="number">1</span> || curY == m - <span class="number">1</span>) &#123;</span><br><span class="line">        isFound = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; minCnt)</span><br><span class="line">            minCnt = cnt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// down</span></span><br><span class="line">    <span class="keyword">if</span> (curX &lt; n - <span class="number">1</span> &amp;&amp; !barrier[curX + <span class="number">1</span>][curY] &amp;&amp; !visited[curX + <span class="number">1</span>][curY]) &#123; </span><br><span class="line">        visited[curX + <span class="number">1</span>][curY] = <span class="literal">true</span>;</span><br><span class="line">        shortestPath(barrier, visited, curX + <span class="number">1</span>, curY, cnt + <span class="number">1</span>);</span><br><span class="line">        visited[curX + <span class="number">1</span>][curY] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// right</span></span><br><span class="line">    <span class="keyword">if</span> (curY &lt; m - <span class="number">1</span> &amp;&amp; !barrier[curX][curY + <span class="number">1</span>] &amp;&amp; !visited[curX][curY + <span class="number">1</span>]) &#123;</span><br><span class="line">        visited[curX][curY + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        shortestPath(barrier, visited, curX, curY + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">        visited[curX][curY + <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// up</span></span><br><span class="line">    <span class="keyword">if</span> (curX &gt; <span class="number">0</span> &amp;&amp; !barrier[curX - <span class="number">1</span>][curY] &amp;&amp; !visited[curX - <span class="number">1</span>][curY]) &#123;</span><br><span class="line">        visited[curX - <span class="number">1</span>][curY] = <span class="literal">true</span>;</span><br><span class="line">        shortestPath(barrier, visited, curX - <span class="number">1</span>, curY, cnt + <span class="number">1</span>);</span><br><span class="line">        visited[curX - <span class="number">1</span>][curY] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// left</span></span><br><span class="line">    <span class="keyword">if</span> (curY &gt; <span class="number">0</span> &amp;&amp; !barrier[curX][curY - <span class="number">1</span>] &amp;&amp; !visited[curX][curY - <span class="number">1</span>]) &#123;</span><br><span class="line">        visited[curX][curY - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        shortestPath(barrier, visited, curX, curY - <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">        visited[curX][curY - <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; barrier(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; visited(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        barrier[x][y] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    shortestPath(barrier, visited, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (isFound)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; minCnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>薯队长写了一篇笔记草稿，请你帮忙输出最后内容。</p><ol><li>输入字符包括英文字符、“(”、“)”和“&lt;”；</li><li>英文字符表示笔记内容；3. 括号之间表示注释内容，任何字符都无效。括号保证成对出现；</li><li>“&lt;”表示退格，删去前面一个笔记内容字符，括号不受“&lt;”影响。</li></ol></div><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>输入一行字符串。长度小于等于10000。</p></div><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出一行字符串，表示最终的笔记内容。</p></div><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>题目不是很难，直接按照题意即可求出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> src;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; src;</span><br><span class="line">    <span class="built_in">string</span> dst = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; src.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[i] == <span class="string">'('</span>) </span><br><span class="line">            ++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (src[i] = <span class="string">')'</span>) &#123;</span><br><span class="line">            --cnt;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (src[i] == <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dst.empty())</span><br><span class="line">                    dst.pop_back(src[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dst.push_back(src[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dst &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>薯队长最近在玩一个迷宫探索类游戏，迷宫是一个N*N的矩阵形状，其中会有一些障碍物禁止通过，这个迷宫还有一些特殊的设计，它的左右边界以及上下边界是连通的，比如在(2,n)的位置继续往右走一格可以到(2,1)，在(1,2)的位置继续往上走一格可以到(n,2)。请问薯队长从起点位置S，最少走多少格才能到达迷宫的出口位置E。</p></div><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行正整数N，接下来N行字符串。‘.’表示可以通过，‘#’表示障碍物，‘S’表示起点（有且仅有一个），‘E’表示出口（有且仅有一个）。<br>对于50%的数据，0&lt;N&lt;10；对于100%的数据，0&lt;N&lt;1000。</p></div><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出一个整数，表示从S到E最短路径的长度，无法到达则输出-1。</p></div><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><ul><li>用一个二维数组保存从S到当前节点的路径长度，最后直接返回E坐标位置的值即可。（回溯法只能通过50%）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startX = <span class="number">0</span>, startY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> endX = <span class="number">0</span>, endY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findShortestPath</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; <span class="built_in">map</span>, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dir = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;; <span class="comment">// 上下左右四个方向</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; visited(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>)); <span class="comment">// 记录已访问结点</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; times(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">-1</span>)); <span class="comment">// 记录从S到当前位置的路径长度</span></span><br><span class="line">    times[startX][startY] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">    q.push(&#123;startX, startY&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dir.size(); ++i) &#123;</span><br><span class="line">            <span class="comment">// 下一步点的坐标</span></span><br><span class="line">            <span class="keyword">int</span> x = cur[<span class="number">0</span>] + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = cur[<span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 处理边界点</span></span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">-1</span>)</span><br><span class="line">                x = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x == n)</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (y == <span class="number">-1</span>)</span><br><span class="line">                y = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (y == n)</span><br><span class="line">                y = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; !visited[x][y]</span><br><span class="line">                &amp;&amp; (<span class="built_in">map</span>[x][y] == <span class="string">'.'</span> || <span class="built_in">map</span>[x][y] == <span class="string">'S'</span>) ) &#123;</span><br><span class="line">                times[x][y] = times[cur[<span class="number">0</span>]][cur[<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (x == endX &amp;&amp; y == endY)</span><br><span class="line">                    <span class="keyword">return</span> times[x][y];</span><br><span class="line">                visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">                q.push(&#123;x, y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> times[endX][endY];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">'S'</span>) &#123;</span><br><span class="line">                startX = i;</span><br><span class="line">                startY = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">'E'</span>) &#123;</span><br><span class="line">                endX = i;</span><br><span class="line">                endY = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.push_back(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = findShortestPath(<span class="built_in">map</span>, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>在游戏中，薯队长获得了N件宝物，接下来得把这些宝物卖给宝物回收员来赚点小钱，这个回收员有个坏毛病，每次卖给他一件宝物后，之后他就看不上比这件宝物差的宝物了。在这个世界中，衡量宝物的好坏有两个维度，稀有度X和实用度H，回收员在回收一个宝物A后，下一个宝物的稀有度和实用度都不能低于宝物A。那么薯队长如何制定售卖顺序，才能卖给回收员宝物总个数最多？</p></div><h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行一个正整数N，接下来N行每行两个整数分别表示X和H。<br>对于70%的数据：0&lt;N&lt;10000，0&lt;Xi&lt;10^6，0&lt;Hi&lt;10^6；<br>对于100%的数据：0&lt;N&lt;10^6，0&lt;Xi&lt;10^6，0&lt;Hi&lt;10^6</p></div><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>一个整数，表示最多可以卖出的宝物数。</p></div><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><ul><li>先按X进行从小到大的排序，保证维度X是单调非递减的，然后将问题转化为求H维度的最长递增子序列；</li><li>最长递增子序列需要利用二分查找，控制时间复杂度为O(N logN)。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLargestSales</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;&amp; values)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    sort(values.begin(), values.end(), [](pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;l, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;r)</span><br><span class="line">        &#123;<span class="keyword">return</span> l.first == r.first ? l.second &lt; r.second : l.first &lt; r.first;&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.empty() || res.back() &lt;= values[i].second) &#123;</span><br><span class="line">            res.push_back(values[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> high = res.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (high + low) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (res[mid] &lt;= values[i].second)</span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            res[low] = values[i].second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; values(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; values[i].first &gt;&gt; values[i].second;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getLargestSales(values) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019小红书校招笔试题编程题C++解法及解析&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019顺丰科技校招笔试题</title>
    <link href="/2019/08/30/shunfeng/"/>
    <id>/2019/08/30/shunfeng/</id>
    <published>2019-08-30T04:32:15.000Z</published>
    <updated>2019-08-30T04:43:02.873Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>求最大非递减子序列。</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><div class="alert info no-icon"><p>直接用动态规划求解会超时，所以得用到贪心+二分查找。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = a.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt; w)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; w)</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRes</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(num.size());</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = num[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num.size(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 如果大于等于dp中最大元素，则直接插入到dp末尾</span></span><br><span class="line">        <span class="keyword">if</span> (num[i] &gt;= dp[res - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[res++] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pos = biSearch(dp, num[i]); <span class="comment">// 否则进行二分查找，插入到dp数组中，覆盖掉之前的值。</span></span><br><span class="line">            dp[pos] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; getRes(num) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>某学术会议上，一共有n个人参加，现在已知每个人会的语言（一个人可能不会任何语言）。现在有一种学习机，每一个学习机可以在会议期间使一个人暂时掌握一种自己不会的语言，问要使得任意两人都能直接或间接的交流，至少准备多少个学习机？<br>间接交流的意思是：可以通过其他参加会议的人翻译（可能会出现很多人一起帮忙翻译的情况）进行交流。如第一个人和第二个人会第一种语言，第二个人和第三个人会第二种语言，那么第一个人可以和第三个人进行交流。</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行3个数n、m、k，代表人数、语言数、已知的信息数。接下来k行，每行两个数u，v，代表第u个人会第v种语言。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出需要准备的学习机的个数</p></div><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>考察并查集知识。即求图中连通团数减1。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> res, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&amp; visited, <span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; group, </span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; vp, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; vl)</span> </span>&#123;</span><br><span class="line">    visited[idx] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> len = vp[idx].size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lan = vp[idx][i];   <span class="comment">// 第idx个人会的第i门语言lan</span></span><br><span class="line">        group[res].insert(lan); <span class="comment">// 在第res组中插入lan语言</span></span><br><span class="line">        <span class="comment">// 遍历所有会lan语言的所有人</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vl[lan].size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = vl[lan][j];</span><br><span class="line">            <span class="keyword">if</span> (visited[p] == <span class="number">0</span>)</span><br><span class="line">                dfs(p, res, visited, group, vp, vl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vp(n+<span class="number">1</span>); <span class="comment">// 人-&gt;语言</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vl(m+<span class="number">1</span>); <span class="comment">// 语言-&gt;人</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(n+<span class="number">1</span>, <span class="literal">false</span>);  <span class="comment">// 记录访问过的人</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; group(n+<span class="number">1</span>); <span class="comment">// 记录连通域内的语言  </span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t1, t2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">        vp[t1].push_back(t2);</span><br><span class="line">        vl[t2].push_back(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            dfs(i, res, visited, group, vp, vl);</span><br><span class="line">            ++res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (group[i].size() == <span class="number">0</span>)</span><br><span class="line">            ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == res)</span><br><span class="line">        ++res;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019顺丰科技校招笔试编程题C++解法及解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019京东校招笔试题</title>
    <link href="/2019/08/24/jingdong/"/>
    <id>/2019/08/24/jingdong/</id>
    <published>2019-08-24T14:37:09.000Z</published>
    <updated>2019-08-26T14:59:33.642Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>合唱队的N名学生站成一排，且从左到右编号为1到N，其中编号为i的学生身高为H<sub>i</sub>。现在将这些学生分成若干组（同一组的学生编号连续），并让每组学生从左到右按身高从低到高进行排列，使得最后所有学生同样满足从左到右身高从低到高（中间位置可以等高），那么最多能将这些学生分成多少组？</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行包含一个整数N，1&lt;=N&lt;=10<sup>5</sup>。<br>第二行包含N个空格隔开的整数H<sub>1</sub>到H<sub>N</sub>，1&lt;=H<sub>i</sub>&lt;=10<sup>9</sup>。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出能分组的最多组数</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>思路：先整体排序，然后再用滑动窗口对遍历排好序的序列和原始序列，对二者窗口内的集合进行比较，若两集合数据一样，则计数加1；否则窗口继续扩大。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxTeams</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; H)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortedH;</span><br><span class="line">    sortedH.assign(H.begin(), H.end());</span><br><span class="line">    sort(sortedH.begin(), sortedH.end());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    unoreder_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; H.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = H[i];</span><br><span class="line">        <span class="keyword">int</span> b = sortedH[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.find(a) != <span class="built_in">map</span>.end())</span><br><span class="line">            ++<span class="built_in">map</span>[a];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">map</span>[a] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.find(b) != <span class="built_in">map</span>.end())</span><br><span class="line">            --<span class="built_in">map</span>[b];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">map</span>[b] = <span class="number">-1</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.find(a) != <span class="built_in">map</span>.end() &amp;&amp; <span class="built_in">map</span>[a] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">map</span>.erase(a);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.find(b) != <span class="built_in">map</span>.end() &amp;&amp; <span class="built_in">map</span>[b] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">map</span>.erase(b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.size() == <span class="number">0</span>)</span><br><span class="line">            ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(N);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; H[i];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; getMaxTeams(H) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>某校在积极推行无人监考制度，但是总有学生是不自觉的，如果将两个很熟的异性朋友放在同一个考场里，他们就会交流甚至作弊。因此一个考场中不能允许两个很熟的异性朋友存在，学校希望通过搬出一部分学生的方法来改善这一问题。但是又因为教室数量有限，因此希望一个教室中容下的学生尽可能多，即需要搬出教室的学生数量尽可能少。请你输出搬出教室人数最少、且字典序最小的方案。</p></div><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>输出第一行有两个整数n和m，分别表示有n个男生和n个女生，有m个朋友关系。（1&lt;=n&lt;=500，1&lt;=m&lt;=100000）接下来m行，每行有两个整数，x和y，表示第x号男生和第y号女生是朋友。男生的编号均为[1,n]，女生的编号为[n+1,2n]。</p></div><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出第一行包含一个整数a，表示最少需要搬出教室的人数。<br>输出第二行有a个整数，即a个需要搬出教室的人的编号，要求人数最少，且字典序最小。</p></div><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>思路：本质是二分图最小顶点覆盖问题（即最大匹配问题，Konig定理）。详见【补充知识点】</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断二分图中x和y是否有连接</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">const</span> <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; edge, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> beg = edge.lower_bound(x);</span><br><span class="line">    <span class="keyword">auto</span> end = edge.upper_bound(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = beg; it != end; ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second == y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">augmentPath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; edge, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; Mx, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; My, <span class="keyword">int</span> IDx, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 考虑Y中所有顶点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> IDy = n + <span class="number">1</span>; IDy &lt;= <span class="number">2</span> * n; ++IDy) &#123;</span><br><span class="line">        <span class="comment">// 如果Y中顶点IDy与X中顶点IDx有连接，且没有访问过</span></span><br><span class="line">        <span class="keyword">if</span> (isConnected(edge, IDx, IDy) &amp;&amp; visited.find(IDy) == visited.end()) &#123;</span><br><span class="line">            <span class="comment">// 记录下该点已经被访问过了</span></span><br><span class="line">            visited.emplace(IDy);</span><br><span class="line">            <span class="comment">// 条件1：如果IDy没有匹配，则直接将IDy匹配给IDx；</span></span><br><span class="line">            <span class="comment">// 条件2：如果IDy匹配过了，则从IDy之前匹配过的IDx出发，找到一条增广路，但是这里已经记录IDy被访问过了。</span></span><br><span class="line">            <span class="comment">// 如果第一个条件成立，则不会发生递归调用</span></span><br><span class="line">            <span class="keyword">if</span> (My.find(IDy) == My.end() || augmentPath(n, edge, Mx, My, My[IDy], visited)) &#123;</span><br><span class="line">                Mx[IDx] = IDy;</span><br><span class="line">                My[IDy] = IDx;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMatching</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; edge, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; Mx, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; My)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 考虑X中所有顶点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> IDx = <span class="number">1</span>; IDx &lt;= n; ++IDx) &#123;</span><br><span class="line">        <span class="comment">// 从X中没有匹配的点出发寻找增广路</span></span><br><span class="line">        <span class="keyword">if</span> (Mx.find(IDx) == Mx.end()) &#123;</span><br><span class="line">            <span class="comment">// visited记录DFS算法中顶点是否访问过</span></span><br><span class="line">            res += augmentPath(n, edge, Mx, My, IDx, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由最大匹配问题转化成最小顶点覆盖问题，利用konig定理</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; getMinVertexCover(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; edge, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; Mx, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; My) &#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; nonMatchedX; <span class="comment">// 保存X中未匹配的点</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visited; </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> IDx = <span class="number">1</span>; IDx &lt;= n; ++IDx) &#123;</span><br><span class="line">        ret.emplace(IDx);</span><br><span class="line">        <span class="keyword">if</span> (Mx.find(IDx) == Mx.end())</span><br><span class="line">            nonMatchedX.push(IDx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!nonMatchedX.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = nonMatchedX.top();</span><br><span class="line">        nonMatchedX.pop();</span><br><span class="line"></span><br><span class="line">        visited.emplace(x);</span><br><span class="line">        ret.erase(x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历Y中的顶点IDy</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> IDy = n + <span class="number">1</span>; IDy &lt;= <span class="number">2</span> * n; ++IDy) &#123;</span><br><span class="line">            <span class="comment">// 如果x和IDy有连接，且IDy没有被访问过，则导入</span></span><br><span class="line">            <span class="keyword">if</span> (isConnected(edge, x, IDy) &amp;&amp; visited.find(IDy) == visited.end()) &#123;</span><br><span class="line">                visited.emplace(IDy);</span><br><span class="line">                ret.emplace(IDy);</span><br><span class="line">                <span class="keyword">if</span> (visited.find(My[IDy]) == visited.end())</span><br><span class="line">                    nonMatchedX.push(My[IDy]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="comment">//vector&lt;pair&lt;int, int&gt; &gt; edge;</span></span><br><span class="line">        <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; edge;</span><br><span class="line">        <span class="keyword">int</span> p1, p2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">            edge.emplace(p1, p2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Mx; <span class="comment">// 保存X中已经匹配的节点以及匹配到的Y中的节点</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; My; <span class="comment">// 保存Y中已经匹配的节点以及匹配到的X中的节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxMatching(n, edge, Mx, My) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">// 保存需要搬出教室的人的编号</span></span><br><span class="line">        res = getMinVertexCover(n, edge, Mx, My);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = res.begin(); it != res.end(); ++it)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>参考：<a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener">二分图的最大匹配、完美匹配和匈牙利算法</a></p><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><p>定义：简单来说，图中的点可以分为两组，并且使得所有边都跨越组的边界，这样的图就是一个二分图。</p><p>等价定义：不含有奇数条边的环的图。</p><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p><strong>匹配(Matching)</strong>：在图论中，一个匹配是是一个边的集合。其中任意两条边都没有公共顶点。</p><p><strong>最大匹配(Maximum Matching)</strong>：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。</p><p><strong>完美匹配(Perfect Matching)</strong>：如果一个图的某个匹配中，所有顶点都是匹配点，那么它就是一个完美匹配。</p><h3 id="匈牙利算法（Hungarian-Algorithm）"><a href="#匈牙利算法（Hungarian-Algorithm）" class="headerlink" title="匈牙利算法（Hungarian Algorithm）"></a>匈牙利算法（Hungarian Algorithm）</h3><p>求解最大匹配问题的一个算法。</p><p><strong>交替路</strong>：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。</p><p><strong>增广路</strong>：从一个未匹配点出发，走交替路，如果途经另一个未匹配点（出发的点不算），则这条交替路称为增广路（Augmenting Path）。</p><p>增广路的特点：非匹配边比匹配边多一条。因此，只要把增广路中的匹配边和非匹配边的身份交换即可使图中匹配边数目比原来多了1条。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。</p><p><strong>匈牙利树</strong>：一般由BFS构造。从一个未匹配点出发运行BFS（唯一的限制是必须走交替路），直至不能再扩展为止。</p><p><strong>匈牙利算法要点</strong>：</p><ul><li>从左边第1个顶点开始，挑选未匹配点进行搜索，寻找增广路。  <ul><li>如果经过一个未匹配点，说明寻找成功，更新路径信息，匹配边数+1，停止搜索；</li><li>如果一直没有增广路，则不再从这个顶点开始搜索。</li></ul></li><li>由于找到增广路后需要沿着路径更新匹配，所以我们需要一个结构来记录路径上的点。DFS版本通过函数调用隐式地使用一个栈，而BFS版本使用prev数组。</li></ul><p><strong>几个定理</strong>：</p><ul><li>定理1：最大匹配数 = 最小点覆盖数（Konig定理）</li><li>定理2：最大匹配数 = 最大独立数</li><li>定理3：最小路径覆盖数 = 顶点数 - 最大匹配数</li></ul><h3 id="Konig定理"><a href="#Konig定理" class="headerlink" title="Konig定理"></a>Konig定理</h3><p>参考：<a href="https://www.cnblogs.com/yoyoball/p/7632871.html" target="_blank" rel="noopener">【learning】二分图最大匹配的König定理</a></p><p>已知一个二分图的最大匹配数为m。</p><p><strong>定理阐释</strong>：</p><div class="alert info no-icon"><p>按照如下方式给这堆点打上标记：</p><ul><li>以右边部分所没有匹配到的点为起点，按交替路的方式遍历下去，直至不能继续走下去了；</li><li>给沿途的点全部打上标记。</li></ul><p>将<span class="highlight-text" style="background-color:#ffff00;">右边没有标记的点</span>和<span class="highlight-text" style="background-color:#ffff00;">左边有标记的点</span>组成一个点集，这个点集便是最小点覆盖点集。</p></div><p><strong>标记时交替路性质</strong>：<br>对于一条在交替路上的边(u, v)，必定满足：</p><ol><li>u,v均为标号点；</li><li>若该边为匹配边，则遍历时先走到u，再走到v，即方向为从左至右；</li><li>若该边为非匹配边，则遍历时先走到v再走到u，即方向从右至左。</li></ol><p><strong>为何这是一个点覆盖？</strong><br>首先可以把边分成两类，一类是在某条交替路上的边，一类不在。</p><ul><li>对于在交替路上的边，显然可以通过选取左边部分打上标记的点来覆盖掉。</li><li>而对于不在交替路上且没有被覆盖到的边，它在右边部分的端点一定是没有标记的。</li></ul><p><strong>点覆盖的大小为何等于m？</strong></p><ol><li>由于是交替路，并且起点在右边，所以左边的被标记的点的个数必定和交替路中匹配边的个数相等。</li><li>非交替路上的且没有覆盖到的边的右端点肯定连到的是未标记的右边的点，而右边每个未被标记的点必定会连且只会连出一条匹配边。</li><li>两者相加为得到m。</li></ol><p><strong>m为何是最小点覆盖？</strong><br>覆盖m条匹配边最少都要m个点，所以覆盖点显然无法小于这个值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019京东校招笔试题编程题的C++解法及解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019shopee校招笔试题</title>
    <link href="/2019/08/24/shopee/"/>
    <id>/2019/08/24/shopee/</id>
    <published>2019-08-24T09:55:45.000Z</published>
    <updated>2019-08-25T09:12:47.530Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>输入一个字符串计算表达式，用递归计算其正确输出结果，结果只截取整数部分。要求：字符串中每个数字只能在0-9之间，其余只能包含英文‘+’、‘-’、‘*’、‘/’四个运算符和小括号()，如有其它字符输入，统一输出“ERROR”提示。注意输入不包括空格，以Enter键作为输入结束符。</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>每次输入为一个表达式：如1+2*3-(5-4)+6/3。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出该表达式的值：如8</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p>用<span class="highlight-text" style="background-color:#ffff00;">逆波兰法</span>可解决。参考：<a href="https://blog.csdn.net/linraise/article/details/20459751" target="_blank" rel="noopener">波兰式、逆波兰式与表达式求值</a></p></li><li><p>逆波兰法：先将中缀表达式转换成后缀表达式，然后再利用后缀表达式求解。</p></li><li><p>中缀表达式转换成后缀表达式步骤：</p><ul><li>从左至右依次遍历表达式中元素；</li><li>如果当前元素是数字，直接输出；</li><li>如果当前元素是左括号，压入栈中；</li><li>如果当前元素是操作符，执行while循环：<ul><li>如果满足栈为空或栈顶元素为左括号或当前操作符优先级高于栈顶操作符优先级，将当前元素压入栈中，并退出while循环；</li><li>否则，栈顶元素出栈并输出，并继续while循环。</li></ul></li><li>如果当前元素是右括号，则栈顶元素出栈并输出，直至遇到左括号，将左括号丢弃；</li><li>遍历结束后，输出栈中所有元素。 </li></ul></li><li><p>后缀表达式求解步骤：</p><ul><li>从左至右遍历后缀表达式中元素；</li><li>如果是数字，压入栈内；</li><li>如果是操作符，从栈中取出两个数进行操作，并将结果压入栈中（出二进一）</li><li>遍历结束年，栈顶元素即为结果。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是表达式</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isExpr</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ret = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!((s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) || s[i] == <span class="string">'+'</span> || s[i] == <span class="string">'-'</span> || </span><br><span class="line">            s[i] == <span class="string">'*'</span> || s[i] == <span class="string">'/'</span> || s[i] == <span class="string">'('</span> || s[i] == <span class="string">')'</span>)) &#123;</span><br><span class="line">            ret = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是操作符</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (op == <span class="string">'+'</span> || op == <span class="string">'-'</span> || op == <span class="string">'*'</span> || op == <span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回运行符的优先级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">'*'</span> || op == <span class="string">'/'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'+'</span> || op == <span class="string">'-'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中缀表达式转换成后缀表达式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">infix2Suffix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src, <span class="built_in">string</span>&amp; dst)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; src.size(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 如果是数字，直接输出</span></span><br><span class="line">        <span class="keyword">if</span> (src[i] &lt;= <span class="string">'9'</span> &amp;&amp; src[i] &gt;= <span class="string">'0'</span>)</span><br><span class="line">            dst += src[i];</span><br><span class="line">        <span class="comment">// 如果是左括号，压入栈中</span></span><br><span class="line">        <span class="keyword">if</span> (src[i] == <span class="string">'('</span>)</span><br><span class="line">            s.push(src[i]);</span><br><span class="line">        <span class="comment">// 如果是操作符</span></span><br><span class="line">        <span class="keyword">while</span> (isOperator(src[i])) &#123;</span><br><span class="line">            <span class="comment">// 当栈为空或栈顶为左括号或当前操作符优先级高于栈顶操作符优先级时，压入栈中，并退出while循环</span></span><br><span class="line">            <span class="keyword">if</span> (s.empty() || s.top() == <span class="string">'('</span> || priority(src[i]) &gt; priority(s.top())) &#123;</span><br><span class="line">                s.push(src[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则，将栈顶元素出栈，并继续while循环</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dst += s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是右括号，则不停地执行出栈操作直至栈顶元素为左括号，最后丢弃掉左括号</span></span><br><span class="line">        <span class="keyword">if</span> (src[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (src[i] != <span class="string">'('</span>) &#123;</span><br><span class="line">                dst += s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历结束后将栈中剩下元素输出</span></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        dst += s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> dst;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    infix2Suffix(src, dst);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dst.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dst[i] &lt;= <span class="string">'9'</span> &amp;&amp; dst[i] &gt;= <span class="string">'0'</span>)</span><br><span class="line">            s.push(dst[i] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">int</span> b = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (dst[i] == <span class="string">'+'</span>)</span><br><span class="line">                c = b + a;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dst[i] == <span class="string">'-'</span>)</span><br><span class="line">                c = b - a;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dst[i] == <span class="string">'*'</span>)</span><br><span class="line">                c = b * a;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dst[i] == <span class="string">'/'</span>)</span><br><span class="line">                c = b / a;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> expr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; expr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isExpr(expr))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; getResult(expr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019shopee校招笔试题第三题C++解法及解析&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019依图内推第二批笔试题</title>
    <link href="/2019/08/23/yitu/"/>
    <id>/2019/08/23/yitu/</id>
    <published>2019-08-23T14:35:36.000Z</published>
    <updated>2019-08-23T14:45:25.864Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>在狸星数字里，数字1到9被表示为：’I’、’II’、’III’、’IV’、’V’、’VI’、’VII’、’VIII’、’IX’，数字10、20、30、40、50、60、70、80、90被表示为’X’、’XX’、’XXX’、’XL’、’L’、’LX’、’LXX’、’LXXX’、’XC’。</p><p>任何小于100的正整数都可以通过这样的方式转成狸星数字：将个位数和十位数拆开，分别转成狸星数字再合起来，十位在左个位在右。</p><p>你的任务：给出一个小于100的狸星数字，将其中的字母重新排列，使得重排后的结果仍然是一个合法的狸星数字，且使其尽可能小。</p></div><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>一行，一个大写字母表示的合法狸星数字，且为小于100的正整数。</p></div><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>一行，最小的重新排列后的狸星数字。</p></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>思路：直接用暴力dfs将所有的情况罗列出来，然后再进行比较。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; numMap&#123; </span><br><span class="line">    &#123; <span class="string">"I"</span>,  <span class="number">1</span> &#125;,  &#123; <span class="string">"II"</span>, <span class="number">2</span> &#125;, &#123; <span class="string">"III"</span>,  <span class="number">3</span> &#125;, &#123; <span class="string">"IV"</span>, <span class="number">4</span> &#125;, &#123; <span class="string">"V"</span>, <span class="number">5</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"VI"</span>, <span class="number">6</span> &#125;, &#123; <span class="string">"VII"</span>, <span class="number">7</span> &#125;, &#123; <span class="string">"VIII"</span>, <span class="number">8</span> &#125;, &#123; <span class="string">"IX"</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"X"</span>,  <span class="number">10</span> &#125;, &#123; <span class="string">"XX"</span>, <span class="number">20</span> &#125;,&#123; <span class="string">"XXX"</span>,  <span class="number">30</span> &#125;,&#123; <span class="string">"XL"</span>, <span class="number">40</span> &#125;,&#123; <span class="string">"L"</span>, <span class="number">50</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"LX"</span>, <span class="number">60</span> &#125;,&#123; <span class="string">"LXX"</span>, <span class="number">70</span> &#125;,&#123; <span class="string">"LXXX"</span>, <span class="number">80</span> &#125;,&#123; <span class="string">"XC"</span>, <span class="number">90</span> &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定猩星数字，返回阿拉伯数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; num)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> digit = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> curNum = <span class="number">100</span>; <span class="comment">// 如果不满足狸星数字的条件，则返回100</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; num.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[i] != <span class="string">'I'</span> &amp;&amp; num[i] != <span class="string">'V'</span>) <span class="comment">//十位与个位的分界线一定是'V'或'I'</span></span><br><span class="line">            digit += num[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numMap.find(num) != numMap.end())</span><br><span class="line">            curNum = numMap[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">string</span> unit = num.substr(i, num.size());</span><br><span class="line">        <span class="keyword">if</span> (numMap.find(digit) != numMap.end() &amp;&amp; numMap.find(unit) != numMap.end())</span><br><span class="line">            curNum = numMap[unit] + numMap[digit];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = s[i];</span><br><span class="line">    s[i] = s[j];</span><br><span class="line">    s[j] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全排列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fullArray</span><span class="params">(<span class="built_in">string</span>&amp; num, <span class="keyword">int</span> idx, <span class="built_in">string</span>&amp; minStr, <span class="keyword">int</span>&amp; minNum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (idx &gt;= num.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = getNum(num);</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; minNum) &#123;</span><br><span class="line">            minNum = tmp;</span><br><span class="line">            minStr = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; num.size(); ++i) &#123;</span><br><span class="line">        swap(num, i, idx);</span><br><span class="line">        fullArray(num, idx + <span class="number">1</span>, minStr, minNum);</span><br><span class="line">        swap(num, i, idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; num) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = getNum(num);</span><br><span class="line">        <span class="keyword">int</span> minNum = cur;</span><br><span class="line">        <span class="built_in">string</span> minStr = num;</span><br><span class="line"></span><br><span class="line">        fullArray(num, <span class="number">0</span>, minStr, minNum);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; minStr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div class="alert info no-icon"><p>小依每天下班后都会玩骰子来放松心情，小依一共有n个骰子，每个骰子有6面，每一个面上都有一个数字，一个骰子的6个面上的数字互不相同。现在小依想知道，小依可以任意让每个骰子的某一面朝上，n个骰子有多少种组合方式使得所有骰子向上的面上的数字加起来的和等于k。</p><p>注意：如果有两个骰子，（第一个骰子数字2向上，第二个骰子数字3向上）和（第一个骰子数字3向上，第二个骰子数字2向上）算两种不同的组合方式。</p></div><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><div class="alert info no-icon"><p>第一行输入为n和k，n表示小依的骰子数（1&lt;=n&lt;=14），k如题目描述所示，接下来的n行每行有6个正整数，每个数字的大小不超过100。</p></div><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><div class="alert info no-icon"><p>输出一个正整数表示答案</p></div><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>思路一：暴力dfs，时间复杂度较高，牛客上通过率仅为70%。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursive</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; vec, <span class="keyword">int</span>&amp; cnt , <span class="keyword">int</span> curCnt, <span class="keyword">int</span> curIdx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (curIdx == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curCnt == k)</span><br><span class="line">            ++cnt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curCnt &gt;= k)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> curVal = vec[curIdx][i];</span><br><span class="line">        curCnt += curVal;</span><br><span class="line">        recursive(n, k, vec, cnt, curCnt, curIdx + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; data(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        recursive(n, k, data, cnt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路二：动态规划<ul><li>dp[i][j]表示前i个骰子向上那面数字之和为j的组合数</li><li>状态转换方程：</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;<span class="number">6</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> curVal = data[i<span class="number">-1</span>][p];</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=curVal)</span><br><span class="line">        dp[i][j] += dp[i<span class="number">-1</span>][j-curVal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路二代码实现：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; data(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;dp.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;dp[i].size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;<span class="number">6</span>; p++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> curVal = data[i<span class="number">-1</span>][p];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=curVal)</span><br><span class="line">                        dp[i][j] += dp[i<span class="number">-1</span>][j-curVal];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019依图内推第二批笔试题C++解法及解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019拼多多学霸批第二批笔试题</title>
    <link href="/2019/08/16/pinduoduo/"/>
    <id>/2019/08/16/pinduoduo/</id>
    <published>2019-08-16T09:20:53.000Z</published>
    <updated>2019-08-16T09:51:52.779Z</updated>
    
    <content type="html"><![CDATA[<p>2019拼多多学霸批第二批笔试题第三题C++解法及解析。</p><a id="more"></a><p>参考：<a href="https://blog.csdn.net/h2453532874/article/details/99250644" target="_blank" rel="noopener">2019 拼多多校招第三题sum 服务端研发工程师</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><div class="alert info no-icon"><p>给定两个正整数N和S，你需要找出所有的长度为N的正整数数列中，满足单调递增以及总和为S的数列有多少个。</p></div><h1 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h1><div class="alert info no-icon"><p>共一行，两个整数N和S（1 &lt; N, S &lt; 1000）。</p></div><h1 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h1><div class="alert info no-icon"><p>一个整数，为满足条件的数列个数对100000007取模的结果。</p></div><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li>最佳解法：动态规划，这里用vec[n][s]表示和为s长度为n的序列个数。</li><li>状态转换方程：<code>vec[n][s] = vec[n][s-n] + vec[n-1][s-n]</code></li><li>解释：<ul><li>vec[n][s-n]：表示和为s-n的长度为n的序列个数（把它们都加上1，便成了开头数字为非1且和为s的长度为n的序列个数）；</li><li>vec[n-1][s-n]：表示开头数字为非1，和为s-n的长度为n-1的序列个数（把它们都加上1，然后在序列开头加入1，便成了开头数字为1且和为s的长度为b的序列个数）。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCnt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; N, <span class="keyword">const</span> <span class="keyword">int</span>&amp; S, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec[N][S] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= S; ++j)</span><br><span class="line">            vec[i][j] = (vec[i][j-i] + vec[i<span class="number">-1</span>][j-i]) % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, S;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; S) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vec(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(S + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; ++i)</span><br><span class="line">            vec[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        getCnt(N, S, vec);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[N][S] % <span class="number">1000000007</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019拼多多学霸批第二批笔试题第三题C++解法及解析。&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="笔试" scheme="/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：手撕代码</title>
    <link href="/2019/08/15/handCode/"/>
    <id>/2019/08/15/handCode/</id>
    <published>2019-08-15T14:51:09.000Z</published>
    <updated>2019-08-22T14:54:41.583Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="手撕代码"><a href="#手撕代码" class="headerlink" title="手撕代码"></a>手撕代码</h2><ol><li><span id="Q03-1"></span>给定一个数字数组，建立哈夫曼树，返回哈夫曼树的头指针</li><li>最长公共连续子序列</li><li>手写一个排序算法吧，要不就快排吧</li><li>去掉字符串中的空格空格</li><li>最长回文字符串</li><li>链表合并</li><li>[0, n), n个数，范围[0, n-1], 求是否有重复方法</li><li>求第k大的数的方法以及各自的复杂度</li><li>当有相同元素时，求第k大的元素的方法（类似快排，手撕）</li><li>给你一个数组，再给你几对数，这几对数只能够同时出现或者不同时出现，求拿出k个数的可能性（true or false）（手撕，dfs标号+dp）</li><li>实现一个买票系统：实现买票，退票，检票。给一个小时，手撕，文件流+map搞一下就行了，API之类的可以百度。</li><li>数据流，如何获取中位数，复杂度</li><li>一到一百万的素数，怎么快速求</li><li>有一堆数，再给你很多对数，每对数都在同一个组，求一共有多少组数</li><li>有很多蜡烛，每根蜡烛1个小时，求15分钟怎么计时</li><li>十六进制转十进制</li><li>1/x + 1/y = 1/n<br>求最小的n，使得对数超过1000</li><li>如何求前100大的数</li><li>栈实现队列，队列实现栈</li><li>手撕：求一个集合的所有子集，递归实现，非递归实现</li><li>去除包含4的数字，求一个数字是第几个数，比如5是第四个数（数位dp）</li><li>有一个楼梯，一共有n层，可以走a步，也可以走b步，问最高能走到哪里？（dp,O(n)）。增加一个条件，有一次条件可以回退一半，比如本来在第8层，可以有一次机会直接到第4层。(两次dp，O(n))</li><li>一个数组，里面大多数都是成对的，只有两个数没有成对，求这两个数（异或搞一下，把数组分成两组）</li><li>求一个栈的pop序是否合法。</li><li>int to string，string to int。</li><li>反转链表</li><li>大数相乘</li><li>char *s1, const char *s2，删除s1中s2出现过的字符</li><li>删除单项链表中重复的节点 (1 2 2 3 3 9) -&gt; (1 2 3 9)</li><li>求二叉树的深度</li><li>单链表判环</li><li>判断一个数是不是回文数</li><li>求一个数组的最长连续子序列</li><li>有两个链表，怎么求交点？</li><li>一万个数，求前100大的数</li><li>假设有一个排好序的数组，数字都是两个两个出现的，只有一个是单独出现的，求这个数</li><li>链表翻转（递归，非递归）</li><li>判断一颗树是不是二叉搜索树</li><li>给出1000000条数据，每次请求查询时怎么最快，要想好多种方法红黑树，hash然后一直问有没有其他的</li><li>之字形打印二叉树</li><li>两个有序数组求交集</li><li>无序数组求交集 hash</li><li>二分查找中位数 复杂度分析</li><li>memcpy 函数  怎么实现的，有没有比memcpy更快的</li><li>判断一个点是不是在三角形内</li><li>求每一个元素右边第一个最大元素</li><li>单调栈解法，分析O(N)</li><li>出一个连续数组，找出一个连续子集中所有元素中最小元乘以加和最大值</li><li>求一个非递减数组中，绝对值不同的个数 O(N ) O(1)空间</li><li>字符串翻转</li><li>叙述一下洗牌算法</li><li>怎么判断一个数是二的倍数，怎么求一个数中有几个1</li><li>手写strcpy函数</li><li>已知最大数为M的递增子序列求所有和为s的子集合 </li><li>两个大的数据集装入的数据是无重复的，求交集 </li><li>kmp</li><li>多重背包，0/1背包</li><li>字符串转double的代码</li><li>写点代码写了构造函数、复制构造、复制操作、移动构造、移动操作。</li><li>二叉排序树的插入、删除，删除没写完</li><li>给定前序遍历ABC后序遍历CBA，求中序遍历是什么，画出来两种情况</li><li>前序、中序和后续遍历，递归和非递归</li><li>50 亿个整数中， 找一个确定的数？  有内存限制， 并且无序</li><li>给你一个字符串，找出第一个不重复的字符，如“abbbabcd”，则第一个不重复就是c</li><li>给你两个球，100层楼，每个球在一定高度扔下去会碎，怎么用最少的次数给判断是几层楼能把求摔碎？</li><li>n个整数的无序数组，找到每个元素后面比它大的第一个数，要求时间复杂度为O(N)，在面试官提醒下写出来了，用栈+栈底指针</li><li>讲述一下堆排序</li><li>归并排序</li><li>给定一个链表，输入n，删除从结尾开始的第 n 个节点</li><li>给定一个数组，删除数组连续重复的元素，生成一个新数组</li><li>给定一个无序数列，输出该序列中出现频率前 k 多的数</li><li>八数码问题</li><li>求两个链表的交点；(tips：①判环，②求环的入口，③如果两个链表都有环，判断入口是否相同，共5种拓扑结构)</li><li>二维平面有n个点，求一条直线，使最多的点落在该直线上，三维呢？</li><li>不同排序各有优势让我实现一个通用排序库，</li><li>快排与归并的优劣势</li><li>给两个字符串A,B，判断B是否是A的子序列</li><li>.给两个字符串A,B,找到在B中所有字母在A中出现的下标</li><li>给一个字符串A，N次询问，每次问字符串B是否是A的子序列</li><li>一个有环的单链表，如何找到环结点</li><li>给一个字符串，将字符串中的单词从后向前翻转，手写代码</li><li>A[50]50个数,B[49]49个数，数字取值范围[0,49]，找出A中多出来的一个数字</li><li>一个平面，100个点，求一条直线，经过的点最多，给个思路就行</li><li>给你一个50亿的整数让你找出中位数. </li><li>最大连续子数组的和</li><li>1、给1亿个数，求字典序第K（k&lt;1亿）大的数（字典树）</li><li>2、链表拆分，翻转，合并  如 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6  变为1-&gt;6-&gt;2-&gt;5-&gt;4-&gt;3 </li><li>树转单链表（前序）</li><li>旋转数组查找</li><li>求后面第一个比当前数大的数</li><li>数组两两元素求异或，求最大的异或值（01字典树）</li><li>n个有序链表，合并成一个</li><li>字符串A,B，在A中删除B中出现过的字符</li><li>二叉树知道后序中序求前序遍历</li><li>100万数据找top k，判断一个数是不是2的幂，两个单链表有公共节点，找出第一个。</li><li>一颗二叉搜索树，找出树中的第k大节点</li><li>将字符串转化为整型</li><li>给你两个有序数组，找中位数</li><li>m个有序数组合并后输出前K个数</li><li>二叉树的最小公共结点</li><li>m个有序数组合并后输出第k个数（二分）</li><li>手写代码，计算一个整数二进制中0的个数。</li><li>有一支股票，知道每天的价格，本金一定，只准买卖一次，问如何做到收益最大。</li><li>给定几个互不相同的数字组成的一个字符串，输出同样由这几个数字组成的，字典序恰好比它大1的字符串。</li><li>(s,n)表示字符串s反复出现n次；s-&gt;t表示s去掉若干字符之后能成为t；给定S1与S2，求最大的m使得S1-&gt;(S2,m)</li><li>给定一些正整数(1,3,4,5,7)，输入一个n，输出最少用多少个给定的数能加出n来。</li><li>一个整数序列，A和B两个人轮流取数，每次只能取最左的数或最右的数，两个人都想使自己的和尽可能大，问给定序列以后A和B能取到的和各是多少。</li><li>给定字符串s，输出第一个满足：在s中恰好出现3次的字母。保证存在这样的字母且字符串都是小写字母组成。</li><li>手撕代码，二叉树两个节点最长路径</li><li>两个有序数组合并，n个有序数组合并</li><li>int数组求最大子串和、二维、三维、四维呢</li></ol><h2 id="其他算法题"><a href="#其他算法题" class="headerlink" title="其他算法题"></a>其他算法题</h2><ol><li>有一户家庭，生了两个娃，其中一个是女孩，另外一个是女孩的概率</li><li>一副扑克牌，怎么实现随机打乱？</li><li>假设有两个数组，各有十万数量级的整数，如何求交集？</li><li>个人项目的benchmark性能测试结果如何</li><li>有100个弹珠，双方轮流拿，每个人只能拿1~5个，无法拿的人输，必胜解法。</li><li>求char a数组中有的元素和char b数组中没有的元素，放到char c数组。这里我忘记把char字符转成unsigned char类型。</li><li>windows消息机制知道吗？系统怎么知道   。。MFC消息机制</li><li>1000瓶水有1瓶水有毒，老鼠喝一滴就会死，但是需要一周毒发，请问最少需要多少老鼠多少时间才能找到那瓶有毒的水。答案是10只老鼠1周，解法是十进制转二进制</li><li>桶中取球排列组合问题</li><li>40亿个QQ号，4GB的空间，O(1)的时间，这个时候新来了一个QQ号，判断这个QQ号是否存在</li><li>个非常拥堵的路口，让你分析拥挤原因，并且提供解决方案</li><li>高德地图是怎么知道高速路哪里堵车了，并且还能标记出来准确的路段？ 提出你的设想.</li><li>如果让你统计出这个城市当中的交通信息，比如说那几个路口每天多少车左转，多少车右转，你怎么做？</li><li>MFC消息怎么定义 x 太久没写忘记了，就记得个声明和绑定函数</li><li>做个数学题吧，一副扑克牌取5张，出现顺子的概率，大小王能任意当成什么牌</li><li>8个球找重量不一样的一个怎么称 </li><li>36匹马6个跑道无秒表选前三，最少跑几轮</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之手撕代码&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：操作系统</title>
    <link href="/2019/08/15/operationSystems/"/>
    <id>/2019/08/15/operationSystems/</id>
    <published>2019-08-15T14:26:57.000Z</published>
    <updated>2019-08-22T14:45:04.671Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ol><li>系统中断是什么，用户态和内核态的区别</li><li>PCB内存布局</li><li>虚拟内存和物理内存怎么对应</li><li>操作系统中内存块以何种数据结构构成</li></ol><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><ol><li><span id="Q07-1"></span>用过多线程吗，以前的多线程代码还能怎么优化，线程池的实现。<a href="#A07-1">答案</a></li><li><span id="Q07-2"></span>单核机器上写多线程程序，是否需要考虑加锁，为什么？<a href="#A07-2">答案</a></li><li><span id="Q07-3"></span>线程需要保存哪些上下文，SP、PC、EAX这些寄存器是干嘛用的。<a href="#A07-3">答案</a></li><li><span id="Q07-4"></span>线程间的同步方式，最好说出具体的系统调用。<a href="#A07-4">答案</a></li><li><span id="Q07-5"></span>进程与线程什么意思，为什么要有进程线程，其中有什么区别，他们各自怎么同步的。<a href="#A07-5">答案</a></li><li><span id="Q07-6"></span>多进程和多线程的使用场景。<a href="#A07-6">答案</a></li><li><span id="Q07-7"></span>死锁，如何解决死锁？<a href="#A07-7">答案</a></li><li><span id="Q07-8"></span>进程间通讯方式。<a href="#A07-8">答案</a></li><li><span id="Q07-9"></span>怎么保证一个CPU只有一个线程运行？</li><li><span id="Q07-10"></span>线程的基本组成是什么？<a href="#A07-10">答案</a></li><li><span id="Q07-11"></span>线程有什么状态？运行挂起结束状态，有新生状态吗？<a href="#A07-11">答案</a></li><li><span id="Q07-12"></span>守护进程、僵尸进程、孤儿进程，守护进程的作用是什么？<a href="#A07-12">答案</a></li><li><span id="Q07-13"></span>协程是什么？<a href="#A07-13">答案</a></li><li><span id="Q07-14"></span>进程的状态？<a href="#A07-14">答案</a></li></ol><h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><h2 id="操作系统-1"><a href="#操作系统-1" class="headerlink" title="操作系统"></a>操作系统</h2><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><ol><li><span id="A07-1"><ul><li>为何需要线程池：频繁的创建和销毁线程会大大地浪费时间和效率，更浪费内存。线程池便是针对这一问题而设计的。可以很好地解决线程的重复利用，避免重复开销。</li><li>线程池的优点：<ul><li>线程是稀缺资源，使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以重复使用；</li><li>可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存导致服务器崩溃。</li></ul></li><li>线程池的风险：<ul><li>死锁</li><li>资源不足：除了线程对象所需的内存之外，每个线程都需要两个可能很大的执行调用堆栈。如果线程池太大，那么被那些线程消耗的资源可能严重地影响系统性能。</li><li>并发错误：线程保存空闲状态，尽管队列中有工作要处理；</li><li>线程泄漏：当从池中除去一个线程以执行一项任务，而在任务完成后该线程却没有返回池时，会发生线程泄漏。</li><li>请求过载：仅仅是请求就压垮了服务器。解决：在某些情况下，可以简单地抛弃请求，依靠更高级别的协议稍后重试请求；也可以用一个指出服务器暂时很忙的响应来拒绝请求。<br><a href="#Q07-1">返回原题</a></li></ul></li></ul></span></li></ol><ol start="2"><li><span id="A07-2"><ul><li>单核CPU跑多线程程序，也需要加线程锁。理由如下：<ul><li>时间片的大小不定：比如单个时间片只能完成给定任务的一半，剩下的那一半就是只有等下一个时间片了。而在等待的过程中，如果不加锁，就没法保证其他线程不使用我们的资源，数据就有可能出错；</li><li>给线程分配时间片的时机不确定：比如有a、b、c三个进程，a、c使用了共享的资源。如果前十个时间片都集中在a、b上，那么很有可能时间片分给c的时候，a已经完成了工作，因此它也不需要和c争夺资源了。如果a、c的优先级比b高，那么时间片可能大部分分配在a、c上，这个时候a、c就要疯狂争夺资源了。<br><a href="#Q07-2">返回原题</a></li></ul></li></ul></span></li></ol><ol start="3"><li><span id="A07-3"><ul><li>线程切换时需要保存当前线程ID、线程状态、堆栈、寄存器状态等信息。其中寄存器主要包括SP、PC、EAX等寄存器。</li><li>SP（Stack Pointer）：堆栈指针，指向当前栈的栈顶地址；</li><li>PC（Program Counter）：程序计数器，存储下一条将要执行的指令；</li><li>EAX（Extended Accumulator Register）：累加寄存器，用于加法乘法的缺省寄存器。<br><a href="#Q07-3">返回原题</a></li></ul></span></li></ol><ol start="4"><li><span id="A07-4"><ul><li>互斥锁（mutex）：用来保证同一时间内只有一个线程在执行某段代码（临界区）。在同一时刻只能有一个线程掌握某个互斥锁，拥有上锁状态的线程能够对共享资源进行操作。若其他线程希望上锁一个已经被上锁的互斥锁，则该线程就会挂起，直到上锁的线程释放掉互斥锁为止。主要包含以下基本函数：<ul><li>互斥锁初始化：pthread_mutex_init()；</li><li>互斥锁上锁：pthread_mutex_lock()；</li><li>互斥锁判断上锁：pthread_mutex_trylock()；</li><li>互斥锁解锁：pthread_mutex_unlock()；</li><li>消除互斥锁：pthread_mutex_destroy()。</li></ul></li><li>信号量（semaphore）：和mutex类似，表示可用资源数量，不同的是这个数量可以大于1。步骤为 信号量初始化-&gt;等待信号量-&gt;释放信号量-&gt;销毁信号量；</li><li>条件变量（cond）：与互斥锁结合使用，是用来等待而非上锁的。它用于阻塞线程等待某个事件的发生，并且当等待的事件发生时，阻塞线程会被通知。步骤为：初始化条件变量-&gt;等待条件成立-&gt;激活条件变量-&gt;清除条件变量。</li><li>读写锁（reader-writer lock）：也称共享互斥锁。有三种状态：读模式下加锁状态、写模式下加锁状态、不加锁状态。一次只能有一个线程可以占有写模式的读写锁，但可以有多个线程同时占有读模式的读写锁。因此与互斥量相比，读写锁允许有更高的并行性。</li><li>临界区（critical section）：主要用于同步控制；</li><li>临界区和互斥体的区别：<ul><li>临界区只能用于本进程内的线程，而不可用来同步多个进程中的线程；互斥量、信号量、事件都可以跨越进程使用来进行同步数据操作；</li><li>临界区是非内核对象，只在用户态进行锁操作，速度快；互斥体是内核对象，在核心态进行锁操作，速度慢。<br><a href="#Q07-4">返回原题</a></li></ul></li></ul></span></li></ol><ol start="5"><li><span id="A07-5"><ul><li>进程和线程的区别：<ul><li>进程是资源分配的最小单位，线程是CPU调度的最小单位。</li><li>进程有独立的地址空间，在保护模式下，一个进程崩溃后不会影响其他进程。而线程只是一个进程中的不同执行路径，线程有自己的堆栈和局部变量，但没有独立的地址空间，一个线程崩溃就等于整个进程崩溃。所以多进程的程序要比多线程的程序更加健壮。</li><li>进程切换时，耗费资源大，效率要比线程低；</li><li>一个程序至少要有一个进程，一个进程至少要有一个线程；</li><li>线程的划分尺度小于进程，因此多线程程序的并发性更高；</li><li>由于多个线程共享内存单元，从而极大地提高了程序的运行效率；</li><li>在执行过程中，每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制；</li></ul></li><li>多进程同步（以下是Linux系统的，Windows系统相比少了一个信号）：<ul><li>管道（pipe）：用于父子进程间的通信；</li><li>信号（signal）：进程间传递信号，捕获到信号后执行对应绑定的代码，和QT的信号槽类似。</li><li>信号量（semaphore）：本身无法传递数据，配合共享内存使用，类似于线程中的锁，用于保护临界资源；</li><li>共享内存（shared memory）：进程间最常见的数据同步方式，与信号量配合使用；</li><li>消息队列（message）：把数据放入队列，内核逐一处理发送至目的线程；</li><li>套接口（socket）：可用于不同机器之间的进程间通信</li></ul></li><li>多线程同步：<a href="#A07-4">参考上题</a>　　<br><a href="#Q07-5">返回原题</a></li></ul></span></li></ol><ol start="6"><li><span id="A07-6"><ul><li>多进程的优点：<ul><li>编程相对容易，无需考虑锁和同步资源的问题；</li><li>更强的容错性：一个进程崩溃了不会影响其他进程；</li><li>有内核保证的隔离：数据和错误隔离；</li></ul></li><li>多进程案例：<ul><li>Chrome浏览器、redis、nginx；</li></ul></li><li>多线程的优点：<ul><li>创建速度快；</li><li>数据共享更加高效：多线程共享同一虚拟地址空间；</li><li>轻松的上下文切换开销：不用切换地址空间、不用更改寄存器、不用刷新TLB；</li><li>提供非均质的服务：如果全都是计算任务，但每个任务的耗时不都为1s，而是1ms-1s之间波动；这样，多线程相比多进程的优势就体现出来，它能有效降低“简单任务被复杂任务压住”的概率。</li></ul></li><li>多线程案例：<ul><li>桌面软件：响应用户输入的是一个线程，后台程序处理是另外的线程<br><a href="#Q07-6">返回原题</a></li></ul></li></ul></span></li></ol><ol start="7"><li><span id="A07-7"><ul><li>死锁：进程死锁的简称。是指两个或两个以上的进程在执行过程中，以至于竞争资源或由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</li><li>造成死锁的必要条件：<ul><li>互斥条件：一个资源每次只能被一个线程使用；</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</li><li>不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺；</li><li>循环等待条件：若干线程之间形成一种首尾相接的循环等待资源关系。</li></ul></li><li>避免死锁：破坏产生死锁的4个必要条件之一便可以避免死锁。<br><a href="#Q07-7">返回原题</a></li></ul></span></li></ol><ol start="8"><li><span id="A07-8"><ul><li>Linux系统进程间的通信方式：管道（pipe）、信号（signal）、消息队列（Message）、共享内存（shared memory）、信号量（semaphore）、套接字（socket）。</li><li>Windows系统进程间的通信方式：管道（pipe）、信号（signal）、互斥量（mutex）、共享内存（shared memory）、套接字（socket）。<br><a href="#Q07-8">返回原题</a></li></ul></span></li></ol><ol start="10"><li><span id="A07-10"><ul><li>线程ID：ID在本进程中是唯一的，用于标识线程；</li><li>当前指令指针（PC）</li><li>寄存器集合：由于线程是并发执行的，每个线程有自己不同的运行线索，当从一个线程切换到另一个线程上时，必须将原有线程的寄存器集合的状态进行保存，以便将来该线程在被重新切换时能得以恢复；</li><li>堆栈：堆栈是保证线程独立运行所必须的。线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影响。一个进程的线程共享堆区。<br><a href="#Q07-10">返回原题</a></li></ul></span></li></ol><ol start="11"><li><span id="A07-11"><ul><li>状态：<ul><li>新建（New）：创建后尚未启动的线程状态；</li><li>运行（Runable）：包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间；</li><li>无限期等待（Waiting）：处于这种状态的线程不会被分配CPU执行时间，它们要等待被其他线程显式地唤醒；</li><li>限期等待（Time Waiting）：处于这种状态的线程不会被分配CPU执行时间，不会必须被其他线程显式地唤醒，在一定时间后它们会由操作系统自动唤醒；</li><li>阻塞（Blocked）：线程被阻塞了，等待着获取一个排它锁，这个事件将在另一个线程放弃这个锁的时候发生；而等待状态则是在等待一段时间，或者唤醒的发生，在程序等待进入同步区域时，线程将进入这种状态；</li><li>线束（Terminated）：已终止的线程状态，线程已经结束执行。<br><a href="#Q07-11">返回原题</a></li></ul></li></ul></span></li></ol><ol start="12"><li><span id="A07-12"><ul><li>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。所以孤儿进程不会对系统造成危害；</li><li>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称为僵尸进程。<ul><li>危害：如果大量地产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。</li><li>解决：将父进程杀死，所有僵尸进程变为孤儿进程，被init收养，然后被释放资源；父进程对子进程进行wait()或waitpid()调用来释放其所占有资源。</li></ul></li><li>守护进程：是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务。<ul><li>常见的守护进程：日志进程syslogd、web服务器httpd、邮件服务器sendmail和数据库服务器mysqld等。</li><li>特点：一个守护进程的父进程是init进程，命名通常以d结尾；一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行；守护进程通常以root权限运行。<br><a href="#Q07-12">返回原题</a></li></ul></li></ul></span></li></ol><ol start="13"><li><span id="A07-13"><ul><li>协程（Coroutines）：是一种比线程更加轻量级的存在。一个线程可以拥有多个协程。协程不是被操作系统内核所管理，而完全是由程序所控制，即在用户态执行。</li><li>使用协程的好处：性能得到了很大提升，不会像线程切换那样消耗资源。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。</li><li>Python：可以通过yield/send的方式实现协程。python3.5后，async/await成为了更好的替代方案。<br><a href="#Q07-13">返回原题</a></li></ul></span></li></ol><ol start="14"><li><span id="A07-14"><ul><li>参考：<a href="https://blog.csdn.net/qicheng777/article/details/77427157" target="_blank" rel="noopener">进程状态（含状态变迁图）</a></li><li>三态模型：<ul><li>就绪：当一个进程获得了除处理器以外的一切所需资源，一旦得到处理器即可运行，则称此进程处理就绪状态。</li><li>运行：当一个进程正在处理器上运行时，则称该进程处于运行状态。</li><li>阻塞：也称等待或睡眠状态，一个进程正在等待某一事件发生，而暂时停止运行。这时即使把处理器分配给进程也无法运行，故称该进程处于阻塞状态。</li></ul></li><li>五态模型：新增新建态和终止态<ul><li>新建态：对于进程刚刚被创建时没有被提交的状态，并等待系统完成创建进程的所有必要信息。进程正在创建过程中，还不能运行。</li><li>终止态：进程已结束运行，回收除进程控制块之外的其他资源，并让其他进程从进程控制块中收集有关信息。<br><a href="#Q07-14">返回原题</a></li></ul></li></ul></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之操作系统&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：计算机网络</title>
    <link href="/2019/08/15/networks/"/>
    <id>/2019/08/15/networks/</id>
    <published>2019-08-15T14:26:37.000Z</published>
    <updated>2019-08-22T14:44:53.847Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li><span id="Q04-1"></span>TCP的模型，状态转移</li><li><span id="Q04-2"></span>HTTP和HTTPS的区别，HTTPS有什么特点，带来的好处和坏处，怎么实现的？<a href="#A04-2">答案</a> </li><li><span id="Q04-3"></span>TCP 讲了一遍，讲 Segment 中的每个字段是如何为 TCP 面向连接、可靠的流式服务提供支持的</li><li><span id="Q04-4"></span>TCP怎么保证可靠性，以及画一下建立连接和断开连接的过程，发了什么？<a href="#A04-4">答案</a> </li><li><span id="Q04-5"></span>讲讲TCP为什么是三次握手，四次挥手？<a href="#A04-5">答案</a> </li><li><span id="Q04-6"></span>讲讲浏览器输入地址后发生的全过程．（每一个细节都讲）<a href="#A04-6">答案</a> </li><li><span id="Q04-7"></span>http请求报文和应答报文的格式（三块）</li><li><span id="Q04-8"></span>http返回码。<a href="#A04-8">答案</a> </li><li><span id="Q04-9"></span>ip地址有什么用，ip地址和mac地址。<a href="#A04-9">答案</a> </li><li><span id="Q04-10"></span>OSI七层模型和TCP/IP四层模型，每层列举2个协议。<a href="#A04-10">答案</a></li><li><span id="Q04-11"></span>DNS</li><li><span id="Q04-12"></span>拥塞控制。<a href="#A04-12">答案</a></li><li><span id="Q04-13"></span>UDP模拟TCP</li><li><span id="Q04-14"></span>客户端向服务器发3个包，基于TCP和UDP的服务器会收到几个？</li><li><span id="Q04-15"></span>介绍time_wait状态</li><li><span id="Q04-16"></span>TCP/IP 数据链路层的交互过程，传递到IP层怎么知道报文该给哪个应用程序，再问：它怎么区分UDP报文还是TCP报文？<a href="#A04-16">答案</a></li><li><span id="Q04-17"></span><span id="Q04-2"></span><span id="Q04-2"></span>滑动窗口</li><li><span id="Q04-18"></span><span id="Q04-2"></span>TCP传输对包的大小有限制吗？</li><li><span id="Q04-19"></span>现在我要传输一个1M的数据包，tcp如何传输？</li><li><span id="Q04-20"></span>HTTP1.0与HTTP2.0</li><li><span id="Q04-21"></span>TCP和UDP各自的优势，知道哪些使用UDP协议的成功案例。<a href="#A04-21">答案</a></li><li><span id="Q04-22"></span>TCP和UDP各用了底层什么协议</li><li><span id="Q04-23"></span>单个UDP报文最大容量</li><li><span id="Q04-24"></span>TCP粘包怎么处理</li><li><span id="Q04-25"></span>如果网络延迟很高，但是又没有发生丢包，利用tcp会使吞吐量下降，该如何解决呢</li><li><span id="Q04-26"></span>socket编程中服务端和客户端分别用到哪些函数？<a href="#A04-26">答案</a></li></ol><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><ol start="2"><li><span id="A04-2"><ul><li>HTTP和HTTPS的区别：<ul><li>HTTP是以明文的方式在网络中进行传输数据，而HTTPS协议传输的数据则是经过TLS加密过的，因而具有更高的安全性；</li><li>HTTPS在经过TCP的三次握手后，还要进行SSL的handshake，协商加密使用的对称加密密钥；</li><li>HTTPS需要服务器端申请证书，且浏览器端安装对应的根证书；</li><li>HTTP的端口是80，而HTTPS的端口是443。</li></ul></li><li>HTTPS的优点：<ul><li>在数据传输过程中使用密钥进行加密，所以安全性更高；</li><li>通过认证用户和服务器，因而可以确保数据发送到正确的用户和服务器。</li></ul></li><li>HTTPS的缺点：<ul><li>握手阶段延时较高：由于在进行HTTPS会话之前，还需要进行SSL握手，因此HTTPS握手阶段延时增加；</li><li>部署成本高：一方面需要使用证书来验证自身的安全性，需要购买CA证书；另一方面，由于采用HTTPS协议需要加解密计算，占用CPU资源较多，需要的服务器配置或数目较高。<br><a href="#Q04-2">返回原题</a></li></ul></li></ul></span></li></ol><ol start="4"><li><span id="A04-4"><ul><li>序列号、确认应答、超时重传：<ul><li>数据到达接收方，接收方需要发回一个确认应答，表示已经收到该数据段。并且确认序号会说明它下次要接收的数据序列号。如果发送方迟迟未收到确认应答，那么可能是发送的数据丢失，也可能是确认应答丢失，这时发送方会在等待大约2倍RTT（报文往返时间）后进行重传。</li></ul></li><li>窗口控制与快重传：<ul><li>TCP会利用窗口控制来提高传输速度，即在一个窗口大小内，不用一定得等到确认应答后才能发送下一个数据，窗口大小就是无需等待确认而可以继续发送数据段的最大值。</li><li>使用窗口控制，如果某数据段丢失，则接收方会持续发送该数据段的序列号的应答，如果发送方连续收到三次该应答，则立刻进行重发。</li></ul></li><li>拥塞控制：<ul><li>为了防止发送数据过多，造成网络拥塞。</li><li>慢开始、拥塞避免、快重传等<br><a href="#Q04-4">返回原题</a></li></ul></li></ul></span></li></ol><ol start="5"><li><span id="A04-5"><ul><li>三次握手：<ul><li>过程：C–&gt;SYN–&gt;S；S–&gt;SYN/ACK–&gt;C；C–&gt;ACK–&gt;S。</li><li>原因：可以防止已经失效的连接请求报文突然又传递到服务器端造成服务器资源浪费的情况发生。以及确保连接的可靠性。</li><li>例子：客户端发出了一个连接请求的SYN，但由于网络阻塞，该报文滞留在某节点了。然后超过一定时长后，客户端又重新发出了一个SYN，并与服务器建立连接、传输数据，最后再关闭连接。这时，滞留在某节点的SYN突然又传递到了服务器端，如果只有二次握手，服务器端会误以为这是客户端新建立的连接请求，于是发送一个SYN给客户端，并在服务器创建socket套接字，一直等待客户端传送数据。但由于客户端没有连接服务器的需求，会直接丢弃SYN，此时服务器会一直等待客户端发送数据，而造成资源浪费。</li></ul></li><li>四次挥手：<ul><li>过程：C–&gt;FIN–&gt;S；S–&gt;ACK–&gt;C；S–&gt;FIN–&gt;C；C–&gt;ACK–&gt;S。</li><li>原因：关闭连接时，仅代表关闭方没有数据要发送给另一方了，并不代表另一方没有数据要发送给关闭方，所以此时不能关闭socket套接字，需要等所有数据发送完之后才能发送FIN给关闭方。<br><a href="#Q04-5">返回原题</a></li></ul></li></ul></span></li></ol><ol start="6"><li><span id="A04-6"><ol><li>将URL解析为IP地址，解析域名需要用到DNS协议；<ul><li>主机依次通过查询本地hosts文件、DNS解析器缓存、本地的DNS服务器、根域名服务器。</li><li>根域名服务器查询分为两种，一种是递归查询，一种是迭代查询。</li><li>如果是递归查询，此根域名服务器不断向上转发请求，直至得到最终结果，并将解析结果返回给本地DNS服务器，本地DNS服务器再将其返回给浏览器，查询完成；</li><li>如果是迭代查询，本地服务器向根域名服务器发送查询请求。根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求。然后以此类推，直至查询到该域名的IP地址。</li><li>是基于UDP的，因此会用到UDP协议；</li></ul></li><li>得到IP地址后，浏览器打开TCP连接（默认端口为80），并向Web服务器发送http请求，因此要用到HTTP协议；<ul><li>应用层：浏览器发送HTTP请求报文；</li><li>传输层：切分长数据，并确保可靠性；</li><li>网络层：进行路由</li><li>数据链路层：传输数据</li><li>物理层：物理传输比特</li></ul></li><li>若页面发生跳转，服务器以一个重定向响应，然后转到第iv步，否则转到第v步；</li><li>浏览器跟随重定向，再次发送HTTP请求；</li><li>服务器处理请求，并发回HTML源码；<ul><li>服务器经过物理层、数据链路层、网络层、传输层、应用层解析请求报文，并返回HTML源码</li></ul></li><li>浏览器接受请求的页面源码，并开始渲染HTML；</li><li>浏览器发送嵌入到HTML中的对象请求；</li><li>浏览器进一步发送异步（Ajax）请求；</li><li>浏览器关闭TCP连接。<br><a href="#Q04-6">返回原题</a></li></ol></span></li></ol><ol start="8"><li><span id="A04-8"><ul><li><p>HTTP的状态码由三位数字组成，第一个十进制数定义了状态码的类型：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务端错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></li><li><p>常见的HTTP状态码：</p><ul><li>200：请求成功</li><li>301：资源（网页等）被永久地转移到其它URL</li><li>404：请求的资源（网页等）不存在</li><li>500：内部服务器错误<br><a href="#Q04-8">返回原题</a></li></ul></li></ul></span></li></ol><ol start="9"><li><span id="A04-9"><ul><li>IP地址：IP协议提供的一种统一的地址格式，为互联网的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异；</li><li>MAC地址：硬件地址，用于定义网络设备的位置，由数据链路层负责。<br><a href="#Q04-9">返回原题</a></li></ul></span></li></ol><ol start="10"><li><span id="A04-10"><ul><li>OSI七层模型：<ul><li>物理层：通过媒介传输比特，确定机械和电气规范。主要设备有网卡、中继器等；主要协议有IEE802.3、CLOCK、RJ45等。</li><li>数据链路层：将比特组装成帧和点到点的传输。主要设备有网桥、交换机等；主要协议有MAC、VLAN、PPP协议等。</li><li>网络层：负责数据包从源到宿的传递以及网际互联。主要设备有路由器等；主要协议有IP、ARP、TCMP。</li><li>传输层：提供端到端的可靠报文传递和错误恢复。主要协议有TCP、UDP等。</li><li>会话层：建立、管理和终止会话，传输单位是SPDU(Session Protocol Data Unit)。主要协议有RPC、NFS等。</li><li>表示层：对数据进行翻译、加密和压缩，传输单位是PPDU(Presentation ~)。主要协议有JPEG、ASCII等。</li><li>应用层：允许访问OSI环境的手段，传输单位为APDU(Application ~)。主要协议有HTTP、FTP、DNS等。</li></ul></li><li>TCP/IP四层模型：<ul><li>网络接口层：MAC、VLAN</li><li>网络层：IP、ICMP</li><li>传输层：TCP、IP</li><li>应用层：HTTP、DNS、FTP<br><a href="#Q04-10">返回原题</a></li></ul></li></ul></span></li></ol><ol start="12"><li><span id="A04-12"><ul><li>拥塞控制是为了防止过多的数据注入网络，使得网络中的路由器或链路过载。流量控制是点对点的通信量控制，而拥塞控制是全局的网络流量整体性的控制。发送双方都有一个拥塞窗口——cwnd（Congestion Window）；</li><li>cwnd的大小取决于网络的拥塞程度，并且动态地在变化。</li><li>发送方让自己发送窗口大小等于拥塞窗口，但考虑到接收方的接收能力，一般而言发送窗口小于拥塞窗口；</li><li>几种算法：<ul><li>慢开始：最开始发送方的拥塞窗口为1，逐渐增大拥塞窗口和发送窗口。每经过一个传输轮次，拥塞窗口加倍，如果其超过慢开始的门限，则使用拥塞避免算法，防止拥塞窗口过大；</li><li>拥塞避免：每经过一次往返时间RTT，拥塞窗口增长1。在慢开始和拥塞避免中，如果发现网络拥塞，就把慢开始中的门限值减小到之前的一半，并设置cwnd为1，重新慢开始；</li><li>快重传：接收方接收到一个失序的报文段后就立即发出重复确认，发送方只要连续收到三个重复确认就立即重传；</li><li>快恢复：当发送方连续收到了三个重复确认后（说明当前网络没有拥塞），就将慢开始门限减半，并将当前的cwnd设置为慢开始门限，并且采用拥塞避免算法。</li></ul></li><li>什么时候开始减慢增长速度：<ul><li>采用慢开始和拥塞避免算法的时候：<ul><li>一旦cwnd超过慢开始门限，就采用拥塞避免算法，减慢增长速度；</li><li>一旦发生丢包，就重新进行慢开始，减慢增长速度。</li></ul></li><li>采用快恢复和快重传的时候：<ul><li>一旦cwnd超过慢开始门限，就采用拥塞避免算法，减慢增长速度；</li><li>一旦发送方连续收到了三个重复确认，就采用拥塞避免算法，减慢增长速度。<br><a href="#Q04-12">返回原题</a></li></ul></li></ul></li></ul></span></li></ol><ol start="16"><li><span id="A04-16"><ul><li>TCP/IP数据链路层的交互过程：<ul><li>网络层等到数据链路层用MAC地址作为通信目标，数据包到达网络等准备往数据链路层发的时候，首先会去自己的ARP缓存表（存储着IP-MAC关系）中查找目标IP的MAC地址，如果查到了，就将该MAC地址组装到链路层数据包的包头；如果没找到，会发起一个广播：who is IP XXX tell IP XXX，所有收到的广播的机器看看这个IP是否是自己的，如果是自己的，则以单拨的形式将自己的MAC地址回复给请求的机器。</li></ul></li><li>传递到IP层如何知道该给哪个应用程序：<ul><li>根据端口号区分。</li></ul></li><li>如何区分是UDP报文还是TCP报文：<ul><li>看IP数据段的协议标识字段，6是TCP，17是UDP。<br><a href="#Q04-16">返回原题</a></li></ul></li></ul></span></li></ol><ol start="21"><li><span id="A04-21"><ul><li>二者区别：<ul><li>连接：TCP是面向连接的传输层协议，而UDP无连接；</li><li>服务对象：TCP是端到端的两端间服务，即一条TCP连接只能有两个端点；而UDP支持一对一、一对多、多对一、多对多的通信；</li><li>可靠性：TCP是可靠交付，无差错、不丢失、不重复、按序到达；而UDP尽最大努力交付，不保证可靠交付；</li><li>拥塞控制、流量控制：TCP有拥塞控制和流量控制，保证传输数据的安全性；而UDP没有这些，网络拥塞不会影响源主机的发送效率；</li><li>报文长度：TCP是动态报文长度，即根据接收方的窗口大小以及网络拥塞状态来决定的；而EDP面向报文，不合并、不拆分，保留上面传下来报文的边界；</li><li>首部开销：TCP首部开销大，占20个字节；而UDP首部开销小，只有8个字节（源端口、目的端口、数据长度、检验和）</li></ul></li><li>各自适用场景：<ul><li>UDP：视频传输、实时通信等；</li><li>TCP：文件传输、发送邮件、重要状态的更新等。<br><a href="#Q04-21">返回原题</a></li></ul></li></ul></span></li></ol><ol start="26"><li><span id="A04-16"><ul><li><p>基于TCP的socket：</p><ul><li>服务器端程序：<ol><li>创建一个套接字，用函数socket();</li><li>绑定IP地址、端口号到套接字，用函数bind();</li><li>设置允许最大的连接数，用函数listen();</li><li>接收客户端的连接，用函数accept();</li><li>收发数据，用函数send()和recv()，或read()或write();</li><li>关闭网络连接，用close()。</li></ol></li><li>客户端程序：<ol><li>创建一个套接字，用函数socket();</li><li>设置要连接的对方的IP和端口属性；</li><li>连接服务器，用函数connect();</li><li>收发数据，用函数send()和recv()，或read()和write();</li><li>关闭网络连接，用close()。</li></ol></li></ul></li><li><p>基于UDP的socket：</p><ul><li><p>服务器端程序：</p><ol><li>建立套接字文件描述符，使用函数socket()，创建一个套接字文件描述符；</li><li>设置服务器地址和监听端口，初始化要绑定的网络地址结构；</li><li>绑定监听端口，使用bind()函数，将套接字文件描述符和一个地址类型变量进行绑定；</li><li>接收客户端的数据，使用recvfrom();</li><li>向客户端发送数据，使用sendto();</li><li>关闭套接字，使用close释放资源；</li></ol></li><li><p>客户端程序：</p><ol><li>建立套接字文件描述符，socket();</li><li>设置服务器端口和地址，struct sockaddr;</li><li>向服务器发送数据，sendto();</li><li>接收服务器的数据，recvfrom();</li><li>关闭套接字，close()。<br><a href="#Q04-26">返回原题</a></li></ol></li></ul></li></ul></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之计算机网络&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：数据结构</title>
    <link href="/2019/08/15/dataStructure/"/>
    <id>/2019/08/15/dataStructure/</id>
    <published>2019-08-15T14:26:06.000Z</published>
    <updated>2019-08-22T14:33:21.296Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li><span id="Q02-1"></span>hash表的实现，包括STL中的哈希桶长度常数。<a href="#A02-1">答案</a></li><li><span id="Q02-2"></span>hash表如何rehash，怎么处理其中保存的资源。<a href="#A02-2">答案</a></li><li><span id="Q02-3"></span>哈希表的桶个数为什么是质数，合数有何不妥？<a href="#A02-3">答案</a></li><li><span id="Q02-4"></span>map和set有什么区别，怎么实现的。<a href="#A02-4">答案</a></li><li><span id="Q02-5"></span>如何判断一个图是否连通。<a href="#A02-5">答案</a></li><li><span id="Q02-6"></span>如何用一个1立方米的方块占满这个小教室。</li><li><span id="Q02-7"></span>大区间求和。<a href="#A02-7">答案</a></li><li><span id="Q02-8"></span>大文本如何排序</li><li><span id="Q02-9"></span>最优二叉树、排序二叉树、哈夫曼树。<a href="#A02-9">答案</a></li><li><span id="Q02-10"></span>map用的是红黑树，和AVL树的区别？<a href="#A02-10">答案</a> </li><li><span id="Q02-11"></span>map插入和删除需要注意什么？<a href="#A02-11">答案</a> </li><li><span id="Q02-12"></span>B+树，存储方式。<a href="#A02-12">答案</a> </li><li><span id="Q02-13"></span>set底层为什么用红黑树实现？<a href="#A02-13">答案</a> </li><li><span id="Q02-14"></span>map底层为什么用红黑树实现？</li><li><span id="Q02-15"></span>各种排序空间复杂度和时间复杂度，稳定程度。<a href="#A02-15">答案</a></li><li><span id="Q02-16"></span>hashtable是什么，重复元素怎么办，字符串当作hash值如何处理</li><li><span id="Q02-17"></span>hash用在什么地方？</li><li><span id="Q02-18"></span>vector<int>，手写扩容代码。<a href="#A02-18">答案</a> </int></li><li><span id="Q02-19"></span>map和unordered_map怎么实现的以及优缺点。<a href="#A02-19">答案</a> </li><li><span id="Q02-20"></span>vector和deque的底层实现有什么区别。<a href="#A02-20">答案</a></li><li><span id="Q02-21"></span>emplace_back的实现。<a href="#A02-21">答案</a></li><li><span id="Q02-22"></span>迭代器什么时候会失效。<a href="#A02-22">答案</a></li><li><span id="Q02-23"></span>介绍迭代器失效。push_back会导致迭代器失效吗。<a href="#A02-23">答案</a> </li><li><span id="Q02-24"></span>快排算法最差情况推导公式。<a href="#A02-24">答案</a></li><li><span id="Q02-25"></span>小根堆特点。<a href="#A02-25">答案</a></li><li><span id="Q02-26"></span>增量为5的希尔排序</li><li><span id="Q02-27"></span>一致性哈希是如何实现的（单调性、平衡性）。<a href="#A02-27">答案</a></li><li><span id="Q02-28"></span>单链表和双向链表了解吗，说一下性能的比较？<a href="#A02-28">答案</a></li><li><span id="Q02-29"></span>描述怎么初始化堆。<a href="#A02-29">答案</a></li><li><span id="Q02-30"></span>描述怎么合并两个堆。<a href="#A02-30">答案</a></li><li><span id="Q02-31"></span>map和hashmap的区别，查找的时间复杂度分别是多少？<a href="#A02-31">答案</a></li></ol><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><ol><li><span id="A02-1"> <ul><li>哈希表又称散列表，是根据关键码值直接访问的数据结构。即通过把关键码值映射表中一个位置来访问记录，以加快查找的速度。哈希表的实现主要解决两个问题，构造哈希函数和处理哈希冲突。</li><li>构造哈希函数：<ul><li>哈希函数对不同的输出值得到一个固定长度的消息摘要。理想的哈希函数对于不同的输入应该产生不同的结构，同时散列结果应当具有同一性（输出值尽量均匀）和雪崩效应（微小的输入值变化使得输出值发生巨大的变化）；</li><li>构造哈希函数主要包括直接地址法、平方取中法、除留余数法等。</li></ul></li><li>冲突解决：<ul><li>现实中的哈希函数不是完美的，当两个不同的输入值对应一个输出值时，就会产生碰撞，这个时候需要解决冲突。</li><li>常见解决冲突的办法有：开放定址法、链地址法、建立公共溢出区等。</li><li>STL中使用的链地址法：为每个Hash值建立一个单链表，当发生冲突时，将记录插入到链表中。</li><li>虽然链地址法并不要求哈希桶长度必须为质数，但STL仍然以质数来设计哈希桶长度，并且将28个质数（逐渐呈现大约两倍的关系）计算好，以备随时访问，同时提供一个函数，用于查询在这28个质数中，“最接近某数并大于某数”的质数。<br><a href="#Q02-1">返回原题</a></li></ul></li></ul></span></li></ol><ol start="2"><li><span id="A02-2"> <ul><li>负载因子：哈希表的size/初始化时桶的数量；</li><li>rehash：当hash表中的负载因子达到负载极限的时候，hash表会自动成倍的增加容量（桶的数量），并将原有的对象重新分配并加入新的桶内。<br><a href="#Q02-2">返回原题</a></li></ul></span></li></ol><ol start="3"><li><span id="A02-3"> <ul><li>可以最大程度地减少冲突概率，使得哈希后的分布更加均匀。如果使用合数，可能会造成很多数据分布集中在某些点上，从而影响哈希表效率。</li><li>质数在一般情况下可以抵抗比较差的hash函数，但对于较好的hash函数，不必苛求桶的个数一定是质数。<br><a href="#Q02-3">返回原题</a></li></ul></span></li></ol><ol start="4"><li><span id="A02-4"> <ul><li>共同点：<ul><li>map和set的数据结构相同，底层都是使用红黑树实现的；</li><li>内部的元素都不可以重复；</li><li>都会对其中的键值进行排序；</li><li>不能通过迭代器来改变其键值，因为要保证键值的唯一性和元素的顺序。</li></ul></li><li>不同点：<ul><li>二者其中的iterator格式不一样，map使用的是pair这种键值/实值配对的数据，使用第一个元素来排序，而set直接使用键值作为元素，以键值来排序；<br><a href="#Q02-4">返回原题</a></li></ul></li></ul></span></li></ol><ol start="5"><li><span id="A02-5"> <ul><li>使用Warshall算法，时间复杂度为O(v^3)；</li><li>拓扑排序</li><li>使用DFS（Deep First Search），用visit[]来标志数组，观察从一个点出发能否遍历图中所有的点。<br><a href="#Q02-5">返回原题</a></li></ul></span></li></ol><ol start="7"><li><span id="A02-7"> <ul><li>使用线段树：叶子节点存储输入的数组元素，每一个内部节点表示两个叶子节点的合并（即两个子节点的和）</li><li>时间复杂度：构建O(n)，查询O(n)，更新O(log n)。<br><a href="#Q02-7">返回原题</a></li></ul></span></li></ol><ol start="9"><li><span id="A02-9"> <ul><li>最优二叉树（哈夫曼树）：带权路径长度最小的树。<ul><li>结点的带权路径长度：结点到树根之间的路径长度与该结点上权的乘积；</li><li>树的带权路径长度（WPL）：树中所有叶结点的带权路径长度之和。</li><li>特点：叶子上的权值均相同时，完全二叉树一定是最优二叉树；最优二叉树中，权越大的叶子结点离根越近；最优二叉树的形态不唯一，WPL最小；是严格的二叉树，没有度数为1的分支结点。</li></ul></li><li>哈夫曼算法基本思想：<ul><li>根据给定的n个权值w1，w2…wn构成n棵二叉树的森林F={T1, T2,…,Tn}，其中每棵二叉树Ti中都只有一个权值为wi的根结点，其左右子树均空；</li><li>在森林F中选出两棵根结点权值最小的树，将这两棵树合并成一棵新树（增加一个新结点作为新树的根，并将所选的两棵树的根分别作为新根的左右孩子），将这两个孩子的权值之和作为新树根的权值；</li><li>对新的森林F重复(2)，直到森林F中只剩下一棵树为止。</li></ul></li><li>排序二叉树：又称二叉搜索树，性质如下：<ul><li>若它的左子树不为空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不为空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左右子树也分别为二叉排序树。<br><a href="#Q02-9">返回原题</a></li></ul></li></ul></span></li></ol><ol start="10"><li><span id="A02-10"><ul><li>红黑树：红黑树是一种二叉查找树，每个节点增加一个存储位表示节点的颜色，非红即黑。通过对任何一条从根节点到叶子节点着色的方式的限制，红黑树确保没有一条路径的长度会大于其它任一路径长度的两倍。因此，红黑树是一种弱平衡二叉树，相对于AVL树来说，它的旋转次数少，所以对于查找、插入、删除操作较多的情况下，通常使用红黑树。</li><li>性质：<ul><li>每个节点非黑即红；</li><li>根节点是黑色的；</li><li>每个叶子节点（NIL节点）都是黑色的；</li><li>每个红节点的两个子节点都是黑色的；</li><li>任一节点到所有叶子节点的路径上的黑色节点数目都相同。</li></ul></li><li>AVL树：红黑树是在AVL树的基础上提出来的。平衡二叉树又称为AVL树，是一种特殊的二叉排序树。其左右子树都是二叉平衡树，左右子树的高度差绝对值不超过1。</li><li>红黑树相对AVL树的优点：<ul><li>AVL树是高度平衡的，其频繁的插入、删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多二次旋转，删除最多三次旋转；</li><li>红黑树的查找、删除、插入操作都是O(logn)，且性能稳定，所以STL中很多结构包括map、set的底层实现都是红黑树。<br><a href="#Q02-10">返回原题</a></li></ul></li></ul></span></li></ol><ol start="11"><li><span id="A02-11"> <ul><li>map的插入：<ul><li>insert方法不能覆盖，如果键已经存在，则插入失败。数组方法插入不存在也会直接更新键对应的值；</li></ul></li><li>map的删除：<ul><li>map中删除元素时，只是当前迭代器失效。<br><a href="#Q02-11">返回原题</a></li></ul></li></ul></span></li></ol><ol start="12"><li><span id="A02-12"><ul><li>参考：<a href="https://zhuanlan.zhihu.com/p/27700617" target="_blank" rel="noopener">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了</a></li><li>B树：B树属于多叉树，又名平衡多路查找树，常用于数据库索引技术中。<ul><li>排序方式：所有节点的关键字是按递增次序排列，并遵循左小右大原则；</li><li>子节点数：非叶子节点的子节点数&gt;1，且&lt;=M，且M&gt;=3，空树除外。（M阶代表一个节点最多有多少个查找路径）</li><li>关键字数：枝节点的关键字数量大于等于ceil(M/2)-1个且小于等于M-1个；</li><li>所有叶子节点均在同一层，叶子结点除了包含关键字和关键字记录的指针外也有指向其子节点的指针，只不过其指针地址都为null。</li></ul></li><li>B+树：是B树的一个升级版，更充分地利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分查找法。<a href="https://juejin.im/post/5b9073f9f265da0acd209624" target="_blank" rel="noopener">看图轻松理解数据结构与算法系列(B+树) </a><ul><li>B+树非叶子结点不保存关键字记录的指针，只进行数据索引，这样使得B+树每个非叶子结点所能保存的关键字大大增加；</li><li>B+树叶子结点保存了父结点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样；</li><li>B+树叶子结点的关键字从小到大排列，左边结尾数据都会保存右边结点开始数据的指针；</li><li>非叶子结点的子结点数=关键字数，也有非叶子结点的关键字数=子节点数-1。<br><a href="#Q02-12">返回原题</a></li></ul></li></ul></span></li></ol><ol start="13"><li><span id="A02-13"><ul><li>红黑树能以O(log n)的时间复杂度进行搜索、插入、删除捉住，旋转复杂度仅为O(1)，时间复杂度和AVL一样，但统计性能比AVL树更高；<br><a href="#Q02-13">返回原题</a></li></ul></span></li></ol><ol start="15"><li><span id="A02-15">各种排序算法的时间、空间复杂度以及稳定性。</span></li></ol><table><thead><tr><th align="center">排序算法</th><th align="center">最差时间复杂度</th><th align="center">平均时间复杂度</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">冒泡法</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序法</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">插入排序法</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">归并排序法</td><td align="center">O(nlog n)</td><td align="center">O(nlog n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序法</td><td align="center">O(n^2)</td><td align="center">O(n^1.3)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">快速排序法</td><td align="center">O(n^2)</td><td align="center">O(nlog n)</td><td align="center">O(nlog n)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序法</td><td align="center">O(nlog n)</td><td align="center">O(nlog n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">计数排序法</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序法</td><td align="center">O(n^2)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序法</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center"><a href="#Q02-15">返回原题</a></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ol start="18"><li><span id="A02-18"></span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (max_size() - size() &lt; _Count)</span><br><span class="line">    <span class="comment">//可以申请的最大容量也不够用，抛出异常_THROW(length_error, "vector&lt;T&gt; too long");</span></span><br><span class="line">    _Xlen();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (_Capacity &lt; size() + _Count)&#123;<span class="comment">//空间不足，需要扩容   </span></span><br><span class="line">    _Capacity = max_size() - _Capacity / <span class="number">2</span> &lt; _Capacity</span><br><span class="line">        ? <span class="number">0</span> : _Capacity + _Capacity / <span class="number">2</span>;    <span class="comment">// 尝试扩容1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (_Capacity &lt; size() + _Count)<span class="comment">//扩容1.5倍后依然不够用，则容量等于当前数据个数加上新增数据个数</span></span><br><span class="line">        _Capacity = size() + _Count;</span><br><span class="line">    pointer _Newvec = <span class="keyword">this</span>-&gt;_Alval.allocate(_Capacity);<span class="comment">//申请新空间</span></span><br><span class="line">    pointer _Ptr = _Newvec;</span><br><span class="line">    _TRY_BEGIN</span><br><span class="line">        _Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),</span><br><span class="line">            _Newvec);   <span class="comment">//move原先的数据</span></span><br><span class="line">    _Ptr = _Ucopy(_First, _Last, _Ptr); <span class="comment">//copy新增的数据到新内存之后</span></span><br><span class="line">    _Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);  </span><br><span class="line">    _CATCH_ALL</span><br><span class="line">        _Destroy(_Newvec, _Ptr);</span><br><span class="line">    <span class="keyword">this</span>-&gt;_Alval.deallocate(_Newvec, _Capacity);<span class="comment">//释放原来申请的内存</span></span><br><span class="line">    _RERAISE;</span><br><span class="line">    _CATCH_END</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="#Q02-18">返回原题</a></p><ol start="19"><li><span id="A02-19"><ul><li>map：底层是用红黑树实现的，对map的查找、插入、删除等操作都是相当于对红黑树进行的操作。<ul><li>优点：有序性；红黑树的数据结构使得很多操作在O(log n)时间复杂度就能实现，效率很高；</li><li>缺点：空间占用率很高。红黑树的每个节点都需要保存父结点、左右子结点以及红黑性质，使得每个节点都占用大量内存。</li></ul></li><li>unordered_map：的底层是哈希表，其元素的排列顺序是无序的。<ul><li>优点：由于底层是哈希表，因此查找速度非常快；</li><li>缺点：哈希表的建立比较耗费时间。<br><a href="#Q02-19">返回原题</a></li></ul></li></ul></span></li></ol><ol start="20"><li><span id="A02-20"><ul><li>vector的底层实现是数组，是单向开口的连续空间，支持随机访问和尾部快速增删；</li><li>deque的底层实现是一个中央控制器和多个缓冲区，是双向开口的连续空间。支持随机访问和首尾快速增删。<br><a href="#Q02-20">返回原题</a></li></ul></span></li></ol><ol start="21"><li><span id="A02-21"><ul><li>emplace_back：采用就地构造策略，直接将参数传给对象的构造函数，在容器中构造一个对象，从而实现0拷贝。与push_back相比，当传入左值时，省去了复制操作；当传入右值时，省去了移动操作。<br><a href="#Q02-21">返回原题</a></li></ul></span></li></ol><ol start="22"><li><span id="A02-22"><ul><li>vector：<ul><li>push_back：一定会使end返回迭代器失效；当capacity前后有变化时，first返回的迭代器也会失效；</li><li>erase/pop_back：会使删除元素及之后的所有迭代器均失效；erase会返回一个新的有效的迭代器。</li></ul></li><li>deque：<ul><li>首尾插入元素<strong>不会</strong>使任何迭代器失效；</li><li>在首尾删除元素只会使指向被删除元素的迭代器失效；</li><li>在其他任何位置进行插入和删除将会使该容器元素的所有迭代器失效。</li></ul></li><li>list/set/map：<ul><li>删除元素时，指向该删除节点的迭代器失效；<br><a href="#Q02-22">返回原题</a></li></ul></li></ul></span></li></ol><ol start="23"><li><span id="A02-23"><ul><li>迭代器失效：向容器内添加或删除元素的操作可能会使指向容器元素的迭代器失效，失效的迭代器将不指向任何元素。</li><li>push_back：对于vector的push_back操作，end返回的迭代器会失效，first返回的迭代器只有当当前容器size小于容器的capacity时才不会失效，否则会失效。<br><a href="#Q02-23">返回原题</a></li></ul></span></li></ol><ol start="24"><li><span id="A02-24"><ul><li>快排最差情况：已排好序；所有值相等（排好序的特殊情况）。</li><li>在最差情况下，需要执行n-1次递归调用，且第i次划分需要经过n-i次比较才能找到第i个记录。所以比较次数为<code>(n-1) + (n-2) + ... + 1 = n(n-1)/2</code>，即最终时间复杂度为O(n^2)。<br><a href="#Q02-24">返回原题</a></li></ul></span></li></ol><ol start="25"><li><span id="A02-25"><ul><li>小根堆特点：所有父结点的值比其左右子结点的值都要小；根结点的值最小；<br><a href="#Q02-25">返回原题</a></li></ul></span></li></ol><ol start="27"><li><span id="A02-27"><ul><li>参考：<a href="http://wsfdl.com/algorithm/2017/01/28/%E7%90%86%E8%A7%A3%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C.html" target="_blank" rel="noopener">理解 Consistent Hashing</a></li><li>一致性哈希是一种特殊的哈希算法，哈希表槽位数（大小）的改变平均只需要对K/n个关键字重新映射，其中K是关键字的数量，n是槽位数量。而在传统哈希表中，删除或添加一个槽位几乎要对所有关键字进行重新映射；</li><li>原理：<ul><li>将每个节点映射到数值空间[0, (2^32)-1]，映射的规则可为IP、hostname；</li><li>将每个object映射到数值空间[0, (2^32)-1]；</li><li>对于某个object，对于所有满足hash(node)&lt;=hash(object)的节点，选择hash(node)最大的节点存放object；如果没有满足上述条件的节点，选择hash(node)最小的节点存放该object。</li></ul></li><li>特点：当插入或删除时，仅有一个节点的部分object需要重哈希。</li><li>平衡性：引入虚节点，虚节点实际上是物理节点的复制品，一个物理节点包含多个虚拟节点，我们将这些虚拟节点映射到数值空间[0, (2^32)-1]，对于某个object，计算出存放的虚拟节点，进而得出物理节点。虚节点越多及其位置分布越均匀，相应地，映射到物理节点的object数目也越均匀，从而提高了平衡性。<br><a href="#Q02-27">返回原题</a></li></ul></span></li></ol><ol start="28"><li><span id="A02-28"><ul><li>与单链表相比，双向链表有如下特点：<ul><li>从任一节点出发，可以查找链表中的其他任意节点；</li><li>既可以前向遍历，也可以后向遍历；</li><li>每个指针域中都增加了一个存储指针的空间，降低了存储密度；</li><li>可以在当前结点前或后插入、删除；<br><a href="#Q02-28">返回原题</a></li></ul></li></ul></span></li></ol><ol start="29"><li><span id="A02-29"><ul><li>参考：<a href="https://blog.csdn.net/u011240016/article/details/53428489" target="_blank" rel="noopener">堆排序算法之初始堆建立总结</a></li><li>首先根据序列构建一个完全二叉树；</li><li>在完全二叉树的基础上，从最后一个非叶子结点开始调整：比较三个元素的大小（自己、左孩子、右孩子），分为三种情况：<ul><li>自己最大，不用调整；</li><li>左孩子最大，交换该非叶子结点与其左孩子的值，并考察以左孩子为根的子树是否满足大顶堆的要求，不满足递归向下处理；</li><li>右孩子最大，交换该非叶子结点与其右孩子的值，并考察以右孩子为根的子树是否满足大顶堆的要求，不满足递归向下处理；<br><a href="#Q02-29">返回原题</a></li></ul></li></ul></span></li></ol><ol start="30"><li><span id="A02-30"><ul><li>当两个堆元素数量相差较大时，选用启发时合并，即将较小的堆一个个插入较大的堆中，时间复杂度为O(nlog n)；</li><li>当两个堆元素数量相关较小时，选用重新建堆法，全部拆散重排，时间复杂度为O(n1+n2)。<br><a href="#Q02-30">返回原题</a></li></ul></span></li></ol><ol start="31"><li><span id="A02-31"><ul><li>区别：<ul><li>构造函数：hashmap需要hash函数，而map只需比较函数；</li><li>存储结构：hashmap采用hash表存储，map一般采用红黑树实现。</li></ul></li><li>查找时间复杂度：<ul><li>hashmap：常数级别，为O(1)；</li><li>map：log(n)。<br><a href="#Q02-31">返回原题</a></li></ul></li></ul></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之数据结构&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：设计模式</title>
    <link href="/2019/08/15/DesignPatterns/"/>
    <id>/2019/08/15/DesignPatterns/</id>
    <published>2019-08-15T14:06:15.000Z</published>
    <updated>2019-08-22T14:33:35.144Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li><span id="Q06-1"></span>单例模式。<a href="#A06-1">答案</a></li><li><span id="Q06-2"></span>装饰器模式。<a href="#A06-2">答案</a></li><li><span id="Q06-3"></span>观察者模式的多线程安全问题，写个医生，病人的观察者模式啊。<a href="#A06-3">答案</a></li><li><span id="Q06-4"></span>说一下OOP的设计模式五项原则。<a href="#A06-4">答案</a></li><li><span id="Q06-5"></span>生产者消费者的同步操作。</li><li><span id="Q06-6"></span>工厂模式？优点？<a href="#A06-6">答案</a></li></ol><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><ol><li><span id="A06-1"><ul><li>单例模式：一个类只能有一个对象被创建，如果有多个对象的话，可能会导致状态的混乱和不一致。通过单例模式，可以做到：<ul><li>确保一个类只有一个实例被建立；</li><li>提供了一个对对象的全局访问指针；</li><li>在不影响单例类的客户端的情况下允许将来有多个实例。</li></ul></li><li>三种单例模式的实现：懒汉式、饿汉式和多线程式；<ul><li>懒汉式：特点是延迟加载，比如配置文件的实例直到用到的时候才会被加载；</li><li>饿汉式：特点是一开始就加载了，用“空间换时间”；</li><li>多线程式：</li></ul></li></ul></span></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********* 第一种：懒汉式 **********/</span></span><br><span class="line"><span class="comment">// GetInstance使用懒惰初始化，即它的返回值是当这个函数首次被访问时才创建的。</span></span><br><span class="line"><span class="comment">// 这是一种防弹设计，所有GetInstance()之后的调用都返回相同实例的指针。</span></span><br><span class="line"><span class="comment">// 缺陷：假设单例还未初始化，若有两个线程同时调用GetInstance方法，然后两个线程都初始化一个单例，最后得到的指针并不是指向同一个地方，不满足单例类的定义了。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton() &#123;&#125;;</span><br><span class="line">    <span class="keyword">static</span> Singleton* m_pInstance; <span class="comment">// 静态成员对象指针变量只会分配指针空间，而不是对象空间，所以不会调用构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance == <span class="literal">NULL</span>)</span><br><span class="line">            m_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> m_pInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********* 第二种：饿汉式 **********/</span></span><br><span class="line"><span class="comment">// 有两个状态：单例未初始化和单例已经初始化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton() &#123;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Singleton instance; <span class="comment">// 静态成员对象在运行之初就已经分配了空间，调用构造函数了</span></span><br><span class="line">        <span class="keyword">return</span> &amp;instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********* 第三种：多线程式 **********/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton* m_instance;</span><br><span class="line">    Singleton() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == m_instance) &#123;</span><br><span class="line">            Lock(); <span class="comment">// 借助其他类来实现，如boost</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == m_instance) &#123;</span><br><span class="line">                m_instance = <span class="keyword">new</span> Singleton;</span><br><span class="line">            &#125;</span><br><span class="line">            UnLock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#Q06-1">返回原题</a></p><ol start="2"><li><span id="A06-2"><ul><li>装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构。属于结构型模式，是作为现有的类的一个包装。比生成子类更加灵活</li><li>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，可以动态扩展一个实现类的功能。</li><li>缺点：多层装饰比较复杂。<br><a href="#Q06-2">返回原题</a></li></ul></span></li></ol><ol start="3"><li><span id="A06-3"><ul><li>观察者模式：当对象间存在一对多关系时，则使用观察者模式。当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。观察者模式属于行为型模式。</li><li>优点：<ul><li>观察者和被观察者是抽象耦合的；</li><li>建立一套触发机制。</li></ul></li><li>缺点：<ul><li>如果一个被观察者有很多直接或间接的观察者，将所有的观察者都通知到位会花费很多时间；</li><li>如果观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃；</li><li>没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅是知道观察目标发生了变化。</li></ul></li></ul></span></li></ol><figure class="codeblock codeblock--tabbed"><figcaption><span>Observer.h</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Observer() {};</span><br><span class="line">    <span class="keyword">virtual</span> ~Observer() {};</span><br><span class="line">    <span class="comment">// 定义纯虚函数，规范接口</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>Subject.h</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Observer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subject() {};</span><br><span class="line">    <span class="keyword">virtual</span> ~Subject() {};</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer *observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delObserver</span><span class="params">(Observer *observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Observer*&gt; m_observers;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>Subject.cpp</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude Subject.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Subject::addObserver(Observer *observer) {</span><br><span class="line">    m_observers.push_back(observer);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> Subject::delObserver(Observer *observer) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = m_observers.begin(); iter != m_observers.end(); ++iter) {</span><br><span class="line">        <span class="keyword">if</span> (*iter == observer) {</span><br><span class="line">            m_observer.erase(iter);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> Subject::notifyObservers() {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = m_observers.begin(); iter != m_observers.end(); ++iter) {</span><br><span class="line">        (*iter)-&gt;update();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>ConcreteObserver.h</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Observer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span>:</span> <span class="keyword">public</span> Observer {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_observerName;</span><br><span class="line">    Subject *m_subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteObserver(<span class="built_in">string</span> name, Subject* subject): m_observerName(name), m_subject(subject) {};</span><br><span class="line">    ~ConcreteObserver() {};</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>ConcreteObserver.cpp</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteObserver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ConcreteObserver::update() {</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"update observer["</span> &lt;&lt; m_observerName &lt;&lt; <span class="string">"] status: "</span> &lt;&lt; m_subject-&gt;getStatus() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>ConcreteSubject.h</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Observer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>:</span> <span class="keyword">public</span> Subject {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_subjectName;</span><br><span class="line">    <span class="keyword">int</span> m_status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteSubject(<span class="built_in">string</span> name): m_subjectName(name), m_status(<span class="number">0</span>) {};</span><br><span class="line">    ~ConcreteSubjec() {};</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>ConcreteSubject.cpp</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteSubject.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ConcreteSubject::setStatus(<span class="keyword">int</span> status) {</span><br><span class="line">    m_status = status;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"setStatus subject["</span> &lt;&lt; m_subjectName &lt;&lt; <span class="string">"] status: "</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ConcreteSubject::getStatus() {</span><br><span class="line">    <span class="keyword">return</span> m_status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><span>main.cpp</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Observer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteObserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteSubject.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    Subject* subjectA = <span class="keyword">new</span> ConcreteSubject(<span class="string">"subjectA"</span>);</span><br><span class="line">    Subject* subjectB = <span class="keyword">new</span> ConcreteSubject(<span class="string">"subjectB"</span>);</span><br><span class="line">    </span><br><span class="line">    Observer* observerA = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observerA"</span>, subjectA);</span><br><span class="line">    Observer* observerB = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observerB"</span>, subjectB);</span><br><span class="line">    </span><br><span class="line">    subjectA-&gt;addObserver(observerA);</span><br><span class="line">    subjectB-&gt;addObserver(observerB);</span><br><span class="line">    </span><br><span class="line">    subjectA-&gt;setStatus(<span class="number">1</span>);</span><br><span class="line">    subjectA-&gt;notifyObservers();</span><br><span class="line">    </span><br><span class="line">    subjectB-&gt;setStatus(<span class="number">2</span>);</span><br><span class="line">    subjectB-&gt;notifyObservers();</span><br><span class="line">    </span><br><span class="line">    subjectA-&gt;addObserver(observerB);</span><br><span class="line">    subjectA-&gt;setStatus(<span class="number">2</span>);</span><br><span class="line">    subjectA-&gt;notifyObservers();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> subjectA;</span><br><span class="line">    <span class="keyword">delete</span> subjectB;</span><br><span class="line">    <span class="keyword">delete</span> observerA;</span><br><span class="line">    <span class="keyword">delete</span> observerB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><p><a href="#Q06-3">返回原题</a></p><ol start="4"><li><span id="A06-4"><ul><li>单一职责原则：类的职责单一，对外只提供一种功能，而引起类变化的原因都应该只有一个；</li><li>开闭原则：类的改动是通过增加代码进行的，而不是修改源代码；</li><li>里氏替换原则：任何抽象类出现的地方都可以用它的实现类进行替换，实际就是虚拟机制，语言级别实现面向对象功能；</li><li>依赖倒转原则：依赖于抽象（接口），不要依赖具体实现（类），也就是针对接口编程；</li><li>接口隔离原则：不应该强迫用户的程序依赖他们不需要的接口方法，一个接口应该只提供一种对外功能，不应该把所有操作都封装到一个接口中去；</li><li>合成复用原则：如果使用继承，会导致父类的任何变换都可能影响到子类的行为。如果使用对象组合，就降低了这种依赖关系。对于继承和组合，优先使用组合；</li><li>迪米特原则：一个对象应当对其他对象尽可能少的了解，从而降低各个对象之间的耦合，提高系统的可维护性。<br><a href="#Q06-4">返回原题</a></li></ul></span></li></ol><ol start="6"><li><span id="A06-6"><ul><li>工厂模式：属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</li><li>优点：<ul><li>一个调用者想创建一个对象，只需知道其名称就可以了；</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以；</li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ul></li><li>缺点：<ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使用系统中类的个数成倍增加，在一定程序上增加了系统的复杂度，同时也增加了系统具体类的依赖。<br><a href="#Q06-6">返回原题</a></li></ul></li></ul></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之设计模式&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>开发岗面试问题总结：C/C++语言</title>
    <link href="/2019/08/15/DevelopingInterview/"/>
    <id>/2019/08/15/DevelopingInterview/</id>
    <published>2019-08-15T11:50:44.000Z</published>
    <updated>2019-08-22T14:59:09.374Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ol><li><span id="Q01-1"></span>一个C++源文件从文本到可执行文件经历的过程。<a href="#A01-1">答案</a> </li><li><span id="Q01-2"></span>#include 的顺序以及尖叫括号和双引号的区别。<a href="#A01-2">答案</a> </li><li><span id="Q01-3"></span>进程和线程的区别，为什么要有线程？<a href="#A01-3">答案</a> </li><li><span id="Q01-4"></span>C++11有哪些新特性？<a href="#A01-4">答案</a> </li><li><span id="Q01-5"></span>为什么可变参数模板至关重要以及右值引用，完美转发，lambda<a href="#A01-5">答案</a> </li><li><span id="Q01-6"></span>malloc的原理，brk系统调用干什么的，mmap呢？<a href="#A01-6">答案</a></li><li><span id="Q01-7"></span>C++的内存管理方式，STL的allocaotr，最新版本默认使用的分配器。<a href="#A01-7">答案</a></li><li><span id="Q01-8"></span>C++/C的内存分配，栈和堆的区别，为什么栈要快？<a href="#A01-8">答案</a></li><li><span id="Q01-9"></span>C++和C的区别。<a href="#A01-9">答案</a></li><li><span id="Q01-10"></span>如何判断内存泄露，野指针是什么，内存泄漏怎么办？<a href="#A01-10">答案</a></li><li><span id="Q01-11"></span>内存分布<a href="#A01-11">答案</a></li><li><span id="Q01-12"></span>讲讲虚函数（内存布局，虚函数的局限，C++11提供的类似虚函数的新函数，两种动态多态的实现及优缺点）<a href="#A01-12">答案</a></li><li><span id="Q01-13"></span>类什么时候会析构？<a href="#A01-13">答案</a></li><li><span id="Q01-14"></span>虚函数底层机制。<a href="#A01-14">答案</a></li><li><span id="Q01-15"></span>C++解决内存泄漏方法。<a href="#A01-15">答案</a></li><li><span id="Q01-16"></span>查内存泄露 （valgrind）<a href="#A01-16">答案</a></li><li><span id="Q01-17"></span>C++处理异常可以有两种方式，一种是throw异常，一种是在函数中<br>return错误码。你怎么理解这两个方法的优劣.<a href="#A01-17">答案</a></li><li><span id="Q01-18"></span>C++11 future和promise，poll，libev优点。<a href="#A01-18">答案</a></li><li><span id="Q01-19"></span>如何查看函数所占用的内存。<a href="#A01-19">答案</a></li><li><span id="Q01-20"></span>C++多态是怎么实现的，哪些函数不能是虚函数？<a href="#A01-20">答案</a></li><li><span id="Q01-21"></span>malloc(0)返回什么？<a href="#A01-21">答案</a></li><li><span id="Q01-22"></span>静态变量什么时候初始化？<a href="#A01-22">答案</a></li><li><span id="Q01-23"></span>为什么析构函数要是虚函数，为什么C++没有默认析构函数为虚函数。<a href="#A01-23">答案</a></li><li><span id="Q01-24"></span>模板成员函数不可以是虚函数。<a href="#A01-24">答案</a></li><li><span id="Q01-25"></span>auto，shared_ptr, weak_ptr, unique_ptr，forward, move完美转发，RAII机制，lock_guard。<a href="#A01-25">答案</a></li><li><span id="Q01-26"></span>修改指向const对象的指针。<a href="#A01-26">答案</a></li><li><span id="Q01-27"></span>C++中类成员的访问权限和继承权限问题。<a href="#A01-27">答案</a></li><li><span id="Q01-28"></span>C++中static关键字的作用。<a href="#A01-28">答案</a></li><li><span id="Q01-29"></span>vector 跟 list 的iterator有什么区别？<a href="#A01-29">答案</a></li><li><span id="Q01-30"></span>cout和printf有什么区别？<a href="#A01-30">答案</a></li><li><span id="Q01-31"></span>为什么模板类一般都是放在一个h文件中？<a href="#A01-31">答案</a></li><li><span id="Q01-32"></span>STL的基本组成。<a href="#A01-32">答案</a></li><li><span id="Q01-33"></span>必须使用初始化列表初始化的成员变量。<a href="#A01-33">答案</a></li><li><span id="Q01-34"></span>struct和class的区别 、 union和struct的区别。<a href="#A01-34">答案</a></li><li><span id="Q01-35"></span>c++获得内存的各种方式</li><li><span id="Q01-36"></span>malloc和new的区别。<a href="#A01-36">答案</a></li><li><span id="Q01-37"></span>delete加[]与不加[]有什么区别？数组对象的时候怎么析构函数怎么释放？<a href="#A01-37">答案</a></li><li><span id="Q01-38"></span>智能指针有没有内存泄露的情况？<a href="#A01-38">答案</a></li><li><span id="Q01-39"></span>struct中为什么要字节对齐，怎么修改默认对齐方式。<a href="#A01-39">答案</a></li><li><span id="Q01-40"></span>java中有没有指针，所有的都是智能指针</li><li><span id="Q01-41"></span>memcpy和memmove的区别，剖析性能差异。<a href="#A01-41">答案</a></li><li><span id="Q01-42"></span>volatile的作用。<a href="#A01-42">答案</a></li><li><span id="Q01-43"></span>画一下类的对象的内存布局。<a href="#A01-43">答案</a></li><li><span id="Q01-44"></span>函数重载是怎么实现的（编译器在汇编层结合函数名和参数类型给重载等函数不同的汇编实现、C/C++ 时混编要使用extern告诉编译器这是不支持重载的C的代码）。<a href="#A01-44">答案</a></li><li><span id="Q01-45"></span>printf可变参数怎么实现的？<a href="#A01-45">答案</a></li><li><span id="Q01-46"></span>解释一下函数调用是怎么样的过程（怎么传参）。<a href="#A01-46">答案</a></li><li><span id="Q01-47"></span>C++引用和指针的区别。<a href="#A01-47">答案</a></li><li><span id="Q01-48"></span>内联函数与宏函数的区别以及各自优缺点。<a href="#A01-48">答案</a></li><li><span id="Q01-49"></span>代码可扩展性</li><li><span id="Q01-50"></span>函数栈帧。<a href="#A01-50">答案</a></li><li><span id="Q01-51"></span>面向对象特性。<a href="#A01-51">答案</a></li><li><span id="Q01-52"></span>C实现C++特性。<a href="#A01-52">答案</a></li><li><span id="Q01-53"></span>泛型编程。<a href="#A01-53">答案</a></li><li><span id="Q01-54"></span>模板底层实现原理，如何把int和T绑定？<a href="#A01-54">答案</a></li><li><span id="Q01-55"></span>STL库常用的接口</li><li><span id="Q01-56"></span></li><li><span id="Q01-57"></span>C语言怎么生成随机数；</li><li><span id="Q01-58"></span>A* a = new A; a-&gt;i = 10;在内核中的内存分配上发生了什么？</li><li><span id="Q01-59"></span>给你一个类，里面有static，virtual，之类的，问你这个类的内存分布。</li><li><span id="Q01-60"></span>如何给指定物理地址赋值，如何跳转到制定物理地址执行。</li><li><span id="Q01-61"></span>析构函数的作用</li><li><span id="Q01-62"></span>lambda的实质（编译器层面）</li><li><span id="Q01-63"></span>以下代码中这两个指针的区别，以及第一个指针离开作用域要delete，那第二个指针是否必须要delete？<a href="#A01-63">答案</a> </li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">    A* ptr1 = <span class="keyword">new</span> ptr();</span><br><span class="line">    A* ptr2 = <span class="keyword">new</span> (buff) A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="64"><li><span id="Q01-64"></span>什么时候需要重载，重载有什么坏处</li><li><span id="Q01-65"></span>怎么实现类A可以支持以下工作？重载运算符应该是全局的还是类内成员函数，两者有什么区别？</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line">A a;</span><br><span class="line">a= a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ol start="66"><li><span id="Q01-66"></span>如果不想一个类被继承应该怎么办？<a href="#A01-66">答案</a></li><li><span id="Q01-67"></span>宏定义和枚举的区别。 <a href="#A01-67">答案</a></li><li><span id="Q01-68"></span>函数指针和指针函数的区别。写个例子出来。<a href="#A01-68">答案</a></li><li><span id="Q01-69"></span>系统调用是什么。你用过哪些系统调用。什么系统调用会耗时长。</li><li>STL中迭代器的作用，有指针为何还要迭代器。<a href="#A01-70">答案</a> </li><li>C++ STL 内存优化</li><li>vector和list的区别的，应用，越详细越好。</li><li>给你1MB的内存，你们怎么设计， 才能使其利用率最高，产生的碎片最少</li><li>C++ 类成员初始化，为什么按顺序顺序， 构造函数的调用和 代码扩展，还有初始化列表？</li><li>类成员初始化的方式。</li><li>const成员函数的理解和应用。</li><li>这四者的区别：    <ul><li>const char* arr = “123”;</li><li>char* brr = “123”;</li><li>const char crr[] = “123”;</li><li>char drr[] = “123”;</li></ul></li><li>i++和++i的区别以及实现；</li><li>能写个函数在main函数执行前先运行的吗？</li><li>手写 share_ptr</li><li>C++运行池</li><li>当多个文件包含头文件时，会不会存在多份vector<int>的实现</int></li><li>STL里resize和reserve的区别</li><li>撸一个std::lower_bound，不断优化，直到最坏复杂度也为O(logN)</li><li>Q：C++里是怎么定义常量的？常量存放在内存的哪个位置？</li><li>C++ 类内可以定义引用数据成员吗？</li><li>隐式类型转换，如何避免</li><li>explicit关键字</li><li>C++类型转换有四种</li><li><span id="Q01-90"></span>说说你了解的RTTI.<a href="#A01-90">答案</a> </li><li>C++函数栈空间的最大值 </li><li>extern “C” ？</li><li>那么C++的锁你知道几种。</li><li>C语言如何处理返回值？</li><li>STL中vector的实现机制</li><li>STL标准库中的数据结构占用的哪一部分的内存</li><li>C++  的类中那些成员会被算入sizeof中</li><li>为什么要内存对齐</li><li>为什么会有大端小端，htol这一类函数的作用</li><li>手写一个智能指针类，怎么处理并发的情况，加锁的话怎么提高效率</li><li>说说右值引用。说说右值移动构造。一定会有控制权移交吗？为什么会有性能提升？你觉得这个新特性用的多吗？</li><li>那如果析构抛出异常怎么办？</li><li><span id="Q01-103"></span>inline和virtual能够同时修饰吗？<a href="#A01-103">答案</a> </li><li>一个32位的机子，最多有多少的内存，实际内存有这么多吗</li><li>模板的作用，给定一个数组和两个指针，手写一个队列模板</li><li>全局变量和static变量的区别.如果在两个.h文件中声明两个同名变量会怎么样？ 如果使用extern 如果没有使用·</li><li>浅拷贝和深拷贝的区别？</li><li>如果一个函数传入一个对象，那么这是浅拷贝还是深拷贝？</li><li>形参实参的区别</li><li>c++各种new的原理和应用——operator new,placement new，new operator</li><li>string的length和size一样吗</li><li>string是怎么增长的</li><li>虚函数，虚函数表，虚函数表是公用的吗</li><li>从汇编层去解释一下引用</li><li>STL allocator</li><li>iterator 与 container 之间的耦合关系</li><li>Type traits的作用</li><li>传入一个char *变量,怎样求这个字符数组的长度 用strlen还是sizeof啊?</li><li>识别手机号的正则表达式</li><li>C++中，::有什么意义</li><li>能否显示的调用构造函数和析构函数，举例说明</li><li>知道前向声明吗，有什么作用，什么情况下可以使用，举例</li><li>内联函数与宏函数的区别以及各自优缺点</li><li>C++隐式函数举例</li><li>静态链接  动态链接</li><li>Vector内存泄漏怎么办</li><li>父类指针查找虚表的过程。</li><li></li><li>函数只声明不定义会在什么时候报错？（如果不调用的话没问题，调用的话会在链接时出错）。</li><li>模板底层实现原理，如何把int和T绑定？</li><li>那vs出现链接错误，符号未定义什么情况？</li><li>手动实现STL的equal_range()</li></ol><hr><h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><ol><li><p><span id="A01-1"> 包括四个步骤：</span></p><ul><li>预处理（生成.ii文件）：<ul><li>对#define进行宏展开</li><li>处理所有条件编译指令，如#if、#ifdef、#elif、#ifndef、#endif等</li><li>处理#include语句，此过程是递归的</li><li>删除所有的注释</li><li>添加行号和文件标识</li><li>保留所有的#pragma编译器指令</li></ul></li><li>编译（生成.s汇编文件）：<ul><li>进行一系列词法、语法、语义分析，以及优化后生成相应的汇编代码文件。</li></ul></li><li>汇编（生成.o或.obj目标文件）：<ul><li>将汇编代码转化为机器可以执行的代码，每一个汇编语句几乎都对应一个机器指令。</li></ul></li><li>链接（生成.out或.exe可执行文件）：<ul><li>主要包括地址和空间分配、符号决议和重定位。<br><a href="#Q01-1">返回原题</a></li></ul></li></ul></li><li><span id="A01-2"> <ul><li>尖括号：包含系统标准库头文件时使用，从系统文件目录下查找；</li><li>双引号：包含自定义头文件时使用，从当前源文件目录下查找。<a href="#Q01-2">返回原题</a></li></ul></span></li><li><span id="A01-3"> <ul><li>区别：<ul><li>进程和线程是操作系统不同的资源管理方式。</li><li>进程拥有独立的地址空间，在保护模式下，进程崩溃不会影响其它进程，而线程之间共享内存，线程崩溃，会导致同一进程下的其它线程崩溃。</li><li>一个程序至少有一个进程，一个进程至少有一个线程。</li><li>进程是资源分配的最小单位，线程是CPU调度的最小单位。</li><li>不同进程间资源很难共享，但同一进程下的线程间则很容易。</li></ul></li><li>为什么要有线程？<ul><li>线程相比进程而言，更加轻量、更易创建和销毁。</li><li>同一进程中的线程之间共享内存，使得它们之间互相通信非常容易，互相切换也更加容易，极大地提高了运行效率；</li><li>线程的划分尺度小于进程，使得多线程的程序并发性高；<br><a href="#Q01-3">返回原题</a></li></ul></li></ul></span></li></ol><ol start="4"><li><span id="A01-4"> <ul><li><p>对象结构改进：</p><ul><li>继承基类的构造函数（using 基类名：基类名）；</li><li>默认成员值，在声明数据的时候赋一个默认值；</li><li>委托构造函数，用其它构造函数来做它的一部分或全部工作；</li><li>override关键字，防止因拼写错误而没有正确重载成员函数；</li><li>可以使用花括号初始化一个类的实例；</li><li>final关键字，防止成员函数被派生类重载 ；</li></ul></li><li><p>其他核心语言新增功能：</p><ul><li><p>新增基于范围的for循环（for (auto i: array)）；</p></li><li><p>自动类型推断auto；</p></li><li><p>匿名函数lambda：[捕获列表](参数列表)-&gt;返回类型{函数体}；</p></li><li><p>long long int类型，通常是64位；</p></li><li><p>移动语义：如果两个类对象较大时，交换起来非常耗时，这时便可以只转换所有权。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(type&amp; a, type&amp; b)</span> </span>&#123; </span><br><span class="line">    type t = <span class="built_in">std</span>::move(a); </span><br><span class="line">    a = <span class="built_in">std</span>::move(b); </span><br><span class="line">    b = <span class="built_in">std</span>::move(t); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>右值引用：可以绑定即将销毁的右值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type&amp;&amp; rr = rvalue;</span><br></pre></td></tr></table></figure></li><li><p>智能指针：shared_ptr和unique_ptr，取代了auto_ptr，防止内存泄漏；</p></li><li><p>原始字符串字面量，可以使用R前缀，将不会识别转义序列。如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = R<span class="string">"C:\user\temp"</span></span><br></pre></td></tr></table></figure></li><li><p>静态断言：使用static_assert使在编译时如果未满足条件则对错误信息打标记，这在模板中使用非常方便；</p></li><li><p>可变参数模板：可使用任意数量参数。如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... TArgs&gt; </span><br><span class="line">printv(T v, TArgs... args) &#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    printv(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后置返回类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template auto adding_func(const Lhs &amp;lhs, const Rhs &amp;rhs) -&gt; decltype(lhs+rhs) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs + rhs; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>空指针常量nullptr；</p></li><li><p>static_cast将左值转化为右值引用；</p></li><li><p>constexpr将变量或函数声明为字面值类型；</p></li></ul></li><li><p>标准库扩展：</p><ul><li><p>标准库元组模板tuple；</p></li><li><p>随机数库random：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; u(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">default_random_engine e; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>正则表达式库regex<br><a href="#Q01-4">返回原题</a></p></li></ul></li></ul></span></li></ol><ol start="5"><li><span id="A01-5"> <ul><li><p>可变参数模板：当我们既不知道想要处理的实参的数目，也不知道它们的类型时，可变参数模板是很有用的。格式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Ts&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T v, Ts... args)</span> </span>&#123; </span><br><span class="line">    func(args...); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完美转发：使用forward转发参数时会保留参数的左右值类型（格式：<code>std::forward&lt;T&gt;(t)</code>）</p></li><li><p>右值引用：必须绑定到右值的引用（typename&amp;&amp; val）</p></li><li><p>lambda函数：匿名函数，可以使代码变得简洁，不用费力去定义一个小函数。格式：<code>[捕获列表](参数列表)-&gt;返回类型{函数体}</code>，参数列表和返回类型可省略。<br><a href="#Q01-5">返回原题</a></p></li></ul></span></li></ol><ol start="6"><li><span id="A01-6"> <ul><li>malloc原理：根据用户要求，从堆里分配内存空间。为减少内存碎片和降低内存开销，采用内存池的方式。malloc利用隐式链表，在分配时遍历整个链表，选择合适的内存块分配。</li><li>brk和mmap系统：内存分配会调用brk或mmap系统，小于128k时调用brk在堆区分配，大于128k时调用mmap在映射区分配。<br><a href="#Q01-6">返回原题</a></li></ul></span></li></ol><ol start="7"><li><span id="A01-7"><ul><li>C++内存管理方式：new和delete；</li><li>STL中的Allocator：负责配置内存，但不负责构造对象（只相当于new的第一步）。为减少内存碎片，STL配置内存时采用两级配置器。当所需空间大于128B时采用第一级空间配置器，即使用malloc()等，小于128B时，采用第二级空间配置器，即内存池技术，通过空闲链表管理内存；</li><li>默认分配器：std::alloc。<br><a href="#Q01-7">返回原题</a></li></ul></span></li></ol><ol start="8"><li><span id="A01-8"><ul><li>栈和堆的区别：。<ul><li>分配方式：栈有动态分配和静态分配两种方式，而堆只有动态分配；</li><li>分配大小：栈是由低地址扩展的数据结构，是一块连续的内存区域；而堆是由高地址扩展的数据结构，是不连续的内存区域；</li><li>管理方式：栈由编译器自动分配和释放，而堆一般由程序员主动申请分配和释放，如果未能及时释放，可能会造成内存泄漏。</li></ul></li><li>栈更快的原因：<ul><li>栈是放在一块连续的内存区域上，所以数据定位的速度更快；而堆放在不连续的内存区域上，通过链表访问，访问效率更低；</li><li>栈是CPU提供指令支持的，在指令的处理速度上，对栈数据的处理速度自然比操作系统支持的堆数据要快；</li><li>栈放在一级缓存中，而堆放在二级缓存中，二者硬件性能差异巨大。<br><a href="#Q01-8">返回原题</a></li></ul></li></ul></span></li></ol><ol start="9"><li><span id="A01-9"><ul><li>C是面向过程的，C++是面向对象的，有封装、继承、多态三大特性；</li><li>C++是C的超集，有虚函数、内联函数、友元函数、引用、命名空间等；</li><li>动态分配内存时，C是malloc/free，而C++是new/delete；</li><li>输入和输出，C是scanf/printf，而C++是cin/cout；<br><a href="#Q01-9">返回原题</a></li></ul></span></li></ol><ol start="10"><li><span id="A01-10"><ul><li>内存泄漏：申请的一块内存没能及时释放，且没有指向它的指针了；</li><li>野指针：指向不明区域的指针。原因：没有初始化的指针；指向堆区域的指针在释放内存后，没有置为nullptr；</li><li>检查内存泄漏：<ul><li>使用Linux环境下的内存泄漏检测工具Valgrind进行检测；</li><li>写代码时添加内存分配和释放的统计功能，统计当前申请和释放的次数是否一致；</li><li>使用BoundsChecker，BoundsChecker是一个运行时错误检测工具，它主要用于定位程序运行时所发生的错误；</li><li>调试运行DEBUG版程序，运用以下技术：CRT（C run-time libraries）、运行时函数调用堆栈、内存泄漏时提示的内存分配序号（集成开发环境OUTPUT窗口），综合分析内存泄漏的原因，排除内存泄漏。</li></ul></li><li>如何解决内存泄漏：养成良好的写代码习惯，自己动态分配的内存空间，一定要记得及时释放；使用智能指针。<br><a href="#Q01-10">返回原题</a></li></ul></span></li></ol><ol start="11"><li><span id="A01-11"><ul><li>栈区：由编译器自动分配和释放，存放局部变量、函数参数值等，类似于数据结构中的堆；</li><li>堆区：由程序员主动申请分配和释放；</li><li>代码区：存放函数体的二进制代码；</li><li>全局（静态）区：用于存放全局变量、静态全局变量、静态局部变量；</li><li>文字常量区：用于存放常量字符串。<br><a href="#Q01-11">返回原题</a></li></ul></span></li></ol><ol start="12"><li><span id="A01-12"><ul><li>虚函数内存布局：如果一个类定义了虚函数，则会生成一个虚函数指针，一般放在对象内存布局的第一个位置上（即对象地址为虚函数地址），虚函数指针指针虚函数表，虚函数表中存放的是一系列虚函数的地址，虚函数地址的顺序与类中虚函数声明的顺序一致。</li><li>虚函数的局限：子类虚函数表与父类虚函数表的关系要么是继承、要么是重写、要么是新增，而对于继承的虚方法需要重复存储，浪费空间。</li><li>两种多态：<ul><li>静态多态：泛型编程（模板函数）和函数重载，编译时关联。<ul><li>优点：类型安全性较高、耦合性低，集合的元素类型不再局限于指针，具体类可以只实现需要的接口，生成代码性能高；</li><li>缺点：不能处理异类集合，可执行代码较大，模板库源码需要发布，对模板实参类型有约束。</li></ul></li><li>动态多态：虚函数，运行时关联。<ul><li>优点：能处理异类集合，可执行代码较小，可以完全编译而无需发布源码；</li><li>缺点：耦合性高（继承 的耦合性高于组合），类型安全性差（编译期无类型检查），性能低（层层继承）。<br><a href="#Q01-12">返回原题</a></li></ul></li></ul></li></ul></span></li></ol><ol start="13"><li><span id="A01-13"><ul><li>撤销类对象时；</li><li>超出作用域时；</li><li>动态分配的对象只有在指向该对象的指针被删除时才调用析构函数。<br><a href="#Q01-13">返回原题</a></li></ul></span></li></ol><ol start="14"><li><span id="A01-14"><ul><li>对于含有虚函数的类或继承自有虚函数的类，每个类使用一个虚函数表，每个类对象使用一个虚表指针，虚表指针指向虚函数表；</li><li>基类对象有一个虚表指针，指向基类的虚函数表，派生类对象也有一个虚表指针，指向派生类的虚函数表；<ul><li>若派生类重写了基类中的虚函数，则该派生类的虚函数表将保存重写的虚函数地址，而非基类的虚函数地址；</li><li>若派生类没有重写基类中的虚函数，则继承下来，派生类的虚函数表将保存基类中未被重写的虚函数地址；</li><li>若派生类新定义了新的虚函数，则该派生类的虚函数表将添加保存新虚函数的地址。<br><a href="#Q01-14">返回原题</a></li></ul></li></ul></span></li></ol><ol start="15"><li><span id="A01-15"><ul><li>使用智能指针，无需手动释放内存。</li><li>养成良好的写代码习惯。<br><a href="#Q01-15">返回原题</a></li></ul></span></li></ol><ol start="16"><li><span id="A01-16"><ul><li>使用Valgrind软件检测；</li><li>写代码时统计内存分配和释放的次数，统计当前二者次数是否一致；</li><li>使用BoundsChecker软件检测；</li><li>调试运行DEBUG版程序，使用以下技术：CRT（C Run-Time Libraries）、运行时函数调用堆栈、内存泄漏时提示的内存分配序号，综合分析内存泄漏的原因，排除内存泄漏。<br><a href="#Q01-16">返回原题</a></li></ul></span></li></ol><ol start="17"><li><span id="A01-17"><ul><li>使用throw：代码更加简洁，可以不用通过判断返回值就可以确定是否发生异常。不能被忽略，必须停下来处理。</li><li>使用错误码返回值：更加轻量级。但需要通过查找错误码才能知道具体发生的错误。错误信息可以被忽略。<br><a href="#Q01-17">返回原题</a></li></ul></span></li></ol><ol start="18"><li><span id="A01-18"><ul><li>future（只读）：提供了一种访问异步操作结果的机制。有三种状态：deferred（异步操作还没开始）、ready（异步操作已经完成）、timeout（异步操作完成）。</li><li>promise（只写）：每个promise关联一个future，对promise的写入会令future的值可用。</li><li>libev：高性能事件循环。</li><li>poll：未知。。。<br><a href="#Q01-18">返回原题</a></li></ul></span></li></ol><ol start="19"><li><span id="A01-19"><ul><li>没搞懂？<br><a href="#Q01-19">返回原题</a></li></ul></span></li></ol><ol start="20"><li><span id="A01-20"><ul><li>多态分为动态多态和静态多态：<ul><li>动态多态：通过虚函数实现。运行时通过指针指向的对象进行动态绑定。</li><li>静态多态：通过泛型编程（模板函数）和重载函数实现。编译时关联。</li></ul></li><li>以下函数不能为虚函数：<ul><li>普通函数：只能被重载，不能被覆盖，声明为虚函数没啥意义；</li><li>构造函数：虚函数是在不同对象产生不同的操作，构造函数之前对象还没产生，就无法使用虚函数；假设B类继承自A类，且A类的构造函数为虚函数，则构造B类对象时，只会执行B类的构造函数，这样A就不能构造了。</li><li>友元函数：C++不支持友元函数的继承；</li><li>静态成员函数：静态成员函数对每个类而言，只有一份代码，所有对象共享，而不归某个类共享，所以没有动态绑定的必要性。</li></ul></li><li>以下函数没有声明为虚函数的必要：<ul><li>内联函数：即使内联函数被声明为虚函数，编译器遇到这种情况不会把函数内联展开，而是当作普通函数处理；</li><li>赋值运算符：赋值运算符要求形参和类本身类型相同，帮基类中的赋值操作符形参为基类类型，即使声明为虚函数，也不能作为子类的赋值操作符。<br><a href="#Q01-20">返回原题</a></li></ul></li></ul></span></li></ol><ol start="21"><li><span id="A01-21"><ul><li>返回一个nullptr或一个不能用于访问对象的非null的合法指针，可以调用free()函数释放。</li><li>malloc(-1)返回一个NULL，因为-1转化为无符号整型后是一个很大的值，无法分配这么大的内存空间，所以只能返回NULL。<br><a href="#Q01-21">返回原题</a></li></ul></span></li></ol><ol start="22"><li><span id="A01-22"><ul><li>静态变量的初始化是在编译时进行，只初始化一次，赋值则发生在运行时。<br><a href="#Q01-22">返回原题</a></li></ul></span></li></ol><ol start="23"><li><span id="A01-23"><ul><li>在删除指向派生类的基类类型指针时，如果析构函数不是虚函数，则只会调用基类的析构函数，而不会调用派生类的析构函数，会发生内存泄漏。</li><li>为何默认析构函数不是虚函数：如果无需用到继承，虚析构函数便没有任何作用，但虚表指针和虚函数表的存在会导致资源浪费。<br><a href="#Q01-23">返回原题</a></li></ul></span></li></ol><ol start="24"><li><span id="A01-24"><ul><li>原因：模板成员函数可以实例化出很多类型，不同的参数实例化出不同的类型，因此虚函数表中需要在编译时装入所有实例类型，无法实现，而且内存消耗代价过高，因此不能将模板成员函数定义为虚函数。<br><a href="#Q01-24">返回原题</a></li></ul></span></li></ol><ol start="25"><li><span id="A01-25"><ul><li>auto：由编译器去分析表达式所属的类型；</li><li>shared_ptr：智能指针，允许多个shared_ptr指针指向同一个对象，采用引用计数，当计数为0时，自动释放自己所管理的对象；</li><li>unique_ptr：一个unique_ptr拥有它所指向的对象，某个时刻只能有一个unique_ptr指向一个给定对象，当unique_ptr被销毁时，它所指向的对象也被销毁。不支持普通的拷贝和赋值操作。</li><li>weak_ptr：是一个不控制所指向对象生存期的智能指针，它指向一个由shared_ptr管理的对象。将一个weak_ptr绑定到一个shared_ptr不会改变其引用计数。一旦最后一个指向对象的shared_ptr被销毁时，即使有weak_ptr指向对象，对象也会被释放。</li><li>move：将一个左值转为对应的右值引用类型。</li><li>forward：使用forward转发参数时会保留参数的左右值类型。格式：<code>std::forward&lt;T&gt;(t)</code></li><li>完美转发：使用模板函数转发参数时，会保留参数的左右值类型。</li><li>RAII机制（Resourse Acquisition Is Initialization，资源获取即初始化）：用于管理资源、避免泄漏。通过把资源用类封装起来，对资源操作都在类的内部，在析构函数内释放资源，从而当定义的局部变量生命期结束时，它的析构函数就会自动地被调用，便无需程序员显示地去调用释放资源的操作了。</li><li>lock_guard：做互斥量mutex的RAII。在构造lock_guard对象时，传入的mutex对象会被当前线程锁住，析构时，它所管理的mutex对象会自动解锁。lock_guard并不负责管理mutex对象的生命周期，只是简化了其上锁和解锁操作，而且不必担心异常安全问题。<br><a href="#Q01-25">返回原题</a></li></ul></span></li></ol><ol start="26"><li><span id="A01-26"><ul><li><p>使用const_cast：例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> c = <span class="string">'C'</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pc = &amp;c; </span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(pc);</span><br></pre></td></tr></table></figure><p>  <a href="#Q01-26">返回原题</a></p></li></ul></span></li></ol><ol start="27"><li><span id="A01-27"><ul><li>访问权限：private成员仅供类内部成员和友元函数访问；protected成员在没有继承时和private访问权限相同；public成员可供类内部成员、友元函数、类对象实例访问。</li><li>继承时的访问权限：<ul><li>public派生：基类private在派生中不可见，基类protected和private在派生类中保留原有访问权限；派生类实例对象仅可访问基类的public成员；</li><li>protected派生：基类private在派生类中不可见，基类protected和private在派生类中均变成protected成员；派生类对象不可访问基类的任何成员；</li><li>private派生：基类private在派生类中不可见，基类protected和private在派生类中均变成private成员；派生类对象不可访问基类中的任何成员；<br><a href="#Q01-27">返回原题</a></li></ul></li></ul></span></li></ol><ol start="28"><li><span id="A01-28"><ul><li>改变生命期：将其存储在全局（静态）区，程序运行结束后，才释放内存；</li><li>改变作用域：将全局变量和函数声明为static后，会将其对其他源文件隐藏；</li><li>默认初始化为0：全局静态区中所有字节默认都是0x00。<br><a href="#Q01-28">返回原题</a></li></ul></span></li></ol><ol start="29"><li><span id="A01-29"><ul><li>vector的iterator在删除或增加一个元素后，后面的就可能失效了；而list的iterator在删除或添加元素后还可以继续使用。</li><li>vector的iterator支持“+”、“+=”、“&gt;”等操作符，而由于list在内存空间上不是连续的，所以list的iterator不支持以上操作，只支持“++”。<br><a href="#Q01-29">返回原题</a></li></ul></span></li></ol><ol start="30"><li><span id="A01-30"><ul><li>printf需要指定格式，而cout无需指定格式；</li><li>printf是函数，而cout是ostream对象，和&lt;&lt;搭配使用；</li><li>printf是实参函数，没有类型检查，不安全；cout是通过运算符重载实现的，安全；</li><li>printf会将输出立刻显示在屏幕上，而cout会先存入缓冲区，在进行刷新缓冲操作后才会显示在屏幕上（常见缓冲刷新操作：flush，endl，调用cerr、clog、cin，退出程序）；</li><li>printf遇到不认识的类型的就没办法了，而cout对于不认识的类型可以通过重载来解决。<br><a href="#Q01-30">返回原题</a></li></ul></span></li></ol><ol start="31"><li><span id="A01-31"><ul><li>当不使用模板类时，编译器不会去实例化它；当使用它时，编译器才会去实例化它。</li><li>编译器一次只能处理一个单元，即处理一个cpp文件，所以实例化时需要看到模板的完整定义，因此需要放到.h文件中。</li><li>cpp在编译期间不能决定模板参数的类型，所以不能生成模板函数的实例，因此会把模板类型带到链接期间，如果这个期间有函数调用了该实例，而由于没有把模板实例到特定类型，就会导致编译错误。<br><a href="#Q01-31">返回原题</a></li></ul></span></li></ol><ol start="32"><li><span id="A01-32"><ul><li>容器：可容纳一些数据的模板类。</li><li>迭代器：用于遍历容器中的数据对象。</li><li>算法：处理容器中数据的方法或操作。</li><li>分配器：给容器分配存储空间。</li><li>仿函数：用于协助算法完成各种操作。</li><li>配接器：用于套接适配仿函数。<br><a href="#Q01-32">返回原题</a></li></ul></span></li></ol><ol start="33"><li><span id="A01-33"><ul><li>const修饰的类成员或引用成员：在声明后马上要初始化，在构造函数中的操作为赋值，是不被允许的。</li><li>子类初始化父类的私有成员：需要在参数初始化列表中显示调用父类构造函数；</li><li>对象成员：数据成员是对象，并且对象只有含参数的构造函数。<br><a href="#Q01-33">返回原题</a></li></ul></span></li></ol><ol start="34"><li><span id="A01-34"><ul><li>struct和class的区别：<ul><li>都可以定义类，都可以用于继承。但struct的默认访问权限和继承方式是public，而class默认是private；</li><li>class可定义模板形参；</li><li>struct可以在定义的时候直接以{}对其成员赋初值，而class不可以。</li></ul></li><li>struct和union的区别：<ul><li>两者都是用不同的数据类型成员组成，但在任何特定时刻，共用体只存放一个被选中的成员，而结构体则存放所有的成员变量；</li><li>对共用体的不同成员赋值，会将原有值覆盖，而对结构体的不同成员赋值是互不影响的；</li><li>struct各成员有自己独立的内存空间，同时存在；而struct的所有成员不能同时占用它的内存空间，不能同时存在；</li><li>sizeof(struct)会返回对齐之后所有成员大小相加之和，而sizeof(union)返回最大成员变量的大小。<br><a href="#Q01-34">返回原题</a></li></ul></li></ul></span></li></ol><ol start="36"><li><span id="A01-36"><ul><li>malloc是c语言函数，而new是C++的运算符；</li><li>都用于申请动态内存，但new比malloc更加智能，new在对象创建的时候自动执行构造函数；</li><li>new返回指定类型的指针，并自动计算出所需要的大小，而malloc必须用户指定大小，并且返回类型为void*，必须强行转换为实际类型的指针。<br><a href="#Q01-36">返回原题</a></li></ul></span></li></ol><ol start="37"><li><span id="A01-37"><ul><li><p>delete释放new分配的单个对象指针指向的内存，delete[]释放new分配的对象数组指针指向的内存；</p></li><li><p>对于简单的类型，使用new分配的不管是数组不是非数组形式内存空间，用两种方式均可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span>[] a; <span class="comment">// 与上式等价</span></span><br></pre></td></tr></table></figure></li><li><p>对于类类型，如果使用new分配的是数组形式的内存空间a[10]，用delete只会调用a[0]的析构函数，从而造成内存泄漏，因此此种情况下只能用delete[]。<br><a href="#Q01-37">返回原题</a></p></li></ul></span></li></ol><ol start="38"><li><span id="A01-38"><ul><li>循环引用时可引起内存泄漏，即两个shared_ptr相互引用，引用计数都是1，不能自动释放。</li><li>解决办法：使用弱引用weak_ptr来打破循环引用。<br><a href="#Q01-38">返回原题</a></li></ul></span></li></ol><ol start="39"><li><span id="A01-39"><ul><li>对齐的原因：<ul><li>各个硬件平台对存储空间的处理上有很大的不同，一些平台对某些特定类型的数据只能从某些特定地址开始存取。</li><li>效率上的考虑。比如一个int型数据存放在偶地址开始的地方，那么一个读周期就可以32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对再次读出的结果的高低字节进行拼凑才能得到32bit数据。</li></ul></li><li>修改对齐：<ul><li>使用伪指令<code>#pragma pack(n)</code>，编译器将按照n个字节对齐；</li><li>使用伪指令<code>#pragma pack()</code>，取消自定义字节对齐方式。<br><a href="#Q01-39">返回原题</a></li></ul></li></ul></span></li></ol><ol start="41"><li><span id="A01-41"><ul><li>memcpy：<ul><li>形式：<code>void *memcpy(void *dest, const void *src, size_t n);</code></li><li>描述：memcpy()函数从src内存中白拷贝n个字节到dest内存区域，但是源和目的内存区域不能重叠。返回指向dest的指针。</li></ul></li><li>memmove：<ul><li>形式：<code>void *memmove(void *dest, const void *src, size_t n);</code></li><li>描述：memmove()函数从src内存中拷贝n个字节到dest内存区域，但是源和目的的内存可以重叠。返回一个指向dest的指针。</li></ul></li><li>唯一区别：memmove()允许源和目的区域重叠，而memcpy()不允许。<br><a href="#Q01-41">返回原题</a></li></ul></span></li></ol><ol start="42"><li><span id="A01-42"><ul><li>描述：一个定义为volatile的变量是说这变量可能会被意想不到地改变，于是编译器就不会去优化这个变量的值了。即优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。</li><li>用处：<ul><li>硬件寄存器（如：状态寄存器）</li><li>一个中断服务子程序中会访问到的非自动变量</li><li>多线程应用中被几个任务共享的变量<br><a href="#Q01-42">返回原题</a></li></ul></li></ul></span></li></ol><ol start="43"><li><span id="A01-43"><ul><li><a href="https://www.cnblogs.com/QG-whz/p/4909359.html" target="_blank" rel="noopener">详见CSDN</a>。<br><a href="#Q01-43">返回原题</a></li></ul></span></li></ol><ol start="44"><li><span id="A01-44"><ul><li>函数重载：在同一作用域内，可以有一组具有相同函数名、不同参数列表的函数，这组函数被称为重载函数。</li><li>底层实现：C++利用name mangling（倾轧）技术，即在编译过程中，将函数、变量的名称重新改编的机制，来改变函数名，区分参数不同的同名函数。对于函数<code>void foo(int x, int y);</code>，在被C编译器编译后在库中的名字为<code>_foo</code>，而C++编译器则会产生像<code>_foo_int_int</code>的名字，所以编译之后C仍然无法辨别函数名相同、参数不同的函数。<br><a href="#Q01-44">返回原题</a></li></ul></span></li></ol><ol start="45"><li><span id="A01-45"><ul><li>printf是从右向左进行入栈的，后面的变量入栈后，前面的字符串再入栈。</li><li>printf的实现中有va_arg、va_start等函数，用于解析字符串，检查有多少个%d、%x等之类的符号，通过这个确认后面跟了多少参数。</li><li>详见：<a href="http://www.360doc.com/content/12/0804/11/3725126_228273988.shtml" target="_blank" rel="noopener">C可变参数实现原理</a>。<br><a href="#Q01-45">返回原题</a></li></ul></span></li></ol><ol start="46"><li><span id="A01-46"><ul><li>参数入栈：将参数按照调用约定（C是从右向左）依次压入系统栈中； </li><li>返回地址入栈：将函数调用语句的下一条语句的地址保存在栈中，以便函数调用完成后返回；</li><li>跳转到函数体处；</li><li>如果函数体内定义了变量，将变量压栈；</li><li>将每一个形参以栈中对应的实参值取代，执行函数体的功能体；</li><li>将函数体中的变量、保存到栈中的实参值，依次从栈中取出，释放栈空间（出栈）；</li><li>执行return语句返回。从栈中取出刚开始调用函数时压入的地址，跳转到函数的下一条语句。当return语句不带有表达式时，按照保存的地址返回；否则将计算出的return表达式的值保存起来，然后再返回。<br><a href="#Q01-46">返回原题</a></li></ul></span></li></ol><ol start="47"><li><span id="A01-47"><ul><li>指针是一个变量，存储一个地址，指向内存中的一个单元，而引用是另一个变量的别名；</li><li>指针和引用的自增运算意义不一样；</li><li>对指针进行sizeof()操作，得到的是指针本身的大小，而对引用进行sizeof()操作，得到的是对象的大小；</li><li>有指向指针的指针，即多级指针，但没有多级引用；</li><li>引用定义时必须赋初值，而指针定义时可以不用赋初值；</li><li>有const指针，但没有const引用；</li><li>指针的值在初始化之后可以改变，即指向其它的存储单元，而引用在进行初始化后就不能再改变了<br><a href="#Q01-47">返回原题</a></li></ul></span></li></ol><ol start="48"><li><span id="A01-48"><ul><li>区别：<ul><li>展开的时间不同：宏函数由预处理器对宏进行替代，而内联函数是通过编译器控制来实现的。</li><li>宏函数只是做简单的文本替换，编译内联函数可以嵌入到目标代码；</li><li>内联函数会做类型、语法检查，而宏函数不具有这样的功能。</li><li>内联函数是函数，而宏函数不是；</li></ul></li><li>宏函数：<ul><li>优点：宏在调用的地方，仅仅是参数的替换，不会出现函数调用那种压栈、出栈时的时间和空间的开销，执行效率高；</li><li>缺点：没有检查参数类型是否匹配，不安全。</li></ul></li><li>内联函数：<ul><li>优点：函数代码被放入符号表中，在使用时进行替换，效率很高；会有类型检查，因此够安全；可以作为类的成员函数，可以使用所在类的保护成员及私有成员。</li><li>缺点：如果函数代码过长，使用内联将消耗过多内存；如果函数体内有循环，那么 执行函数代码时间比调用开销大。<br><a href="#Q01-48">返回原题</a></li></ul></li></ul></span></li></ol><ol start="50"><li><span id="A01-50"><ul><li>函数桢栈：本质是一种栈，专门用于保存函数调用过程中的各种信息（参数、返回地址、本地变量）。每调用一个函数，就会生成一个新的栈桢。</li><li>桢栈包括：函数的返回地址和参数、临时变量、函数调用的上下文；</li><li>函数调用参考：<a href="#A01-46">第46题</a>。<br><a href="#Q01-50">返回原题</a></li></ul></span></li></ol><ol start="51"><li><span id="A01-51"><ul><li>封装：把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏；</li><li>继承：可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。继承的过程就是从一般到特殊的过程。<ul><li>继承的实现方式有三类：实现继承、接口继承和可视继承。</li><li>实现继承：使用基类的属性和方法而无需额外编码的能力；（非虚函数）</li><li>接口继承：仅使用属性和方法的名称，但是子类必须提供实现的能力；（纯虚函数）</li><li>可视继承：子窗体（类）使用基窗体（类）的外观和实现代码的能力。（虚函数）</li></ul></li><li>多态：C++多态意味着调用成员函数时，会根据调用的对象的类型来执行不同的函数。<ul><li>多态的实现方式有两种：覆盖和重载。</li><li>静态多态和动态多态。<br><a href="#Q01-51">返回原题</a></li></ul></li></ul></span></li></ol><ol start="52"><li><span id="A01-52"><ul><li>C语言实现封装性：将属性和方法（函数指针）封装到特定结构体中；</li><li>C语言实现继承性：使用组合，即在新有类中定义已有类的对象，就可以在新类中通过已有类的对象访问已有类自己的成员变量与函数；</li><li>C语言实现多态：通过函数覆盖实现。<br><a href="#Q01-52">返回原题</a></li></ul></span></li></ol><ol start="53"><li><span id="A01-53"><ul><li>泛型编程：以独立于任何特定类型的方式编写代码。</li><li>在C++中，模板是泛型编程的基础。<br><a href="#Q01-53">返回原题</a></li></ul></span></li></ol><ol start="54"><li><span id="A01-54"><ul><li>编译器并不是把函数模板处理成能够处理任意类的函数。编译器从函数模板通过具体类型产生不同的函数，编译器会对函数模板进行两次编译：在声明的地方对模板代码本身进行编译，在调用的地方对参数替换后的代码进行编译。<br><a href="#Q01-54">返回原题</a></li></ul></span></li></ol><ol start="66"><li><span id="A01-66"><ul><li><p>将类的构造函数和析构函数设为private：缺点是不能定义类的对象，解决办法是写一个静态方法来创建和删除类对象，因而只能在堆上建立对象；</p></li><li><p>使用虚继承：既可在堆上创建对象，也可在栈上创建对象，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> T;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Base() &#123;&#125;</span><br><span class="line">    ~Base() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须是虚继承：</span></span><br><span class="line"><span class="comment">// 若非虚继承，则由于每个类只初始化自己的直接基类，因此A初始化FinalClass，FinalClass初始化Base类，不会报错；</span></span><br><span class="line"><span class="comment">// 若是虚继承，则由最低层次的派生类构造函数初始化虚基类，而A不是Base的友元，无法调用其私有构造函数，帮编译报错。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Base&lt;FinalClass&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FinalClass() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> <span class="keyword">public</span> FinalClass &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(); <span class="comment">// 继承时报错，无法通过编译</span></span><br><span class="line">    <span class="comment">// 解释：由于FinalClass使用了虚继承，所以要创建A对象，A类的构造函数就要先构造Base类的构造函数，</span></span><br><span class="line">    <span class="comment">// 而Base类的构造函数为私有成员，仅能友元FinalClass访问（友元无法继承），所以无法构造Base类，</span></span><br><span class="line">    <span class="comment">// 因而编译错误。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <a href="#Q01-66">返回原题</a></p></li></ul></span></li></ol><ol start="67"><li><span id="A01-67"><ul><li>宏定义是在预处理阶段进行的文本替换，而枚举是在编译的阶段进行的处理；</li><li>宏作为指令存储在代码段，而枚举作为常量，存储在数据区；</li><li>枚举常量具有类型，而宏没有类型；</li><li>枚举一次可以定义大量相关的常量，而宏只能定义一个。<br><a href="#Q01-67">返回原题</a></li></ul></span></li></ol><ol start="68"><li><span id="A01-68"><ul><li>函数指针：指向函数的指针，如<code>int(*pf)(char, bool)</code>，为指向返回类型为int、参数为(char, bool)的函数的指针。</li><li>指针函数：返回值会指针的函数。如<code>int* fun(char a, bool b)</code>，其本身是个函数，返回值为int*型指针。<br><a href="#Q01-68">返回原题</a></li></ul></span></li></ol><ol start="70"><li><span id="A01-70"><ul><li>迭代器和指针的区别：迭代器不是指针，是类模板，但表现得像指针（通过重载指针的一些运算符*、-&gt;、++、–等，来模拟指针的功能）。迭代器本质是封装了原生指针，提供了比指针更高级的行为。迭代器返回的是对象的引用而非对象的值。</li><li>为何要用迭代器：迭代器就是把不同集合类的访问逻辑抽象出来，使得不用暴露集合内部的结构而达到循环遍历集合的结果。<br><a href="#Q01-70">返回原题</a></li></ul></span></li></ol><ol start="103"><li><span id="A01-103"></span></li></ol><ul><li>inline函数是将该函数的代码展开到调用该函数的地方，所以inline函数是没有地址的。</li><li>virtual函数的调用时在程序运行时根据调用函数的对象时父类对象还是子类对象来决定该调用哪一个虚函数，其中的原理就是通过vptr，vtbl等实现的，vptr指向vtbl中的虚函数，vbtl保存了虚函数的地址入口，所以每个虚函数都有个地址，这个地址保存在对应的虚函数表中，这个显然与inline函数没有地址是相违背的，所以inline和virtual是存在冲突的。<br><a href="#Q01-103">返回原题</a></li></ul><ol start="90"><li><span id="A01-90"><ul><li>RTTI(Run-Time Type Idetification，运行时类型检查)，提供了运行时确定类对象类型的方法。</li><li>RTTI提供了两个有用的操作符：<ul><li>typeid：返回指针或对象的实际类型。</li><li>dynamic_cast：将基类指针或引用安全地转化为派生类的指针或引用。<br><a href="#Q01-90">返回原题</a></li></ul></li></ul></span></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发岗面试问题总结之C/C++语言&lt;/p&gt;
    
    </summary>
    
      <category term="Job Hunting" scheme="/categories/Job-Hunting/"/>
    
    
      <category term="求职" scheme="/tags/%E6%B1%82%E8%81%8C/"/>
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Welcome To Liuyee&#39;s Blog</title>
    <link href="/2019/08/12/Welcome/"/>
    <id>/2019/08/12/Welcome/</id>
    <published>2019-08-12T05:15:04.000Z</published>
    <updated>2019-08-15T08:39:53.571Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>Welcome to my blog. I will share my life, study, and so on in this blog.</p><div class="figure " style="width:100%;"><a class="fancybox" href="deer.jpg" title data-caption data-fancybox="v"><img class="fig-img" src="deer.jpg" style="width:100%;height:100%;" alt></a></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Don’t aim for success if you want it, just stick to what you love and believe in, and it will come naturally.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux文件和目录</title>
    <link href="/2019/08/11/linux-files/"/>
    <id>/2019/08/11/linux-files/</id>
    <published>2019-08-11T14:13:19.000Z</published>
    <updated>2019-08-16T13:33:47.018Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h3 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h3><figure class="codeblock codeblock--tabbed"><figcaption><span>查看文件权限</span><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ ls -l 文件名</span><br><span class="line">-rw-rw-r--. <span class="number">1</span> liuyee liuyee <span class="number">25</span> <span class="number">6</span>月  <span class="number">16</span> <span class="number">04</span>:<span class="number">13</span> 文件名</span><br></pre></td></tr></tbody></table></figure></div></figure><p>其中，</p><ul><li>第一列第一个字符代表文件类型：<ul><li>-：普通文件，d：目录，b：设备文件（块设备），c：设备文件（字符文件），1：软连接（快捷方式）</li></ul></li><li>第一列第2-4、5-7、8-10个字符分别代表所属用户（u）、所属组（g）、其他人（o）的权限：<ul><li>三个字符位依次代表：读、写、执行的权限；</li><li>r：可读，w：可写，x：可执行，-：无对应权限位的权限。</li></ul></li><li>第二列：所属用户</li><li>第三列：所属组</li><li>第四列：文件大小</li><li>第…列：…</li></ul><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><ol><li>在原来权限的基础上改变权限</li></ol><ul><li><p>chmod {u/g/o/ugo}{+/-}{r/w/x/rwx},{u/g/o/ugo}{+/-}{r/w/x/rwx} 文件名</p></li><li><p>例子1：给文件名的所有者加上可执行权限、所有组加上可写权限、其他人减去可读权限。</p></li></ul><figure class="codeblock codeblock--tabbed"><figcaption><span>例1</span><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ chmod u+x,g+w,o-r 文件名</span><br></pre></td></tr></tbody></table></figure></div></figure><ul><li>例子2：给文件名的所有者和所有组减去可读权限和可写权限。</li></ul><figure class="codeblock codeblock--tabbed"><figcaption><span>例2</span><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ chmod ug-rw 文件名</span><br></pre></td></tr></tbody></table></figure></div></figure><ol start="2"><li>不管原有权限，直接对所有用户及组赋予、加上、减去新的权限</li></ol><ul><li><p>chmod a{+/-/=}{r/w/x/rwx} 文件名</p></li><li><p>例子：给文件名的所有者、所有组和其他人都赋予可读权限，无其它权限。</p></li></ul><figure class="codeblock codeblock--tabbed"><figcaption><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ chmod a=r 文件名</span><br></pre></td></tr></tbody></table></figure></div></figure><ol start="3"><li>用数字代替权限</li></ol><ul><li><p>r=4，w=2，x=1，-=0</p></li><li><p>例子：若文件的权限为755，则由于7=4+2+1，5=4+1，所以文件的所属用户权限为可读、可写、可执行；所属组和其它用户的用户权限为可读、可执行。</p></li></ul><figure class="codeblock codeblock--tabbed"><figcaption><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ chmod <span class="number">755</span> 文件名</span><br></pre></td></tr></tbody></table></figure></div></figure><ol start="4"><li>改变文件夹及里面所有文件和子文件夹的权限</li></ol><ul><li>chmod -R 000 文件夹名<ul><li>-R是使用递归的意思</li></ul></li></ul><h3 id="改变文件所有者和所属组"><a href="#改变文件所有者和所属组" class="headerlink" title="改变文件所有者和所属组"></a>改变文件所有者和所属组</h3><ol><li>改变所有者</li></ol><ul><li>chown 用户名 文件名</li></ul><ol start="2"><li>改变所属组</li></ol><ul><li>chgrp 组名 文件名</li></ul><ol start="3"><li>同时改变所有者和所属组</li></ol><ul><li>chown 用户名:组名 文件名</li><li>chown 用户名.组名 文件名</li></ul><ol start="4"><li>改变文件夹及里面所有文件和子文件夹的所有者和所属组</li></ol><p>加上参数-R</p><h3 id="查看和更改缺省权限"><a href="#查看和更改缺省权限" class="headerlink" title="查看和更改缺省权限"></a>查看和更改缺省权限</h3><ol><li><p>umask [-S] （英文愿意：the user file-creation mask）</p><ul><li>以rwx的形式显示新建文件缺省权限，可以通过此命令显示、设置文件或目录的缺省权限。</li><li>缺省创建的文件不具有可执行权限。</li><li>不接选项-S时，以数字形式呈现。例如若显示为0022，第一位0为特殊权限，后三位表征所有者、所属组、其它人的权限，用777相减得到755，即权限为u=rwx,g=r-x,o=r-x。因此默认情况下创建的文件夹权限为rwxr-xr-x，默认创建的文件的权限为rw-r–r–。</li></ul></li></ol><hr><h2 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h2><p>除了特定的文件外，Linux下的文件都没有后缀名，那么如何查看文件类型呢？可使用如下命令：</p><ul><li>file 文件名</li><li>例子：xxyy为用gedit创建的一个文本文件，编码方式为ASCII码。</li></ul><figure class="codeblock codeblock--tabbed"><figcaption><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[liuyee@localhost ~]$ file xxyy</span><br><span class="line"><span class="function">xxyy: <span class="title">ASCII</span> <span class="title">text</span></span></span><br></pre></td></tr></tbody></table></figure></div></figure><hr><h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><h3 id="系统文件夹"><a href="#系统文件夹" class="headerlink" title="系统文件夹"></a>系统文件夹</h3><ul><li>bin：存放二进制文件；</li><li>boot：存放系统启动文件及内核；</li><li>dev：存放设备文件；</li><li>etc：存放配置文件；</li><li>home：存放用户的家目录；</li><li>lib：存入链接库文件；</li><li>media：系统挂载点（比如说插入U盘时，会访问该文件夹下的子文件夹）；</li><li>mnt：挂载点；</li><li>opt：源码安装路径；</li><li>proc：内核参数，不占用内核大小；</li><li>root：root用户的家目录；</li><li>sbin：存放系统二进制文件；</li><li>tmp：临时文件；</li><li>usr：安装软件时的默认文件；</li><li>var：缓存、日志、数据库文件。</li></ul><p>Linux只有一个根盘符’/‘，其它分区都放在根盘符下的文件夹内。</p><h3 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h3><ul><li><p>tree /boot/</p><p>  查看/boot/的目录树。</p></li></ul><hr><h2 id="Linux文件和目录管理"><a href="#Linux文件和目录管理" class="headerlink" title="Linux文件和目录管理"></a>Linux文件和目录管理</h2><h3 id="目录与路径处理命令"><a href="#目录与路径处理命令" class="headerlink" title="目录与路径处理命令"></a>目录与路径处理命令</h3><ul><li><p>pwd</p><p>  显示当前工作目录（Print Working Directory）</p></li><li><p>cd 目录</p><p>  change dir到指定目录。</p></li><li><p>cd -</p><p>  切换到前一次进入的目录（可以来回不停地在两个目录间切换）</p></li><li><p>mkdir 目录名</p><p>  创建目录，可以同时创建多个。</p></li><li><p>mkdir -p 父目录名/子目录名</p><p>  若父目录名不存在时，同时创建父目录名和子目录名。</p></li><li><p>rmdir 目录名</p><p>  删除目录，只能删除空目录。</p></li><li><p>rmdir -p 父目录名/子目录名</p><p>  同时删除子目录名和父目录名。等删除的目录名必须为空。</p></li><li><p>rm -rf 目录名</p><p>  强制递归删除目录名及其所有子目录。</p></li><li><p>echo $PATH</p><p>  显示系统默认路径。</p></li><li><p>PATH=’…:目录名’</p><p>  将目录名加入系统默认路径。</p></li></ul><h3 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h3><ol><li>删除、拷贝、剪切操作</li></ol><ul><li><p>cp [选项]… /PATH1/xx /PATH2/yy</p><ul><li>如果yy是一个文件夹，则将PATH1下的xx拷贝到PATH2下的yy文件夹下；</li><li>如果yy不是一个文件夹或不存在，则将PATH1下的xx拷贝到PATH2下，并重命名为yy。</li></ul></li><li><p>mv [选项]… /PATH1/xx /PATH2/yy</p><ul><li>如果yy是一个文件夹，则将PATH1下的xx剪切到PATH2下的yy文件夹下；</li><li>如果yy不是一个文件夹或不存在，则将PATH1下的xx剪切到PATH2下，并重命名为yy。</li><li>同一个文件夹操作，即可以改名。</li></ul></li><li><p>rm [选项] 文件</p><p>  删除文件。可选参数：-f 强制删除、-r 递归删除、-rf 强制递归删除</p></li><li><p>touch 文件名</p><ul><li>创建一个空文件；</li><li>创建有文件名有空格的文件： touch “program files”</li></ul></li></ul><ol start="2"><li>查看文件 </li></ol><ul><li><p>cat 文件名</p><ul><li>显示文件内容；</li><li>-n 指定显示行号。</li></ul></li><li><p>tac 文件名</p><ul><li>显示文件内容，反向列示。</li></ul></li><li><p>more 文件名</p><ul><li>按空格或f：翻页</li><li>按Enter：换行</li><li>按Q：退出</li></ul></li><li><p>less 文件名</p><ul><li>分布显示文件内容，可按PgUp往上翻页。</li><li>‘/关键词’：查找关键词</li></ul></li><li><p>tail 文件名</p><ul><li>显示文件后面几行，默认最后10行；</li><li>-n NUM 指定行数；</li><li>-f 动态显示文件末尾内容。</li></ul></li></ul><ol start="3"><li>创建软链接</li></ol><ul><li><p>ln -s 文件名 文件名.soft</p><ul><li>生成软链接</li><li>软链接权限全部为rwx，但最权限仅由软链接所指向的文件的权限决定；</li><li>原文件丢失，软链接无法继续访问。</li></ul></li><li><p>ln 文件名 文件名.hard</p><ul><li>生成硬链接</li><li>相比拷贝，硬链接可以和指向的文件同时更新（映射到同一个i节点）；</li><li>原文件丢失，硬链接可以继续访问；</li><li>不能跨分区；</li><li>不能针对目录使用。</li></ul></li></ul><h3 id="文件搜索-find"><a href="#文件搜索-find" class="headerlink" title="文件搜索 find"></a>文件搜索 find</h3><ol><li>搜索条件为文件名</li></ol><ul><li>find / -name init<ul><li>在根目录下查找文件名为init的文件</li></ul></li><li>find / -name *init*<ul><li>在根目录下查找文件名中包含init的文件</li></ul></li><li>find / -name *init<ul><li>在根目录下查找文件名以init开头的文件</li></ul></li><li>find / -name init???<ul><li>在根目录下查找文件名以init开头并且后面接三个字符的文件</li></ul></li><li>find / -iname init<ul><li>在根目录下查找文件名为init的文件，不区分大小写；</li><li>其它用法和name相同</li></ul></li></ul><ol start="2"><li>搜索条件为文件大小</li></ol><ul><li>find / -size +204800<ul><li>在根目录下查找文件大小大于200MB的文件；</li><li>后面的参数为代表大于、为负代表小于、无符号代表等于。</li></ul></li></ul><ol start="3"><li>搜索条件为文件所有者/所属组</li></ol><ul><li>find / -user username<ul><li>在根目录下查找文件所有者为username的文件。</li></ul></li><li>find / -group groupname<ul><li>在根目录下查找文件所属组为groupname的文件。</li></ul></li></ul><ol start="4"><li>搜索条件为时间</li></ol><ul><li>find / -cmin -5<ul><li>在根目录下查找5分钟内被修改过属性的文件和目录</li><li>cmin: 文件属性，change</li><li>amin: 访问时间，access</li><li>mmin: 文件内容，modify</li><li>后面时间前面的符号为’-‘时，代表某个时间段内；为’+’时，代表超过某个时间。</li></ul></li></ul><ol start="5"><li>根据文件类型查找</li></ol><ul><li>find -type f<ul><li>f为文件，d为目录，l为软链接文件</li></ul></li></ul><ol start="6"><li>根据i节点查找</li></ol><ul><li>find -inum 31531<ul><li>查找i节点为31531的文件；</li><li>i节点可通过ls -i列出得到。</li></ul></li></ul><ol start="6"><li>复合搜索条件</li></ol><ul><li>find / -size +1024 -a -size -102400<ul><li>在根目录下查找大于1Mb小于100Mb的文件</li><li>中间参数为-a，意思是and；参数为-o时，意思是or</li></ul></li></ul><ol start="7"><li>对查找结果执行操作</li></ol><ul><li>find / -name inittab -exec ls -l {} \;<ul><li>对搜索结果显示详细信息。</li><li>-exec可以换成-ok，对每个文件执行操作时都会要求确认。</li></ul></li></ul><h3 id="文件搜索-locate"><a href="#文件搜索-locate" class="headerlink" title="文件搜索 locate"></a>文件搜索 locate</h3><p>在文件资料库中查找文件，查找速度比find快，/tmp中的文件不能被收录入文件资料库</p><ol><li><p>locate 文件名</p><ul><li>区分大小写，若想不区分大小写，则需要加上-i选项。</li></ul></li><li><p>更新文件资料库</p><ul><li>updatedb</li></ul></li></ol><h3 id="搜索文件中的内容grep"><a href="#搜索文件中的内容grep" class="headerlink" title="搜索文件中的内容grep"></a>搜索文件中的内容grep</h3><ol><li>grep -iv [指定字串][文件]<ul><li>在文件中搜索字串匹配的行并输出</li><li>-i 不区分大小写</li><li>-v 排除指定字串</li></ul></li></ol><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><ol><li><p>.gz压缩文件，只能压缩文件，压缩完后只剩压缩文件</p><ul><li>gzip 文件名：压缩gz文件</li><li>gunzip 文件名：解压gz文件</li><li>gzip -d 文件名：解压gz文件</li></ul></li><li><p>.tar.gz打包目录，并压缩文件</p><ul><li>tar 选项 [压缩后文件名] [目录]<ul><li>选项-c：打包</li><li>选项-v：显示详细信息</li><li>选项-f：指定文件名</li><li>选项-z：打包同时压缩</li></ul></li></ul></li><li><p>解压tar命令</p><ul><li>tar 选项 [压缩后文件名] [目录]<ul><li>选项-x：解包</li><li>选项-v：显示详细信息</li><li>选项-f：指定解压文件</li><li>选项-z：解压缩</li></ul></li></ul></li><li><p>.zip压缩文件，可以压缩文件或目录，压缩后会保留压缩文件和目录</p><ul><li>zip 选项 [压缩后文件名] [文件或目录]<ul><li>选项-r：压缩目录</li></ul></li></ul></li><li><p>解压缩.zip文件</p><ul><li>unzip [压缩文件]</li></ul></li><li><p>.bz2压缩文件</p><ul><li>bzip2 选项 [文件]<ul><li>选项-k：产生压缩文件后保留原文件</li><li>.gz的升级版，一般用于压缩大型文件</li></ul></li><li>tar -cjf [压缩后目录名.tar.bz2] [目录]<ul><li>压缩目录，生成.tar.bz2压缩文件</li></ul></li></ul></li><li><p>解压.bz2压缩文件</p><ul><li>bunzip2 选项 [压缩文件]<ul><li>选项-k：解压缩后保留原文件</li><li>范例1：bunzip2 -k 文件名.bz2</li><li>范例2：tar -xjf 目录名.tar.bz2</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux学习笔记：文件和目录&lt;/p&gt;
    
    </summary>
    
      <category term="Operation System" scheme="/categories/Operation-System/"/>
    
    
      <category term="Linux" scheme="/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>博客瞎折腾——tranquilpeak主题</title>
    <link href="/2019/08/09/themeConfig/"/>
    <id>/2019/08/09/themeConfig/</id>
    <published>2019-08-09T03:53:32.000Z</published>
    <updated>2019-08-16T08:25:11.407Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="Blog" scheme="/categories/Blog/"/>
    
    
      <category term="config" scheme="/tags/config/"/>
    
      <category term="blog" scheme="/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>安装Tensorflow版本不匹配问题及解决</title>
    <link href="/2019/02/28/tf-version-problem/"/>
    <id>/2019/02/28/tf-version-problem/</id>
    <published>2019-02-27T16:42:40.000Z</published>
    <updated>2019-08-13T12:53:02.510Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>截止至2019年2月27日，Anaconda3的版本已经更新到3.7了，对应的python版本是3.7.1，而没有对应的Tensorflow版本与之相匹配。而python3.5是可以找到tensorflow的。<br>具体报错内容如下：</p><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>创建python3.5环境，与Anaconda3下的python3.7共存。<br>环境：Windows10、Python3.7、Anaconda3.7、conda4.5.12</p><h4 id="使用管理员权限，打开Anaconda-Prompt；"><a href="#使用管理员权限，打开Anaconda-Prompt；" class="headerlink" title="使用管理员权限，打开Anaconda Prompt；"></a>使用管理员权限，打开Anaconda Prompt；</h4><h4 id="键入以下命令："><a href="#键入以下命令：" class="headerlink" title="键入以下命令："></a>键入以下命令：</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name python35 python=3.5</span><br></pre></td></tr></table></figure></code></pre><h4 id="过程中遇到Proceed-y-n-时，键入y，按回车键继续。"><a href="#过程中遇到Proceed-y-n-时，键入y，按回车键继续。" class="headerlink" title="过程中遇到Proceed([y]/n)时，键入y，按回车键继续。"></a>过程中遇到Proceed([y]/n)时，键入y，按回车键继续。</h4><h4 id="成功后，执行下面的命令进行Python3-5环境："><a href="#成功后，执行下面的命令进行Python3-5环境：" class="headerlink" title="成功后，执行下面的命令进行Python3.5环境："></a>成功后，执行下面的命令进行Python3.5环境：</h4><figure class="codeblock codeblock--tabbed"><figcaption><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入python3.5环境</span></span><br><span class="line">conda activate python35</span><br><span class="line"><span class="comment">// 退出环境（即回到python3.7环境）</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></tbody></table></figure></div></figure><h4 id="在python3-5环境中，执行下列命令，安装tensorflow："><a href="#在python3-5环境中，执行下列命令，安装tensorflow：" class="headerlink" title="在python3.5环境中，执行下列命令，安装tensorflow："></a>在python3.5环境中，执行下列命令，安装tensorflow：</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>安装tensorflow</span><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></tbody></table></figure></div></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在Python3.5环境下测试Tensorflow是否可以正常使用：</p><p>键入以下代码：</p><figure class="codeblock codeblock--tabbed"><figcaption><span>测试Tensorflow</span><ul class="tabs"><li class="tab active">python</li></ul></figcaption><div class="tabs-content"><figure class="highlight python" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> t</span><br><span class="line">sess = tf.Session()</span><br><span class="line">hello = tf.constant(<span class="string">"hello, world"</span>)</span><br><span class="line">sess.run(hello)</span><br></pre></td></tr></tbody></table></figure></div></figure><p>不出意外，键入第二行代码后会出现如下警告（不会影响程序运行）：</p><figure class="codeblock codeblock--tabbed"><figcaption><span>Warning</span><ul class="tabs"><li class="tab active">cmd</li></ul></figcaption><div class="tabs-content"><figure class="highlight cmd" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">02</span>-<span class="number">27</span> <span class="number">14</span>:<span class="number">59</span>:<span class="number">44</span>.<span class="number">875953</span>: I tensorflow/core/platform/cpu_feature_guard.cc:<span class="number">141</span>] Your CPU supports instructions that this TensorFlow binary was <span class="keyword">not</span> compiled to use: AVX2</span><br></pre></td></tr></tbody></table></figure></div></figure><p>解决方法为在上述代码之前加入以下代码：</p><figure class="codeblock codeblock--tabbed"><figcaption><span>解决Warning的方法</span><ul class="tabs"><li class="tab active">python</li></ul></figcaption><div class="tabs-content"><figure class="highlight python" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span> <span class="comment"># 设置提示信息的等级为2级，只显示warning和Error</span></span><br></pre></td></tr></tbody></table></figure></div></figure><p>运行成功，输出：</p><figure class="codeblock codeblock--tabbed"><figcaption><span>输出</span><ul class="tabs"><li class="tab active">python</li></ul></figcaption><div class="tabs-content"><figure class="highlight python" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'hello, world'</span></span><br></pre></td></tr></tbody></table></figure></div></figure><hr><h2 id="在Pycharm上配置Tensorflow环境"><a href="#在Pycharm上配置Tensorflow环境" class="headerlink" title="在Pycharm上配置Tensorflow环境"></a>在Pycharm上配置Tensorflow环境</h2><ul><li><strong>打开Pycharm，选择或新建一个工程。</strong></li><li><strong>File -&gt; Settings -&gt; Projects: [PROJECT_NAME] -&gt; Project Interpreter -&gt; Add Local。</strong></li><li><strong>选择 Anaconda3/envs/python35 文件夹下面的python.exe，即配置成功。</strong></li></ul><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>Every problem you encounter  has been met and solved by someone better than you, and you can find the corresponding one in Google.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装Tensorflow时踩过的坑…&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="/categories/Programming/"/>
    
    
      <category term="Tensorflow" scheme="/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>VS使用技巧</title>
    <link href="/2019/01/20/vs-skills/"/>
    <id>/2019/01/20/vs-skills/</id>
    <published>2019-01-20T09:19:52.000Z</published>
    <updated>2019-08-13T12:12:34.508Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h3 id="当解决方案中存在两个及以上项目时，其中有一个需要设置为启动项目（右键-gt-设为启动项目），启动项目标题文字会变成粗体。"><a href="#当解决方案中存在两个及以上项目时，其中有一个需要设置为启动项目（右键-gt-设为启动项目），启动项目标题文字会变成粗体。" class="headerlink" title="当解决方案中存在两个及以上项目时，其中有一个需要设置为启动项目（右键-&gt;设为启动项目），启动项目标题文字会变成粗体。"></a>当解决方案中存在两个及以上项目时，其中有一个需要设置为启动项目（右键-&gt;设为启动项目），启动项目标题文字会变成粗体。</h3><hr><h3 id="包含目录、库目录、链接器的区别及相关问题："><a href="#包含目录、库目录、链接器的区别及相关问题：" class="headerlink" title="包含目录、库目录、链接器的区别及相关问题："></a>包含目录、库目录、链接器的区别及相关问题：</h3><ul><li><p><strong>VC++目录：</strong></p><ul><li>包含目录：寻找#include&lt;xxxx.h&gt;中的xxxx.h的搜索目录</li><li>库目录：寻找.lib文件的搜索目录</li></ul></li><li><p><strong>C/C++：</strong></p><ul><li>常规-&gt;附加包含目录：寻找#include&lt;xxxx.h&gt;中的xxxx.h的搜索目录（每一项对应一个文件夹XXXX，文件夹中包含了编译时所需的头文件，使用时直接#include<xxxx>即可）</xxxx></li></ul></li><li><p><strong>链接器：</strong></p><ul><li>常规-&gt;附加库目录：寻找.lib文件的搜索目录</li><li>输入-&gt;附加依赖项：lib库（C++的库会把函数、类的声明放在*.h中，实现放在*.cpp或*.cc中。编译之后，*.cpp，*.cc，*.c会被打包成一个.lib文件，这样可以保护源代码）</li></ul></li><li><p><strong>常见问题：</strong></p><ul><li>包含目录和附加包含目录（库目录和附加库目录）的区别：<ul><li>包含目录：修改了系统的include宏的值，是全局的；</li><li>附加包含目录：用于当前项目，对其他项目没有影响。</li><li>库目录和附加库目录的区别同上</li></ul></li><li>当需要对某工程添加这些目录时，通常情况下，都是在附加包含目录和附加库目录中添加的。</li><li>要使用一个库，除了要include其头文件以外（附加包含目录），还要在链接过程中把lib加进去（附加库目录、附加依赖项）。    </li><li>当需要向项目中添加.dll动态链接库时，直接将需要添加的.dll文件拖拽到项目生成的.exe所在的文件夹下即可（项目-&gt;属性-&gt;配置属性-&gt;常规-&gt;输出目录，可以看到.exe生成在哪个目录下）。</li><li>在添加上述几个目录的路径的时候，可以看到$(xxxx)，这就是宏了，可以点开右下角的宏查看这些分别代表什么字符串。</li></ul></li></ul><hr><h3 id="出现0xc000007b——应用程序无法正常启动："><a href="#出现0xc000007b——应用程序无法正常启动：" class="headerlink" title="出现0xc000007b——应用程序无法正常启动："></a>出现0xc000007b——应用程序无法正常启动：</h3><ul><li>根本原因是缺乏所需要的DLL，提供了错误版本的dll相当于没有DLL，提示完全一样</li><li>网上的解决办法：<ul><li>SysWOW64目录下的dll并非确保是64位的，也有可能是32位的。那么到哪里去找真正的64位的dll呢？在这里 vs安装目录\VC\redist\x64，这里有正统的dll</li></ul></li><li>我自己的解决办法：<ul><li>在C:\Windows\SysWOW64目录下找到mfc100(d).dll、msvcp100(d).dll、msvcr100(d).dll，替换放入项目的Release(Debug)文件夹下即可。</li></ul></li></ul><hr><h3 id="win10上vs2010写的项目如何使其在xp系统上运行："><a href="#win10上vs2010写的项目如何使其在xp系统上运行：" class="headerlink" title="win10上vs2010写的项目如何使其在xp系统上运行："></a>win10上vs2010写的项目如何使其在xp系统上运行：</h3><ul><li><strong>要领：</strong>要把工程发布为静态库才能具有“跨平台”的属性。<ul><li>【配置属性】-【常规】-【平台工具集】，选择“Visual Studio 2012 (v110 XP)”（不打补丁没有该选项）。</li><li>【配置属性】-【常规】-【使用MFC】，选择“Use MFC in a Static Library”（非MFC程序可无视）。</li><li>【配置属性】-【C/C++】-【代码生成】-【基本运行时库】，根据你的当前工程属性Debug还是Release来选择“Multi-threaded Debug (/MTd)”或者“Multi-threaded (/MT)”。</li><li>将你的工程中依赖的所有外部库，都按照步骤1~3重新编译。</li></ul></li></ul><hr><h3 id="win10上vs2010已经写好的项目如何在xp系统上运行："><a href="#win10上vs2010已经写好的项目如何在xp系统上运行：" class="headerlink" title="win10上vs2010已经写好的项目如何在xp系统上运行："></a>win10上vs2010已经写好的项目如何在xp系统上运行：</h3><ul><li><strong>问题描述：</strong>用vs2010编译好的程序，里面有opencv配置、mfc调用等，最后生成了一个exe文件，在Release文件夹下放了很多dll，win10下面能运行，但在xp和win7下不能运行，一直提示缺乏msvcp140.dll等动态链接文件，但把这些dll文件放入release文件夹或系统路径C:\Windows\System32下都不管用。。。</li><li><strong>解决办法：</strong><ul><li>既然提示msvcp140.dll，那么则说明系统欠缺vs2015组件，于是可以下载并安装微软VC++2015版运行库（英文全称：Microsoft Visual C++ 2015 Redistributable Package），非常方便快捷；</li><li>安装完之后，还是运行不了。按照提示又在Release文件夹下加入了msvcp100d.dll、msvcr100d.dll、mfc100d.dll三个文件夹，便大功告成。至于为什么要加入这三个debug模式的dll文件还是不知其所以然。。。</li></ul></li></ul><hr><h3 id="新建的文档无缘无故打不开源文件、包括文件："><a href="#新建的文档无缘无故打不开源文件、包括文件：" class="headerlink" title="新建的文档无缘无故打不开源文件、包括文件："></a>新建的文档无缘无故打不开源文件、包括文件：</h3><ul><li>在检查完属性-&gt;C/C++-&gt;附加包含目录无任何错误后，运行程序依旧会出现题中的问题，折腾了我半年之久的疑惑终于被我解决了：新建项目时，不能选择默认路径C:\Users\workg\Documents\Visual Studio 2017\Projects\，需要重新给个路径，问题突然就解决了。。。也是非常神奇！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS基础…&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="/categories/Programming/"/>
    
    
      <category term="vs" scheme="/tags/vs/"/>
    
  </entry>
  
  <entry>
    <title>程序打包（Setup使用技巧）</title>
    <link href="/2019/01/15/setup-package/"/>
    <id>/2019/01/15/setup-package/</id>
    <published>2019-01-15T08:58:45.000Z</published>
    <updated>2019-08-13T03:39:07.275Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt--><blockquote><p>参考：<a href="https://www.cnblogs.com/wuhuacong/p/6101853.html" title="链接跳转至https://www.cnblogs.com/wuhuacong/p/6101853.html" target="_blank" rel="noopener">使用Setup Factory安装包制作工具制作安装包</a></p></blockquote><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ul><li><strong>创建和删除文件夹：</strong></li></ul><figure class="codeblock codeblock--tabbed"><figcaption><span>创建和删除文件夹</span><ul class="tabs"><li class="tab active">cpp</li></ul></figcaption><div class="tabs-content"><figure class="highlight cpp" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件夹一般放在安装过程中的Actions中，例如On Post Install</span></span><br><span class="line">Folder.Create(_ProgramFilesFolder..<span class="string">"\\ObjectTracking"</span>);  <span class="comment">// 创建文件夹C:\\Program Files\\ObjectTracking，注意中间的两点起连接字符串的作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件夹一般放在卸载过程中的Actions中，例如On Post Uninstall</span></span><br><span class="line">Folder.DeleteTree(_ProgramFilesFolder..<span class="string">"\\ObjectTracking"</span>, nil); <span class="comment">// 删除C:\\Program Files\\ObjectTracking目录下所有的子文件夹和文件，但不删除文件夹C:\\Program Files\\ObjectTracking</span></span><br><span class="line">Folder.Delete(_ProgramFilesFolder..<span class="string">"\\ObjectTracking"</span>); <span class="comment">// 删除文件夹C:\\Program Files\\ObjectTracking</span></span><br></pre></td></tr></tbody></table></figure></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用打包软件Setup的使用技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="/categories/Programming/"/>
    
    
      <category term="Setup" scheme="/tags/Setup/"/>
    
  </entry>
  
</feed>
